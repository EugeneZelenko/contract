<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<chapter xmlns:rev="http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision" id="boost_contract" rev:last-revision="$Date: 2016/06/12 19:51:30 $">
  <chapterinfo><author>
      <firstname>Lorenzo</firstname> <surname>Caminiti <email>lorcaminiti@gmail.com</email></surname>
    </author><copyright>
      <year>2008</year> <year>2009</year> <year>2010</year> <year>2011</year> <year>2012</year>
      <year>2013</year> <year>2014</year> <year>2015</year> <year>2016</year> <holder>Lorenzo
      Caminiti</holder>
    </copyright><legalnotice id="boost_contract.legal">
      <para>
        Distributed under the Boost Software License, Version 1.0 (see accompanying
        file LICENSE_1_0.txt or a copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice></chapterinfo>
  <title>Boost.Contract 1.0</title>
  <blockquote>
    <para>
      <emphasis><quote>Our field needs more formality, but the profession has not
      realized it yet.</quote></emphasis>
    </para>
  </blockquote>
  <blockquote>
    <para>
      <emphasis>-- Bertrand Meyer (see <link linkend="Meyer97_anchor">[Meyer97]</link>
      page 400)</emphasis>
    </para>
  </blockquote>
  <para>
    This library implements <ulink url="http://en.wikipedia.org/wiki/Design_by_contract">Contract
    Programming</ulink> (a.k.a., Design by Contract or DbC) <footnote id="boost_contract.f0">
    <para>
      Design by Contract (DbC) is a registered trademark of <ulink url="http://en.wikipedia.org/wiki/Eiffel_Software">Eiffel
      Software</ulink> and it was first introduced by the Eiffel programming language
      (see <link linkend="Meyer97_anchor">[Meyer97]</link>).
    </para>
    </footnote> for the C++ programming language. All Contract Programming features
    are supported by this library: subcontracting, class invariants, postconditions
    (with old and return values), preconditions, customizable actions on assertion
    failure (terminate, throw, etc.), optional compilation of assertion checking,
    disable assertion checking while already checking other assertions (to avoid
    infinite recursion), etc.
  </para>
  <para>
    Hosted at: <ulink url="https://github.com/lcaminiti/boost-contract">https://github.com/lcaminiti/boost-contract</ulink>
  </para>
  <note>
    <para>
      In one of its previous revisions, this library passed Boost formal reviews
      and it was accepted into the Boost libraries (see <ulink url="https://groups.google.com/forum/?fromgroups=#!topic/boost-list/jQ7OjAmos_Y">https://groups.google.com/forum/?fromgroups=#!topic/boost-list/jQ7OjAmos_Y</ulink>).
      However, the authors have not had time yet to push this library into an official
      Boost release.
    </para>
  </note>
  <section id="boost_contract.introduction">
    <title><link linkend="boost_contract.introduction">Introduction</link></title>
    <para>
      Contract Programming allows to specify preconditions, postconditions, and class
      invariants that are automatically checked when functions are executed at run-time.
      These conditions assert program specifications within the source code itself
      allowing to find bugs more quickly during testing, making the code self-documenting,
      and increasing overall software quality.
    </para>
    <para>
      The following example shows how to use this library to program contracts for
      a member function similar to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase></computeroutput>
      (the somewhat arbitrary <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">pushable</phrase></computeroutput>
      base class is introduced here just to illustrate subcontracting, see <ulink url="../../example/features/introduction.cpp"><literal moreinfo="none">introduction.cpp</literal></ulink>):
      <footnote id="boost_contract.introduction.f0">
      <para>
        For simplicity, the full contracts of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">vector</phrase></computeroutput>
        class are not programmed here (see the <link linkend="boost_contract.examples">Examples</link>
        section for a much more comprehensive version of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">vector</phrase></computeroutput>'s
        contracts).
      </para>
      </footnote>
    </para>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">;</phrase> <phrase role="comment">// Arbitrary base to demo subcontracting.</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// For subcontracting.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Checked in AND with base class invariants.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase> <phrase role="comment">// Line 25.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase> <phrase role="comment">// Old values.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_push_back</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vector</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Checked in OR with base preconditions.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase> <phrase role="comment">// Line 35.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Checked in AND with base postconditions.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Line 38.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">push_back</phrase><phrase role="special">)</phrase> <phrase role="comment">// For `override_push_back`.</phrase>

    <phrase role="comment">// Could program contracts for those as well.</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">max_size</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
    </para>
    <para>
      This library executes the following steps when the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">vector</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase></computeroutput>
      function above is called at run-time (see <link linkend="boost_contract.contract_programming_overview">Contract
      Programming Overview</link>):
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          First, the class invariants and the function preconditions are checked.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Then, the function body following the contract declaration is executed.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Last, the class invariants and the function postconditions are checked.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          When subcontracting (like in the example above), this library will automatically
          check derived and base preconditions in <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>,
          derived and base postconditions in <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>,
          derived and base class invariants in <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>.
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      For example, if there is a bug in the function caller for which <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput> is called when <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">size</phrase></computeroutput>
      is equal to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">max_size</phrase></computeroutput> then the
      execution of the program will terminate with an error message similar to the
      following (so it will be evident that the bug is in the caller):
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">precondition assertion "size() &lt; max_size()" failed: file "introduction.cpp", line 35
</programlisting>
    <para>
      Instead, if there is a bug in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput>
      implementation for which <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">size</phrase></computeroutput>
      is not increased by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">1</phrase></computeroutput> after <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">value</phrase></computeroutput> is added to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">vector</phrase></computeroutput>
      by the function body then the execution will terminate with an error message
      similar to the following (so it will be evident that the bug is in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput> body):
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">postcondition assertion "size() == *old_size + 1" failed: file "introduction.cpp", line 38
</programlisting>
    <para>
      Similarly, if there is a bug in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput>
      implementation for which <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">size</phrase></computeroutput>
      is not kept greater or equal than <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">capacity</phrase></computeroutput>
      then the execution will terminate with an error message similar to the following:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">exit invariant assertion "size() &lt;= capacity()" failed: file "introduction.cpp", line 25
</programlisting>
    <para>
      Finally, if the class invariant check failed on entering the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput> function call, before executing
      the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput> implementation,
      then the execution will terminate with an error message similar to the following:
    </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">entry invariant assertion "size() &lt;= capacity()" failed: file "introduction.cpp", line 25
</programlisting>
    <para>
      By default, when an assertion fails this library prints an error message to
      the standard error <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cerr</phrase></computeroutput> and terminates the program calling
      <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput> (this behaviour can be customized
      to take any user-defined action including throwing exceptions, see the <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw on Failure</link>
      section). Note that the error message printed by this library contains information
      to easily and uniquely identify the point in the program at which the assertion
      failed. <footnote id="boost_contract.introduction.f1">
      <para>
        <emphasis role="bold">Rationale:</emphasis> The assertion failure messages
        generated by this library follows a format similar to the messages printed
        by Clang when the C-style <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput>
        macro fails.
      </para>
      </footnote>
    </para>
    <note>
      <para>
        C++11 lambda functions are necessary to use this library without having to
        manually program a significant amount of boiler-plate code (but see the
        <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link> section). All other C++11 features (like <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations) are not really necessary
        even if they are sometimes used in this documentation for convenience.
      </para>
    </note>
  </section>
  <section id="boost_contract.getting_started">
    <title><link linkend="boost_contract.getting_started">Getting Started</link></title>
    <para>
      This section explains how to get oriented to start using this library.
    </para>
    <section id="boost_contract.getting_started.this_documentation">
      <title><link linkend="boost_contract.getting_started.this_documentation">This
      Documentation</link></title>
      <para>
        Programmers should be able to start using this library after reading the
        <link linkend="boost_contract.introduction">Introduction</link>, <link linkend="boost_contract.getting_started">Getting
        Started</link>, and <link linkend="boost_contract.tutorial">Tutorial</link>
        sections. The other sections of this documentation can be consulted at a
        later point to gain a more in-depth knowledge of the library.
      </para>
      <para>
        Some footnotes are marked by the word "<emphasis role="bold">Rationale</emphasis>".
        These explain reasons behind decisions made during the design and implementation
        of this library.
      </para>
    </section>
    <section id="boost_contract.getting_started.compilers_and_platforms">
      <title><link linkend="boost_contract.getting_started.compilers_and_platforms">Compilers
      and Platforms</link></title>
      <para>
        In general, this library requires a C++ compiler with sound support of SFINAE
        and other template meta-programming techniques included in the C++03 standard.
        This library requires Boost (Boost.Optional, Boost.Thread, Boost.FunctionTypes,
        Boost.Traits, Boost.MPL, etc.).
      </para>
      <para>
        It is possible to use this library without C++11 lambda functions but a large
        amount of boiler-plate code is required to manually program separate functions
        to specify preconditions and postconditions (so using this library without
        C++11 lambda functions is not recommended, see <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). It is also possible to use this library without
        C++11 (or C++99) variadic macros by manually programming a small amount of
        boiler-plate code (see <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
        Macros</link>).
      </para>
      <para>
        Some parts of this documentation use an operator <literal moreinfo="none"><emphasis>typeof</emphasis>(...)</literal>.
        This is just to indicate an operator equivalent to C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">decltype</phrase></computeroutput>
        in this documentation. Internally this library does not actually use type
        deduction in these cases (because the library already knows the type in question)
        so C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">decltype</phrase></computeroutput> and other
        type-of implementations are not required to compile this library.
      </para>
      <para>
        This library has been developed and tested with:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            Visual Studio 2015 on Windows (MSVC <literal moreinfo="none">cl</literal> version 19.00.23506).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            GCC version 4.9.3 on Cygwin (with C++11 features enabled <literal moreinfo="none">-std=c++11</literal>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Clang version 3.5.2 on Cygwin (with C++11 features enabled <literal moreinfo="none">-std=c++11</literal>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Boost C++ libraries version 1.60.0.
          </simpara>
        </listitem>
      </itemizedlist>
    </section>
    <section id="boost_contract.getting_started.code_organization">
      <title><link linkend="boost_contract.getting_started.code_organization">Code
      Organization</link></title>
      <para>
        Let <literal moreinfo="none"><emphasis>lib-root</emphasis></literal> be the directory under
        which this library source files have been installed. This library flies are
        organized as follows:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><emphasis>lib-root/</emphasis>                   # Directory where this library files were installed.
    build/                  # Build files (using Boost.Jam).
    doc/                    # Documentation (using Boost.QuickBook).
        html/               # This documentation (HTML).
    example/                # Examples (including those listed in this documentation).
    include/
        boost/
            contract.hpp    # Include all headers at once.
            contract/       # Header files to be included one-by-one.
                core/       # Fundamental headers (usually indirectly included by other headers).
                detail/     # Implementation code (should never be included or used directly).
    src/                    # Library source code to be compiled.
    test/                   # Tests.
</programlisting>
      <para>
        All headers required by this library can be included at once by:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
</programlisting>
      <para>
        Alternatively, all <literal moreinfo="none">boost/contract/*.hpp</literal> headers are independent
        from one another and they can be selectively included one-by-one based on
        the specific functionality of this library being used (this might reduce
        compilation time). The <literal moreinfo="none">boost/contract/core/*.hpp</literal> headers
        are not independent from other headers and they do not need to be directly
        included in user code when one or more <literal moreinfo="none">boost/contract/*.hpp</literal>
        header is included already.
      </para>
      <para>
        Files in <literal moreinfo="none">boost/contract/detail/</literal>, names in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">detail</phrase></computeroutput> namespace, names and macros starting
        with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost_contract_detail</phrase><phrase role="special">...</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_DETAIL</phrase><phrase role="special">...</phrase></computeroutput> (in any namespace, including user's namespaces)
        are part of this library implementation and should never be used directly
        in user code.
      </para>
      <para>
        Names starting with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ERROR</phrase><phrase role="special">...</phrase></computeroutput> are used by this library to report compile-time
        errors (so spotting these names in error messages reported by the compiler
        might help troubleshooting).
      </para>
    </section>
    <section id="boost_contract.getting_started.installation_and_compilation">
      <title><link linkend="boost_contract.getting_started.installation_and_compilation">Installation
      and Compilation</link></title>
      <para>
        Let <literal moreinfo="none"><emphasis>lib-root</emphasis></literal> be the directory under
        which this library source files have been installed. Let <literal moreinfo="none"><emphasis>boost-root</emphasis></literal>
        be the directory under which Boost source code has been installed and compiled
        following Boost's documentation (if pre-compiled Boost distributions are
        used instead, the <literal moreinfo="none"><emphasis>lib-boost</emphasis>/include</literal>
        and <literal moreinfo="none"><emphasis>lib-boost</emphasis>/stage/lib</literal> directories
        below might be replaced by <literal moreinfo="none">/usr/include</literal> and <literal moreinfo="none">/usr/lib</literal>
        or similar directories depending on the specific Boost distribution, OS,
        etc.).
      </para>
      <para>
        The following steps show how to compile this library as a shared library
        (a.k.a., Dynamically Linked Library (DLL)) and then compile and run a user
        program that uses this library (the <ulink url="../../example/features/introduction.cpp"><literal moreinfo="none">introduction.cpp</literal></ulink>
        program shown in <link linkend="boost_contract.introduction">Introduction</link>
        is used as an example).
      </para>
      <para>
        Using MSVC on Windows (from a developer command prompt that automatically
        invokes the correct <literal moreinfo="none">vcvarsall.bat</literal>):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">&gt; cd <emphasis>lib-root</emphasis>\build
&gt; cl <emphasis>lib-root</emphasis>\src\contract.cpp /MDd /EHs -DBOOST_CONTRACT_DYN_LINK -I <emphasis>lib-root</emphasis>\include -I <emphasis>boost-root</emphasis> /link /DLL /LIBPATH:<emphasis>boost-root</emphasis>\stage\lib /out:boost_contract.dll
</programlisting>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">&gt; cd <emphasis>lib-root</emphasis>\example\features
&gt; cl introduction.cpp /MDd /EHs -I <emphasis>lib-root</emphasis>\include -I <emphasis>boost-root</emphasis> /link /LIBPATH:<emphasis>boost-root</emphasis>\stage\lib <emphasis>lib-root</emphasis>\build\boost_contract.lib
</programlisting>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">&gt; set PATH=%PATH%;<emphasis>lib-root</emphasis>\build
&gt; introduction
</programlisting>
      <para>
        Using GCC on Cygwin (and some Linux-like OS):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">$ cd <emphasis>lib-root</emphasis>/build
$ g++ <emphasis>lib-root</emphasis>/src/contract.cpp -std=c++11 -shared -DBOOST_CONTRACT_DYN_LINK -I <emphasis>lib-root</emphasis>/include -I <emphasis>boost-root</emphasis> <emphasis>boost-root</emphasis>/stage/lib/libboost_system.a -o boost_contract.dll
</programlisting>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">$ cd <emphasis>lib-root</emphasis>/example/features
$ g++ introduction.cpp -std=c++11 -I <emphasis>lib-root</emphasis>/include -I <emphasis>boost-root</emphasis> <emphasis>lib-root</emphasis>/build/boost_contract.dll -o introduction
</programlisting>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">$ export PATH=$PATH:<emphasis>lib-root</emphasis>/build
$ ./introduction
</programlisting>
      <para>
        The above steps also work for Clang using <literal moreinfo="none">clang++</literal> instead
        of <literal moreinfo="none">g++</literal>.
      </para>
      <para>
        Following a convention common to many Boost libraries, this library provides
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_DYN_LINK">BOOST_CONTRACT_DYN_LINK</link></computeroutput>
        macro to be defined when compiling this library as a shared library instead.
        If this macro is not defined, this library will be compiled as a statically
        linked library. There is also a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_HEADER_ONLY">BOOST_CONTRACT_HEADER_ONLY</link></computeroutput>
        macro that can be defined when compiling user programs instead of pre-compiling
        this library separately as either a static or shared library (because this
        library will then be composed only of header files so it no longer needs
        to be compiled separately).
      </para>
      <important>
        <para>
          When a program is composed of different libraries that in turn use this
          library, this library will not properly work at run-time unless it is compiled
          and linked as a shared library defining the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_DYN_LINK">BOOST_CONTRACT_DYN_LINK</link></computeroutput>
          macro as shown above. <footnote id="boost_contract.getting_started.installation_and_compilation.f0">
          <para>
            Specifically, this library will not correctly disable contracts while
            checking other contracts and call the correct user-defined contract failure
            handlers unless it is compiled as a shared library when it is being used
            by different libraries part of the same program.
          </para>
          </footnote>
        </para>
      </important>
      <para>
        It should be simple enough for programmers to setup their build environments
        (BJam, Make, CMake, MSBuild, etc.) to compile this library source code into
        a shared library and then compile and link user code against it (if that
        is preferred instead of manually running the compiler as indicated by the
        steps above). For example, this library source comes with a set of Boost.Build
        (BJam) files that can be used to build the library and build and run its
        tests and examples assuming: Boost was built from source, an environment
        variable named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_ROOT</phrase></computeroutput>
        is set to the <literal moreinfo="none"><emphasis>boost-root</emphasis></literal> directory
        path, and the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">bjam</phrase></computeroutput> program
        can be found in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">PATH</phrase></computeroutput>
        environment variable. The following uses BJam to build and run the <ulink url="../../example/features/introduction.cpp"><literal moreinfo="none">introduction.cpp</literal></ulink>
        program and also to automatically build this library when necessary:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude">&gt; cd <emphasis>lib-root</emphasis>\example
&gt; bjam features-introduction
</programlisting>
    </section>
  </section>
  <section id="boost_contract.contract_programming_overview">
    <title><link linkend="boost_contract.contract_programming_overview">Contract
    Programming Overview</link></title>
    <blockquote>
      <para>
        <emphasis><quote>It is absurd to make elaborate security checks on debugging
        runs, when no trust is put in the results, and then remove them in production
        runs, when an erroneous result could be expensive or disastrous. What would
        we think of a sailing enthusiast who wears his life-jacket when training
        on dry land but takes it off as soon as he goes to sea?</quote></emphasis>
      </para>
    </blockquote>
    <blockquote>
      <para>
        <emphasis>-- Charles Antony Richard Hoare (see <link linkend="Hoare73_anchor">[Hoare73]</link>)</emphasis>
      </para>
    </blockquote>
    <para>
      This section gives an overview of Contract Programming (see <link linkend="Meyer97_anchor">[Meyer97]</link>,
      <link linkend="Mitchell02_anchor">[Mitchell02]</link>, and <link linkend="N1613_anchor">[N1613]</link>
      for a more detailed introduction to Contract Programming). Readers that already
      have a basic understanding of Contract Programming can skip this section and
      come back to it after reading the <link linkend="boost_contract.tutorial">Tutorial</link>.
    </para>
    <note>
      <para>
        The objective of this library is <emphasis>not</emphasis> to convince programmers
        to use Contract Programming. It is assumed that programmes understand the
        benefits and trade-offs associated with Contract Programming and they have
        already decided to use this methodology to code program specifications. Then,
        this library aims to be the best and more complete Contract Programming library
        for C++.
      </para>
    </note>
    <section id="boost_contract.contract_programming_overview.assertions">
      <title><link linkend="boost_contract.contract_programming_overview.assertions">Assertions</link></title>
      <para>
        Contract Programming is characterized by the following assertion mechanisms:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Preconditions: These are logical conditions that programmers expect to
            be true when the function is called (e.g., to check constraints on the
            function arguments).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Postconditions: These are logical conditions that programmers expect
            to be true when the function exits without throwing an exception (e.g.,
            to check the result and any side effect that a function might have).
            Postconditions can usually access the function return value (for non-void
            functions) and <emphasis>old values</emphasis> that expressions had before
            the function body was executed.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Class invariants: These are logical conditions that programmers expect
            to be true after the constructor exits without throwing an exception,
            before and after the execution of every public non-static member function
            (even if they throw exceptions), before the destructor is executed and
            if the destructor throws an exception (e.g, class invariants can define
            valid states for all objects of a given class). It is possible to specify
            a different set of class invariants for volatile member functions, namely
            <emphasis>volatile class invariants</emphasis>. It is also possible to
            specify <emphasis>static class invariants</emphasis> which are excepted
            to be true before and after the execution of any constructor, destructor
            (even if it does not throw an exception), and public member function
            (even if static). <footnote id="boost_contract.contract_programming_overview.assertions.f0">
            <para>
              <emphasis role="bold">Rationale:</emphasis> Static and volatile class
              invariants were first introduced by this library to reflect the fact
              that C++ supports both static and volatile member functions. Static
              and volatile class invariants are not part of <link linkend="N1962_anchor">[N1962]</link>.
            </para>
            </footnote>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Subcontracting: Subcontracting is defined according to the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
            principle</ulink> and it indicates that preconditions cannot be strengthen,
            while postconditions and class invariants cannot be weaken.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        Furthermore, it is a common requirement for Contract Programming to automatically
        disable other contracts while a contract assertions is already being checked
        (in order to avoid infinite recursion while checking contract assertions).
      </para>
      <note>
        <para>
          This library implements this requirement but it should be noted that, in
          order to globally disable assertions while checking another assertion,
          some type of global variable needs to be used by the library implementation.
          This library will automatically protect such a global variable from race
          conditions in multi-threated programs, but this will effectively introduce
          a global lock in the program (the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_DISABLE_THREADS">BOOST_CONTRACT_DISABLE_THREADS</link></computeroutput>
          macro can be defined to disable this global lock but at the risk of incurring
          in race conditions).
        </para>
      </note>
      <para>
        In general, it is recommended to specify different contract conditions using
        separate assertion statements and not to group them together into a single
        condition using logical operators (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&amp;&amp;</phrase></computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">||</phrase></computeroutput>, etc.). This is because if
        contract conditions are programmed together using a single assertion then
        it will not be clear which condition actually failed in case the assertion
        is evaluated to be false at run-time.
      </para>
      <para>
        A limited form of Contract Programming is the use of the C-style <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput> macro. Using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput>
        is common practice for many programmers but it suffers of the following limitations:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput> does not distinguish
            between preconditions and postconditions. In well-tested production code,
            postconditions can usually be disabled trusting the correctness of the
            implementation while preconditions might still need to remain enabled
            because of possible changes in the calling code (e.g., postconditions
            of a given library could be disabled after testing while its preconditions
            can be kept enabled given the library cannot predict the evolution of
            user code that will be calling it). Using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput>
            it is not possible to selectively disable only postconditions and all
            assertions must be disabled at once.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput> requires to manually
            program extra code to check class invariants (e.g., extra member functions
            and try blocks).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput> does not support
            subcontracting.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput> calls are usually
            scattered throughout the implementation thus the asserted conditions
            are not immediately visible in their entirety by programmers.
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        These limitation do not apply to Contract Programming instead.
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.benefits_and_costs">
      <title><link linkend="boost_contract.contract_programming_overview.benefits_and_costs">Benefits
      and Costs</link></title>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.benefits_and_costs.h0">
        <phrase id="boost_contract.contract_programming_overview.benefits_and_costs.benefits"/><link linkend="boost_contract.contract_programming_overview.benefits_and_costs.benefits">Benefits</link>
      </bridgehead>
      <para>
        The main use of Contract Programming is to improve software quality. <link linkend="Meyer97_anchor">[Meyer97]</link> discusses how Contract Programming
        can be used as the basic tool to write <quote>correct</quote> software. __Stroustrup97__
        discusses the key importance of class invariants plus advantages and disadvantages
        of preconditions and postconditions. The following is a short summary of
        the benefits associated with Contract Programming inspired mainly by <link linkend="N1613_anchor">[N1613]</link>:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Preconditions and postconditions: Using function preconditions and postconditions,
            programmers can give a precise semantic description of what a function
            requires at its entry and what it ensures under its exit (if it does
            not throw an exception). In particular, using postcondition old values,
            Contract Programming provides a mechanism that allows programmers to
            compare values of an expression before and after the function body execution.
            This mechanism is powerful enough to enable programmers to express many
            correctness constraints within the code itself, constraints that would
            otherwise have to be captured at best only informally by documentation.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Class invariants: Using class invariants, programmers can describe what
            to expect from a class and the logic dependencies between the class members.
            It is the job of the constructor to ensure that the class invariants
            are satisfied when the object is first created. Then the implementation
            of the member functions can be largely simplified as they can be written
            knowing that the class invariants are satisfied because Contract Programing
            checks them before and after the execution of every public member function.
            Finally, the destructor makes sure that the class invariants held for
            the entire life of the object checking the class invariants one last
            time before the object is destructed.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Self-documenting code: Contracts are part of the source code, they are
            checked at run-time so they are always up-to-date with the code itself.
            Therefore program specifications, as documented by the contracts, can
            be trusted to always be up-to-date with the implementation.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Easier debugging: Contract Programming can provide a powerful debugging
            facility because, if contracts are well written, bugs will cause contract
            assertions to fail exactly where the problem first occurs instead than
            at some later stage of the program execution in an apparently unrelated
            manner. Note that a precondition failure points to a bug in the function
            caller, a postcondition failure points instead to a bug in the function
            implementation. <footnote id="boost_contract.contract_programming_overview.benefits_and_costs.f0">
            <para>
              Of course, if the contract is ill-written then Contract Programming
              is of little use. However, it is less likely to have a bug in both
              the function body and the contract than in the function body only.
              For example, consider the validation of a result in postconditions.
              Validating the return value might seem redundant, but in this case
              we actually want that redundancy. When programmers write a function,
              there is a certain probability that they make a mistake in implementing
              the function body. When programmers specify the result of the function
              in the postconditions, there is also a certain probability that they
              make a mistake in writing the contract. However, the probability that
              programmers make a mistake twice (in both the body <emphasis>and</emphasis>
              the contract) is in general lower than the probability that the mistake
              is made just once (in either the body or the contract).
            </para>
            </footnote>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Easier testing: Contract Programming facilitates testing because a contract
            naturally specifies what a test should check. For example, preconditions
            of a function state which inputs cause the function to fail and postconditions
            state which outputs are produced by the function on successful exit.
            (That said, Contract Programming should be seen as a tool to complement
            (and obviously not to replace) testing.)
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Formal design: Contract Programming can serve to reduce the gap between
            designers and programmers by providing a precise and unambiguous specification
            language. Moreover, contracts can make code reviews easier by clarifying
            some of the semantics and usage of the code.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Formalized inheritance: Contract Programming formalizes the virtual function
            overriding mechanism using subcontracting as justified by the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
            principle</ulink>. This keeps the base class programmers in control as
            overriding functions always have to fully satisfy the base class contracts.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Replace Defensive Programming: Contract Programming assertions can replace
            <ulink url="http://en.wikipedia.org/wiki/Defensive_programming">Defensive
            Programming</ulink> checks localizing these checks within the contract
            and making the code more readable.
          </simpara>
        </listitem>
      </orderedlist>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.benefits_and_costs.h1">
        <phrase id="boost_contract.contract_programming_overview.benefits_and_costs.costs"/><link linkend="boost_contract.contract_programming_overview.benefits_and_costs.costs">Costs</link>
      </bridgehead>
      <para>
        In general, Contract Programming benefits come at the cost of performance
        as discussed in detail by both __Stroustrup97__ and <link linkend="Meyer97_anchor">[Meyer97]</link>.
        However, while performance trade-offs should be carefully considered depending
        on the specific application domain, software quality cannot be sacrificed:
        it is difficult to see value in software that quickly and efficiently provides
        incorrect results.
      </para>
      <para>
        The run-time performances are negatively impacted by Contract Programming
        mainly because of extra time require to:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check the asserted conditions.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Call additional functions that specify preconditions, postconditions,
            class invariants, etc.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Copy old and return values when these are used in postconditions.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        To mitigate the run-time performance impact, programmers can selectively
        disable run-time checking of some of the contract assertions. Programmers
        will have to decide based on the performance trade-offs required by their
        applications, but a reasonable approach often is to:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            Always write contracts to clarify the semantics of the design embedding
            the specifications directly in the code and making the code self-documenting.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Enable preconditions, postconditions, and class invariants checking during
            initial testing.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Enable only preconditions (and possibly class invariants) checking during
            release testing and for the final release (see <link linkend="boost_contract.advanced_topics.disable_contract_checking">Disable
            Contract Checking</link>).
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        This approach is usually reasonable because in well-tested production code,
        validating the function body implementation using postconditions (and often
        class invariants) is rarely needed since the function has shown itself to
        be <quote>correct</quote> during testing. On the other hand, checking function
        arguments using preconditions is always needed because of changes that can
        be made to the calling code (without having to necessarily re-test and re-released
        to called code). Furthermore, postconditions are usually computationally
        more expensive to check than preconditions and class invariants.
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.function_calls">
      <title><link linkend="boost_contract.contract_programming_overview.function_calls">Function
      Calls</link></title>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.function_calls.h0">
        <phrase id="boost_contract.contract_programming_overview.function_calls.free_functions"/><link linkend="boost_contract.contract_programming_overview.function_calls.free_functions">Free
        Functions</link>
      </bridgehead>
      <para>
        A call to a non-member function with contracts executes the following steps
        (see also <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>):
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check function preconditions.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Execute the function body.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body did not throw an exception, check function postconditions.
          </simpara>
        </listitem>
      </orderedlist>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.function_calls.h1">
        <phrase id="boost_contract.contract_programming_overview.function_calls.private_and_protected_member_functions"/><link linkend="boost_contract.contract_programming_overview.function_calls.private_and_protected_member_functions">Private
        and Protected Member Functions</link>
      </bridgehead>
      <para>
        In Contract Programming, Private and protected member functions do not have
        to satisfy the class invariants (because these functions are considered part
        of the implementation of the class). Furthermore, the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
        principle</ulink> does not apply to private and protected member functions
        (because these functions are not accessible to the user at the calling site
        where the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
        principle</ulink> applies).
      </para>
      <para>
        Therefore, calls to private and protected member functions with contracts
        execute the same steps as the ones indicated for non-member functions above
        (checking only preconditions and postconditions, but without checking class
        invariants and without subcontracting).
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.public_function_calls">
      <title><link linkend="boost_contract.contract_programming_overview.public_function_calls">Public
      Function Calls</link></title>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.public_function_calls.h0">
        <phrase id="boost_contract.contract_programming_overview.public_function_calls.overriding_public_member_functions"/><link linkend="boost_contract.contract_programming_overview.public_function_calls.overriding_public_member_functions">Overriding
        Public Member Functions</link>
      </bridgehead>
      <para>
        Let's consider a public member function in a derived class that is overriding
        public virtual functions declared in a number of its base classes (because
        of multiple inheritance, the function could override from more than one base
        class). We refer to the function in the derived class as the <emphasis>overriding
        function</emphasis>, and to the functions being overridden in the different
        base classes as the <emphasis>overridden functions</emphasis>.
      </para>
      <para>
        Then a call to the overriding public member function with contracts executes
        the following steps (see also <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>):
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static class invariants for all overridden bases, <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            then check the derived class static <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static invariants.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check preconditions of overridden public member functions from all overridden
            bases in <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
            with each other, <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
            else check the overriding function preconditions in the derived class.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Executed the overriding function body.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check static class invariants <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static class invariants for all overridden bases, <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            then check the derived class static <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static invariants (even if the body threw an exception).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body did not throw an exception, check postconditions of overridden
            public member functions from all overridden bases in <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            with each other, <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            then check the overriding function postconditions in the derived class.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        Volatile member functions check static class invariants <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
        volatile class invariants instead. Preconditions and postconditions of volatile
        member functions and volatile class invariants access the object as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput>.
      </para>
      <note>
        <para>
          <anchor id="and_anchor"/><anchor id="or_anchor"/>In this documentation
          <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
          and <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
          indicate the logic <emphasis>and</emphasis> and <emphasis>or</emphasis>
          operations evaluated in <emphasis>short-circuit</emphasis>. For example:
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">p</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">q</phrase></computeroutput> is true if and only if
          both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">p</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">q</phrase></computeroutput> are true, but <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">q</phrase></computeroutput>
          is never evaluated when <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">p</phrase></computeroutput>
          is false; <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">p</phrase></computeroutput> <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">q</phrase></computeroutput> is true if and only if
          either <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">p</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">q</phrase></computeroutput> are true, but <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">q</phrase></computeroutput>
          is never evaluated when <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">p</phrase></computeroutput>
          is true.
        </para>
      </note>
      <para>
        When subcontracting, overridden functions are searched (at compile-time)
        deeply in the public branches of the inheritance tree (i.e., not just the
        derived class's direct public parents are inspected, but also all its public
        grandparents, etc.). In case of multiple inheritance this search extends
        widely to all multiple public base classes following their order of declaration
        in the derived class inheritance list (as usual in C++, this search could
        result in multiple overridden functions and therefore in subcontracting from
        multiple public base classes). Note that only public base classes are considered
        for subcontracting (because private and protected base classes are not accessible
        to the user at the calling site where the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
        principle</ulink> applies).
      </para>
      <para>
        Class invariants are checked before preconditions and postconditions so programming
        of precondition and postcondition assertions can be simplified by assuming
        that class invariants are satisfied already (e.g., if class invariants assert
        that a pointer cannot be null then preconditions and postconditions can safety
        dereference that pointer without additional checking). Similarly, subcontracting
        checks contracts of public base classes before checking the derived class
        contracts so programming derived class contract assertions can be simplified
        by assuming that public base class contracts are satisfied already.
      </para>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.public_function_calls.h1">
        <phrase id="boost_contract.contract_programming_overview.public_function_calls.non_overriding_public_member_functions"/><link linkend="boost_contract.contract_programming_overview.public_function_calls.non_overriding_public_member_functions">Non-Overriding
        Public Member Functions</link>
      </bridgehead>
      <para>
        A call to a public non-static member function with contracts but that is
        not overriding functions from any of the public base classes executes the
        following steps (see also <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>):
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check class static <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static invariants (but none of the invariants from base classes).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check function preconditions (but none of the preconditions from functions
            in base classes).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Executed the function body.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check the class static <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static invariants (even if the body threw an exception, but none
            of the invariants from base classes).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body did not throw an exception, check function postconditions
            (but none of the postconditions from functions in base classes).
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        Volatile member functions check static class invariants <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
        volatile class invariants instead. Preconditions and postconditions of volatile
        member functions and volatile class invariants access the object as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput>.
      </para>
      <para>
        Class invariants are checked because this function is part of the class public
        API. However, none of the contracts of the base classes are checked because
        this function is not overriding functions from any of the public base classes
        (so the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
        principle</ulink> does not require this function to subcontract).
      </para>
      <bridgehead renderas="sect4" id="boost_contract.contract_programming_overview.public_function_calls.h2">
        <phrase id="boost_contract.contract_programming_overview.public_function_calls.static_public_member_functions"/><link linkend="boost_contract.contract_programming_overview.public_function_calls.static_public_member_functions">Static
        Public Member Functions</link>
      </bridgehead>
      <para>
        A call to a public static member function with contracts executes the following
        steps (see also <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>):
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants (but not the non-static invariants and
            none of the invariants from base classes).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check function preconditions (but none of the preconditions from function
            in base classes).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Executed the function body.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check static class invariants (even if the body threw an exception, but
            not the non-static invariants and none of the invariants from base classes).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body did not throw an exception, check function postconditions
            (but none of the postconditions from functions in base classes).
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        Class invariants are checked because this function is part of the class public
        API, but only static class invariants can be checked (because this is a static
        function so it cannot access the object that would instead be required to
        check non-static class invariants). Furthermore, static functions cannot
        override any function so the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
        principle</ulink> does not apply and they do not subcontract.
      </para>
      <para>
        Preconditions, postconditions, and class invariants of static member functions
        cannot access the object (because they are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
        members).
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.constructor_calls">
      <title><link linkend="boost_contract.contract_programming_overview.constructor_calls">Constructor
      Calls</link></title>
      <para>
        A call to a constructor with contracts executes the following steps (see
        also <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>):
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check constructor preconditions (but these cannot access the object because
            the object is not constructed yet).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Execute the constructor member initialization list (if present).
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Construct any base class (public or not) according with C++ construction
                  mechanism and also check the contracts of these base constructors
                  (according with steps similar to the ones listed here).
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check static class invariants (but not the non-static or volatile class
            invariants, because the object is not constructed yet).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Execute the constructor body.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check static class invariants (even if the body threw an exception).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check non-static <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
                  volatile class invariants (because the object is now successfully
                  constructed).
                </simpara>
              </listitem>
              <listitem>
                <simpara>
                  Check constructor postconditions (but these cannot access the object
                  old value because there was no object before the execution of the
                  constructor body).
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        Constructor preconditions are checked before executing the member initialization
        list so that programming these initializations can be simplified assuming
        the constructor preconditions are satisfied (e.g., constructor arguments
        can be validated by the constructor preconditions before they are used to
        initialize bases and data members).
      </para>
      <para>
        As indicated in the steps above, C++ object construction mechanism will automatically
        check base class contracts when these bases are initialized (no explicit
        subcontracting behaviour is required).
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.destructor_calls">
      <title><link linkend="boost_contract.contract_programming_overview.destructor_calls">Destructor
      Calls</link></title>
      <para>
        A call to a destructor with contracts executes the following steps (see also
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>):
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            non-static <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            volatile class invariants.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Execute the destructor body (destructors have no parameters and they
            can be called at any time after object construction so they have no preconditions).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check static class invariants (even if the body threw an exception).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body threw an exception, check non-static class invariants (because
            the object was not successfully destructed so it still exists and should
            satisfy its invariants).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check destructor postconditions (but these can only access the
                  class static members because there is no object after successful
                  execution of the destructor body). <footnote id="boost_contract.contract_programming_overview.destructor_calls.f0">
                  <para>
                    None of the Contract Programming references that the authors
                    have studied propose postconditions for destructor (neither
                    <link linkend="N1962_anchor">[N1962]</link> nor <link linkend="Meyer97_anchor">[Meyer97]</link>
                    (but Eiffel does not support static data members also)). However,
                    in principle there could be uses cases for destructor postconditions
                    (e.g., a class that counts object instances could use destructor
                    postconditions to assert that an instance counter stored in a
                    static data member is decreased by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">1</phrase></computeroutput>
                    because the object has been destructed) so this library supports
                    postconditions for destructors. Of course, after destructor body
                    execution there is no object anymore so destructor postconditions
                    should only access the class' static members.
                  </para>
                  </footnote>
                </simpara>
              </listitem>
              <listitem>
                <simpara>
                  Destroy any base class (public or not) according with C++ destruction
                  mechanism and also check the contracts of these base destructors
                  (according with steps similar to the ones listed here).
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        As indicated in the steps above, C++ object destruction mechanism will automatically
        check base class contracts when the destructor exits without throwing an
        exception (no explicit subcontracting behaviour is required).
      </para>
      <note>
        <para>
          Given that C++ allows destructors to throw, this library handles the cases
          when destructor bodies throw exceptions as indicated above. However, in
          order to comply with STL exception safety guarantees and good C++ programming
          practices, users should program destructor bodies to never throw.
        </para>
      </note>
    </section>
    <section id="boost_contract.contract_programming_overview.constant_correctness">
      <title><link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link></title>
      <para>
        Contracts are only responsible to check the program state in oder to ensure
        its compliance with the specifications. Therefore, contracts should only
        have access to the object, function arguments, function return value, old
        values, and all other program variables in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
        context (via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">*</phrase>
        <phrase role="keyword">const</phrase></computeroutput>, etc.).
      </para>
      <para>
        Whenever possible (e.g., class invariants and postcondition old values),
        this library automatically enforces this constant-correctness constraint
        at compile-time using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>.
        However, this library cannot automatically enforce this constraint in all
        cases (e.g., for preconditions and postconditions of mutable member functions,
        for global variables, etc.). Ultimately, it is the responsibility of the
        users to program assertions that do <emphasis>not</emphasis> change program
        variables (the same limitation exists with the C-style <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase></computeroutput>
        mechanism).
      </para>
      <para>
        See <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link> for information on how to use this library to always
        enforce the constant-correctness constraint at compile-time (but these methods
        require a significant amount of boiler-plate code to be programmed manually
        so they are not recommended).
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.specification_and_implementation">
      <title><link linkend="boost_contract.contract_programming_overview.specification_and_implementation">Specification
      and Implementation</link></title>
      <para>
        Contracts are part of the program specification and not of its implementation.
        Therefore, contracts should ideally be programmed within C++ declarations,
        and not within definitions.
      </para>
      <para>
        In general, this library cannot satisfy this requirement but even when the
        contracts are programmed together with the body in the function definition,
        it is still very easy for users to identify and read just the contract portion
        of the function definition (because that must always appear at the very top
        of the function code). See <link linkend="boost_contract.advanced_topics.separate_body_implementation">Separate
        Body Implementation</link> for information on how to separate contract specification
        from body implementation at the cost of programming an extra function (for
        applications were this requirement is truly important).
      </para>
      <para>
        Furthermore, contracts are most useful when they assert conditions only using
        public members (in most cases, the need of using non-public members to check
        contracts indicates an error in the design of the class).
      </para>
      <para>
        For example, the caller of a public member function cannot in general make
        sure that the function preconditions are satisfied if the precondition assertions
        use private members that are not callable by the caller (therefore, a failure
        in the preconditions will not necessarily indicate a bug in the caller given
        that the caller was made unable to fully check the preconditions in the first
        place). However, given that C++ provides programmers ways around access level
        restrictions (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">friend</phrase></computeroutput>, function
        pointers, etc.), this library leaves it up to the programmers to make sure
        that only public members are used in contract assertions (<link linkend="N1962_anchor">[N1962]</link>
        follows the same approach not restricting contracts to only use public members,
        Eiffel instead generates a compiler error if precondition assertions use
        non-public members). <footnote id="boost_contract.contract_programming_overview.specification_and_implementation.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> In theory, if C++ <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#45">defect
          45</ulink> did not get fixed, this library could have been implemented
          in a way that generates a compile-time error when precondition assertions
          use non-public members (but still at the expense of programmers writing
          extra boiler-plate code).
        </para>
        </footnote>
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.on_contract_failure">
      <title><link linkend="boost_contract.contract_programming_overview.on_contract_failure">On
      Contract Failure</link></title>
      <para>
        If either preconditions, postconditions, or class invariants throw exceptions
        or their assertions are checked to be false at run-time then specific failure
        handler functions are automatically invoked by this library.
      </para>
      <para>
        By default, these failure handler functions print a text message to the standard
        error <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cerr</phrase></computeroutput> (with detailed information about the
        failure) and then terminate the program calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>.
        However, using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_precondition_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_postcondition_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_invariant_failure</computeroutput>,
        etc. programmers can define their own failure handler functions that can
        take any desired action (throw an exception, exit the program with an error
        code, etc., see <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link>). <footnote id="boost_contract.contract_programming_overview.on_contract_failure.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> This customizable failure handling
          mechanism is similar to the one used by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>
          and also proposed by <link linkend="N1962_anchor">[N1962]</link>.
        </para>
        </footnote>
      </para>
    </section>
    <section id="boost_contract.contract_programming_overview.features">
      <title><link linkend="boost_contract.contract_programming_overview.features">Features</link></title>
      <para>
        The Contract Programming features supported by this library are largely based
        on <link linkend="N1962_anchor">[N1962]</link> and on the Eiffel programming
        language. The following table compares this library features with the <link linkend="N1962_anchor">[N1962]</link> proposal for adding Contract Programming
        to the C++ standard, <footnote id="boost_contract.contract_programming_overview.features.f0">
        <para>
          The <link linkend="N1962_anchor">[N1962]</link> was unfortunately rejected
          because the standard committee did not considered important to add Contract
          Programming to the core language (but the <link linkend="N1962_anchor">[N1962]</link>
          proposal itself is sound). In any case, this library will allow C++ programmers
          to still use Contract Programming even if the standard committee never
          decides to add it as a language feature.
        </para>
        </footnote> the Eiffel programming language (see <link linkend="Meyer97_anchor">[Meyer97]</link>),
        and the D programming language (see <link linkend="Bright04_anchor">[Bright04]</link>).
      </para>
      <informaltable frame="all">
        <tgroup cols="5">
          <thead>
            <row>
              <entry>
                <para>
                  Feature
                </para>
              </entry>
              <entry>
                <para>
                  This Library
                </para>
              </entry>
              <entry>
                <para>
                  [N1962] Proposal (not part of C++)
                </para>
              </entry>
              <entry>
                <para>
                  ISE Eiffel 5.4
                </para>
              </entry>
              <entry>
                <para>
                  D
                </para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <emphasis>Keywords and specifiers</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Specifiers: <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">precondition</phrase></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">postcondition</phrase></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>.
                </para>
                <para>
                  (The last three specifiers appear in user code so their names can
                  be changed using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_INVARIANT">BOOST_CONTRACT_INVARIANT</link></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_STATIC_INVARIANT">BOOST_CONTRACT_STATIC_INVARIANT</link></computeroutput>,
                  and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPEDEF">BOOST_CONTRACT_BASE_TYPEDEF</link></computeroutput>
                  macros respectively to avoid name clashes in user code.)
                </para>
              </entry>
              <entry>
                <para>
                  Keywords: <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">precondition</phrase></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">postcondition</phrase></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">oldof</phrase></computeroutput>, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>.
                </para>
              </entry>
              <entry>
                <para>
                  Keywords: <literal moreinfo="none">require</literal>, <literal moreinfo="none">require else</literal>,
                  <literal moreinfo="none">ensure</literal>, <literal moreinfo="none">ensure then</literal>, <literal moreinfo="none">old</literal>,
                  <literal moreinfo="none">result</literal>, <literal moreinfo="none">do</literal>, and <literal moreinfo="none">invariant</literal>.
                </para>
              </entry>
              <entry>
                <para>
                  Keywords: <literal moreinfo="none">in</literal>, <literal moreinfo="none">out</literal>, <literal moreinfo="none">assert</literal>,
                  and <literal moreinfo="none">invariant</literal>.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>On contract failure</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Print an error to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cerr</phrase></computeroutput>
                  and call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput> (but can be customized
                  to throw exceptions, exit with an error code, etc.).
                </para>
              </entry>
              <entry>
                <para>
                  Call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput> (but can be customized
                  to throw exceptions, exit with an error code, etc.).
                </para>
              </entry>
              <entry>
                <para>
                  Throw exceptions.
                </para>
              </entry>
              <entry>
                <para>
                  Throw exceptions.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Result value in postconditions</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes, captured by or passed as a parameter to (for virtual functions)
                  the postcondition functor.
                </para>
              </entry>
              <entry>
                <para>
                  Yes, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>result-variable-name</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
                </para>
              </entry>
              <entry>
                <para>
                  Yes, <literal moreinfo="none">result</literal> keyword.
                </para>
              </entry>
              <entry>
                <para>
                  No.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Old values in postconditions</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
                  macro.
                </para>
              </entry>
              <entry>
                <para>
                  Yes, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">oldof</phrase></computeroutput> keyword.
                </para>
              </entry>
              <entry>
                <para>
                  Yes, <literal moreinfo="none">old</literal> keyword.
                </para>
              </entry>
              <entry>
                <para>
                  No.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Class invariants</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Checked at constructor exit, at destructor entry and throw, and
                  at public member function entry, exit, and throw. Same for volatile
                  class invariants. Static class invariants checked at entry and
                  exit of constructor, destructor, and any (also <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>)
                  public member function.
                </para>
              </entry>
              <entry>
                <para>
                  Checked at constructor exit, at destructor entry and throw, and
                  at public member function entry, exit, and throw. Volatile and
                  static class invariants not supported.
                </para>
              </entry>
              <entry>
                <para>
                  Checked at constructor exit, and around public member functions.
                  (Volatile and static class invariants do not apply to Eiffel.)
                </para>
              </entry>
              <entry>
                <para>
                  Checked at constructor exit, at destructor entry, and around public
                  member functions. Volatile and static class invariants not supported
                  (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput> was deprecated
                  all together in D).
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Subcontracting</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes, also support subcontracting for multiple inheritance (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>,
                  and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput>
                  are used when declaring base classes, overriding and virtual public
                  member functions respectively).
                </para>
              </entry>
              <entry>
                <para>
                  Yes, also support subcontracting for multiple inheritance. Only
                  base classes can specify preconditions. <footnote id="boost_contract.contract_programming_overview.features.f1">
                  <para>
                    <emphasis role="bold">Rationale:</emphasis> The authors of <link linkend="N1962_anchor">[N1962]</link> decided to forbid derived
                    classes from subcontracting preconditions because they found
                    such a feature rarely if ever used (see <ulink url="http://lists.boost.org/Archives/boost/2010/04/164862.php">Re:
                    [boost] [contract] diff n1962</ulink>). Still, it should be noted
                    that even in <link linkend="N1962_anchor">[N1962]</link> if a
                    derived class overrides two functions with preconditions coming
                    from two different base classes via multiple inheritance, the
                    overriding function contract will check preconditions from its
                    two base function in <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
                    (so even in <link linkend="N1962_anchor">[N1962]</link> preconditions
                    can indirectly be subcontracted by the derived class when multiple
                    inheritance is used). The authors of this library found that
                    confusing about <link linkend="N1962_anchor">[N1962]</link>.
                    Furthermore, subcontracting preconditions is soundly defined
                    by the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
                    principle</ulink> so this library allows to subcontract preconditions
                    as Eiffel does (users can alway avoid using such a feature if
                    they have no need for it). (This is essentially the only feature
                    on which this library deliberately differ from <link linkend="N1962_anchor">[N1962]</link>.)
                  </para>
                  </footnote>
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Contracts for pure virtual functions</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes (but they must be programmed in out-of-line functions as always
                  in C++ with pure virtual function definitions).
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
              <entry>
                <para>
                  Yes (contracts for abstract functions).
                </para>
              </entry>
              <entry>
                <para>
                  No (but planned).
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Arbitrary code in contracts</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes (but users are generally recommended to only program assertions
                  using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
                  and if-guard statements within contracts to avoid introducing bugs
                  and expensive code in contracts, and also to only use public functions
                  to program preconditions).
                </para>
              </entry>
              <entry>
                <para>
                  No, assertions only.
                </para>
              </entry>
              <entry>
                <para>
                  No, assertions only. In addition only public members can be used
                  in preconditions.
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Constant-correctness</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Enforced only for class invariants and old values (making also
                  preconditions and postconditions constant-correct is possible but
                  requires users to program a fare amount of boiler-plate code, see
                  <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
                  Lambda Functions</link>).
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
              <entry>
                <para>
                  No.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Function code ordering</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Preconditions, postconditions, body.
                </para>
              </entry>
              <entry>
                <para>
                  Preconditions, postconditions, body.
                </para>
              </entry>
              <entry>
                <para>
                  Preconditions, body, postconditions.
                </para>
              </entry>
              <entry>
                <para>
                  Preconditions, postconditions, body.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Disable assertion checking within assertions checking
                  (to avoid infinite recursion when checking contracts)</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes, but use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION">BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION</link></computeroutput>
                  to disable no assertion while checking preconditions. <footnote id="boost_contract.contract_programming_overview.features.f2">
                  <para>
                    <emphasis role="bold">Rationale:</emphasis> Theoretically, it
                    can be shown that an incorrect argument might be passed to the
                    function body when assertion checking is disabled while checking
                    preconditions (see <ulink url="http://lists.boost.org/Archives/boost/2010/04/164862.php">Re:
                    [boost] [contract] diff n1962</ulink>). Therefore, <link linkend="N1962_anchor">[N1962]</link>
                    does not disable any assertion while checking preconditions.
                    However, that makes it possible to have infinite recursion while
                    checking preconditions, plus Eiffel disables assertion checking
                    also while checking preconditions. Therefore, this library by
                    default disables assertion checking also while checking preconditions,
                    but it also provides the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION">BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION</link></computeroutput>
                    configuration macro so users can change this behaviour if needed.
                  </para>
                  </footnote> (In multi-threaded programs this introduces a global
                  lock, see also the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_DISABLE_THREADS">BOOST_CONTRACT_DISABLE_THREADS</link></computeroutput>
                  macro.)
                </para>
              </entry>
              <entry>
                <para>
                  Yes for class invariants and postconditions, but preconditions
                  disable no assertion.
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
              <entry>
                <para>
                  No.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Nested member function calls</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Disable nothing. <footnote id="boost_contract.contract_programming_overview.features.f3">
                  <para>
                    <emphasis role="bold">Rationale:</emphasis> Older versions of
                    this library defined a data member in the user class that was
                    automatically used to disable checking of class invariants within
                    nested member function calls (similarly to Eiffel). This feature
                    was also required by older revisions of <link linkend="N1962_anchor">[N1962]</link>
                    but it is no longer required by <link linkend="N1962_anchor">[N1962]</link>.
                    Furthermore, in multi-threaded programs this feature would introduce
                    a lock that synchronizes all member functions calls for a given
                    object. Therefore, this feature was removed in the current revision
                    of this library.
                  </para>
                  </footnote>
                </para>
              </entry>
              <entry>
                <para>
                  Disable nothing.
                </para>
              </entry>
              <entry>
                <para>
                  Disable all contract assertions.
                </para>
              </entry>
              <entry>
                <para>
                  Disable nothing.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>Disable contract checking</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  Yes, contract checking can be skipped at run-time by defining combinations
                  of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link></computeroutput>,
                  <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>,
                  and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>
                  macros. (Also removing contract code from compiled object code
                  is possible but requires users to program a fare amount of boiler-plate
                  code, see <link linkend="boost_contract.advanced_topics.disable_contract_checking">Disable
                  Contract Checking</link>.)
                </para>
              </entry>
              <entry>
                <para>
                  Yes (contract code also removed from compiled object code).
                </para>
              </entry>
              <entry>
                <para>
                  Yes, but only predefined combinations of preconditions, postconditions,
                  and class invariants can be disabled (contract code also removed
                  from compiled object code).
                </para>
              </entry>
              <entry>
                <para>
                  Yes.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The authors of this library also consulted the following references that
        implement Contract Programming for C++ (but usually for a somewhat limited
        subset of the features above) or for other languages (see <link linkend="boost_contract.bibliography">Bibliography</link>
        for a complete list of all the references consulted in the design and development
        of this library):
      </para>
      <informaltable frame="all">
        <tgroup cols="3">
          <thead>
            <row>
              <entry>
                <para>
                  Reference
                </para>
              </entry>
              <entry>
                <para>
                  Language
                </para>
              </entry>
              <entry>
                <para>
                  Notes
                </para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <link linkend="Bright04b_anchor">[Bright04b]</link>
                </para>
              </entry>
              <entry>
                <para>
                  C++
                </para>
              </entry>
              <entry>
                <para>
                  The Digital Mars C++ compiler extends C++ adding Contract Programming
                  language support (among many other features).
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="Lindrud04_anchor">[Lindrud04]</link>
                </para>
              </entry>
              <entry>
                <para>
                  C++
                </para>
              </entry>
              <entry>
                <para>
                  This supports class invariants and old values but it does not support
                  subcontracting (contracts are specified within definitions instead
                  of declarations and assertions are not constant-correct).
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="Tandin04_anchor">[Tandin04]</link>
                </para>
              </entry>
              <entry>
                <para>
                  C++
                </para>
              </entry>
              <entry>
                <para>
                  Interestingly, these contract macros automatically generate Doxygen
                  documentation <footnote id="boost_contract.contract_programming_overview.features.f4">
                  <para>
                    <emphasis role="bold">Rationale:</emphasis> Older versions of
                    this library used to automatically generate Doxygen documentation
                    from contract definition macros. This functionality was abandoned
                    for a number of reasons: this library no longer uses macros to
                    program contracts; even before that, this library macros became
                    too complex and the Doxygen preprocessor was no longer able to
                    expand them; the Doxygen documentation was just a repeat of the
                    contract code (so programmers could directly look at contracts
                    in the source code); Doxygen might not necessarily be the documentation
                    tool used by all C++ programmers.
                  </para>
                  </footnote> but old values, class invariants, and subcontracting
                  are not supported (plus contracts are specified within definitions
                  instead of declarations and assertions are not constant-correct).
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="Maley99_anchor">[Maley99]</link>
                </para>
              </entry>
              <entry>
                <para>
                  C++
                </para>
              </entry>
              <entry>
                <para>
                  This supports Contract Programming including subcontracting but
                  with limitations (e.g., programmers need to manually build an inheritance
                  tree using artificial template parameters), it does not use macros
                  but programmers are required to write by hand a significant amount
                  of boiler-plate code. (The authors have found this work very inspiring
                  when developing initial revisions of this library especially for
                  the attempt to support subcontracting.)
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="C2_anchor">[C2]</link>
                </para>
              </entry>
              <entry>
                <para>
                  C++
                </para>
              </entry>
              <entry>
                <para>
                  This uses an external preprocessing tool (the authors could no
                  longer find this project's code to evaluate it).
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="iContract_anchor">[iContract]</link>
                </para>
              </entry>
              <entry>
                <para>
                  Java
                </para>
              </entry>
              <entry>
                <para>
                  This uses an external preprocessing tool.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="Jcontract_anchor">[Jcontract]</link>
                </para>
              </entry>
              <entry>
                <para>
                  Java
                </para>
              </entry>
              <entry>
                <para>
                  This uses an external preprocessing tool.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="CodeContracts_anchor">[CodeContracts]</link>
                </para>
              </entry>
              <entry>
                <para>
                  .NET
                </para>
              </entry>
              <entry>
                <para>
                  Microsoft Contract Programming for .NET programming languages.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="SpecSharp_anchor">[SpecSharp]</link>
                </para>
              </entry>
              <entry>
                <para>
                  C#
                </para>
              </entry>
              <entry>
                <para>
                  This is a C# extension with Contract Programming language support.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="Chrome02_anchor">[Chrome02]</link>
                </para>
              </entry>
              <entry>
                <para>
                  Object Pascal
                </para>
              </entry>
              <entry>
                <para>
                  This is the .NET version of Object Pascal and it has language support
                  for Contract Programming.
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <link linkend="SPARKAda_anchor">[SPARKAda]</link>
                </para>
              </entry>
              <entry>
                <para>
                  Ada
                </para>
              </entry>
              <entry>
                <para>
                  This is an Ada-like programming language with support for Contract
                  Programming.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Typically, preprocessing tools external to the language work by transforming
        specially formatted code comments into contract code that is then checked
        at run-time. One of this library primary goals was to support Contract Programming
        entirely <emphasis>within C++</emphasis> and without using any tool external
        to the standard language itself.
      </para>
      <para>
        To the authors' knowledge, this the only library that fully supports all
        Contract Programming features for C++. <footnote id="boost_contract.contract_programming_overview.features.f5">
        <para>
          Generally speaking, implementing preconditions and postconditions in C++
          is not difficult (e.g., using some type of RAII object). Implementing postcondition
          old values is also not too difficult (usually requiring users to copy old
          values into local variables, but it is somewhat more difficult to ensure
          such copies are not performed when postconditions are disable). Most Contract
          Programming libraries for C++ stop here because implementing class invariants
          is already somewhat more involved even if still doable (especially without
          requiring users to manually invoke an extra function to check invariants).
          After that, implementing subcontracting requires a significant amount of
          complexity and it seems to not be properly supported by any library other
          than this one (especially including multiple inheritance, correctly copying
          postcondition old values across all overridden contracts deep in the inheritance
          tree, and correctly reporting the return value to the postconditions of
          the overridden virtual functions). This library supports all of these features
          instead.
        </para>
        </footnote>
      </para>
    </section>
  </section>
  <section id="boost_contract.tutorial">
    <title><link linkend="boost_contract.tutorial">Tutorial</link></title>
    <para>
      This section illustrates basic uses of this library.
    </para>
    <section id="boost_contract.tutorial.non_member_functions">
      <title><link linkend="boost_contract.tutorial.non_member_functions">Non-Member
      Functions</link></title>
      <para>
        Consider the following non-member function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">inc</phrase></computeroutput>
        which increments its argument <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">x</phrase></computeroutput>
        by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">1</phrase></computeroutput> and returns the value <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">x</phrase></computeroutput> had before the increment (this function
        is equivalent to the usual C++ operation <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">x</phrase><phrase role="special">++</phrase></computeroutput>). Let's write contracts for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">inc</phrase></computeroutput> using code comments (see also <ulink url="../../example/features/function_comments.cpp"><literal moreinfo="none">function_comments.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">int</phrase> <phrase role="identifier">inc</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
    <phrase role="comment">// Precondition:    x &lt; std::numeric_limits&lt;int&gt;::max()</phrase>
    <phrase role="comment">// Postcondition:   x == oldof(x) + 1</phrase>
    <phrase role="comment">//                  result == oldof(x)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">++;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        The precondition states that the argument to increment must be strictly smaller
        than the maximum allowable value of its type (to avoid overflow). The postconditions
        state that the argument was actually incremented by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">1</phrase></computeroutput>
        and that the function return value is equal to the argument before it was
        incremented.
      </para>
      <para>
        Now let's program this function and its contract using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        function from this library (see also <ulink url="../../example/features/function.cpp"><literal moreinfo="none">function.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">inc</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">numeric_limits</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">max</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_x</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_x</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">++;</phrase> <phrase role="comment">// Function body.</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        All necessary header files of this library are included by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase></computeroutput>.
        Alternatively, programmers can selectively include only the header files
        they actually need among <literal moreinfo="none">boost/contract/*.hpp</literal> (see <link linkend="boost_contract.getting_started">Getting Started</link>).
      </para>
      <para>
        It is possible to specify both preconditions and postconditions for non-member
        functions (see <link linkend="boost_contract.tutorial.preconditions">Preconditions</link>
        and <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        function returns an RAII object that must always be assigned to a local variable
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        otherwise the library will generate a run-time error (note that C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations cannot be used here and
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        type must be explicitly specified). <footnote id="boost_contract.tutorial.non_member_functions.f0">
        <para>
          The name of this local variable is arbitrary, but <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">c</phrase></computeroutput>
          is often used in this documentation.
        </para>
        </footnote> The function body is programmed right after the declaration of
        this RAII object.
      </para>
      <note>
        <para>
          In some cases, it might be necessary to program some code before the contract.
          For example for acquiring resources that will be used while checking the
          contract like old values, but also to lock mutexes (or other synchronization
          mechanisms) in multi-threaded programs (as usual with C++, in these cases
          it is generally preferred to use RAII objects to automatically control
          acquisition and release of the resources).
        </para>
      </note>
      <para>
        At construction, the RAII object returned by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        does the following:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check preconditions, by calling the nullary functor <literal moreinfo="none"><emphasis>f</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>f</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        At destruction instead:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            If the function body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check postconditions, by calling the nullary functor <literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        This ensures that non-member function contracts are correctly checked at
        run-time (see <link linkend="boost_contract.contract_programming_overview.function_calls">Function
        Calls</link>).
      </para>
      <note>
        <para>
          A non-member function can avoid calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
          for efficiency but only when it has no preconditions and no postconditions.
        </para>
      </note>
      <para>
        The same considerations also apply to private and protected member functions
        because their contracts are also programmed using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        like for non-member functions (see <link linkend="boost_contract.tutorial.private_and_protected_functions">Private
        and Protected Functions</link>).
      </para>
    </section>
    <section id="boost_contract.tutorial.preconditions">
      <title><link linkend="boost_contract.tutorial.preconditions">Preconditions</link></title>
      <para>
        When preconditions are specified, they are programmed using a functor that
        can be called with no parameter <literal moreinfo="none"><emphasis>f</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> and it is passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>f</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>. Contracts that do not have preconditions
        simply do not call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput>. When both preconditions and postconditions
        are specified, preconditions must appear before postconditions (see <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>).
      </para>
      <para>
        C++11 lambda functions are very convenient to program preconditions, but
        any other nullary functor can be used (see also <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). <footnote id="boost_contract.tutorial.preconditions.f0">
        <para>
          Lambda functions with no parameters can be programmed in C++11 as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[...]</phrase> <phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="special">...</phrase> <phrase role="special">}</phrase></computeroutput>
          but also equivalently as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[...]</phrase> <phrase role="special">{</phrase> <phrase role="special">...</phrase> <phrase role="special">}</phrase></computeroutput>.
          This second from is often used in this documentation omitting the empty
          parameter list <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> for brevity.
        </para>
        </footnote> For example, for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (but same for all other contracts):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>  <phrase role="comment">// Same for all other contracts.</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>                                 <phrase role="comment">// Capture by reference or value...</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(...);</phrase>                     <phrase role="comment">// ...but should not modify captures.</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">})</phrase>
    <phrase role="special">...</phrase>
<phrase role="special">;</phrase>
</programlisting>
      <para>
        The precondition functor should capture all the variables that it needs to
        assert the preconditions. These variables can be captured by value when the
        overhead of copying such variables is acceptable (but in this documentation
        preconditions often capture these variables by reference to avoid such overhead).
        In any case, precondition assertions should not modify the value of the captured
        variables, even when those are captured by reference (see <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
      </para>
      <para>
        Any code can be programmed for the precondition functor, but it is recommended
        to keep this code simple using mainly assertions and if-statements (to avoid
        programming complex preconditions that might be buggy and slow to execute
        at run-time). It is also recommended to use the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro to program precondition assertions because it enables this library
        to print very informative error messages when the asserted conditions are
        evaluated to be false at run-time (this is not a variadic macro, see also
        <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No Macros</link>):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><emphasis>boolean-condition</emphasis><phrase role="special">)</phrase>
<phrase role="comment">// Or, if condition has commas `,` not already within parenthesis `(...)`.</phrase>
<phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">((</phrase><emphasis>boolean-condition</emphasis><phrase role="special">))</phrase>
</programlisting>
      <para>
        This library will automatically call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::precondition_failure</computeroutput>
        if any of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro conditions are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput> and
        also if calling the functor specified via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        throws an exception (by default, this terminates the program calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>,
        but see <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link> to throw exceptions, exit the program with an error code,
        etc.).
      </para>
      <note>
        <para>
          Contracts are most useful when their assertions only use public members
          that are accessible to the caller so the caller can properly check and
          use the contract. In particular, preconditions of a public member function
          or constructor that use non-public members are essentially incorrect because
          they cannot be fully checked by the caller (in fact, Eiffel generates a
          compile-time error in this case).
        </para>
        <para>
          This library leaves it up to the programmers to only use public members
          when programming contracts and especially when programming preconditions
          (see also <link linkend="boost_contract.contract_programming_overview.specification_and_implementation">Specification
          and Implementation</link>).
        </para>
      </note>
    </section>
    <section id="boost_contract.tutorial.postconditions">
      <title><link linkend="boost_contract.tutorial.postconditions">Postconditions</link></title>
      <para>
        When postconditions are specified, they are programmed using a functor that
        can be called with no parameter <literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> and it is passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>. Contracts that do not have postconditions
        simply do not call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>. When both preconditions and postconditions
        are specified, postconditions must appear after preconditions (see <link linkend="boost_contract.tutorial.preconditions">Preconditions</link>).
      </para>
      <para>
        C++11 lambda functions are very convenient to program postconditions, but
        any other nullary functor can be used (see also <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). For example, for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (but same for all other contracts):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>  <phrase role="comment">// Same for all other contracts.</phrase>
    <phrase role="special">...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>                                <phrase role="comment">// Capture by reference...</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(...);</phrase>                     <phrase role="comment">// ...but should not modify captures.</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">})</phrase>
<phrase role="special">;</phrase>
</programlisting>
      <para>
        The postcondition functor should capture all variables that it needs to assert
        the postconditions. In general, these variables should be captured by reference
        and not by value (because postconditions need to access the value that these
        variables will have at function exit, and not the value these variables had
        when the postcondition functor was first constructed). Postconditions can
        also capture return and old values (see <link linkend="boost_contract.tutorial.return_value">Return
        Value</link> and <link linkend="boost_contract.tutorial.old_values">Old Values</link>).
        In any case, postcondition assertions should not modify the value of the
        captured variables (see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
      </para>
      <para>
        Any code can be programmed for the postcondition functor, but it is recommended
        to keep this code simple using mainly assertions and if-statements (to avoid
        programming complex postconditions that might be buggy and slow to execute
        at run-time). It is also recommended to use the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro to program postcondition assertions because it enables this library
        to print very informative error messages when the asserted conditions are
        evaluated to be false at run-time (this is not a variadic macro, but see
        also <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
        Macros</link>):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><emphasis>boolean-condition</emphasis><phrase role="special">)</phrase>
<phrase role="comment">// Or, if condition has commas `,` not already within parenthesis `(...)`.</phrase>
<phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">((</phrase><emphasis>boolean-condition</emphasis><phrase role="special">))</phrase>
</programlisting>
      <para>
        This library will automatically call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::postcondition_failure</computeroutput>
        if any of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro conditions are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput> and
        also if calling the functor specified via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        throws an exception (by default, this terminates the program calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>,
        but see <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link> to throw exceptions, exit the program with an error code,
        etc.).
      </para>
      <para>
        For non-void public functions, the functor passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        is not a nullary functor. Instead, it is a unary functor taking a variable
        holding the return value as its one parameter (see also <link linkend="boost_contract.tutorial.public_functions">Public
        Functions</link>).
      </para>
    </section>
    <section id="boost_contract.tutorial.return_value">
      <title><link linkend="boost_contract.tutorial.return_value">Return Value</link></title>
      <para>
        In non-void functions, postconditions can access the function return value
        to program assertions. In this case, programmers are responsible to declare
        a local variable before the contract and to assign it to the return value
        at function exit (when the function does not throw an exception). <footnote id="boost_contract.tutorial.return_value.f0">
        <para>
          The name of the local variable that holds the return value is arbitrary,
          but <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput> is often used
          in this documentation.
        </para>
        </footnote> For example, for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (but same for all other contracts):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><emphasis>return-type</emphasis> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>                                     <phrase role="comment">// Must be assigned to return value.</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>  <phrase role="comment">// Same for all other contracts.</phrase>
    <phrase role="special">...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>                                <phrase role="comment">// Also capture `result` reference...</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">...);</phrase>              <phrase role="comment">// ...but should not modify captures.</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">})</phrase>
<phrase role="special">;</phrase>
</programlisting>
      <para>
        At any point where the enclosing function returns, programmers are responsible
        to assign the result variable to the expression being returned. This can
        be easily done by making sure that <emphasis>all</emphasis> <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">return</phrase></computeroutput> statements in the function are of the
        form:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <emphasis>expression</emphasis><phrase role="special">;</phrase>                             <phrase role="comment">// Assign `result` at each return.</phrase>
</programlisting>
      <para>
        The functor used to program postconditions should capture the result variable
        by reference and not by value (because postconditions must access the value
        the result variable will have at function exit, and not the value the result
        variable had when the postcondition functor was first constructed). The return
        value should never be used in preconditions (because the return value is
        not yet evaluated and set when preconditions are checked). In any case, programmers
        should not modify the result variable in the contract assertions (see also
        <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
      </para>
      <para>
        It is also possible to declared the result variables using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput> when the function return type
        does not have a default constructor, or if the default constructor is too
        expensive or undesirable to execute (see <link linkend="boost_contract.advanced_topics.optional_return_value">Optional
        Return Value</link>).
      </para>
      <para>
        Non-void virtual and overriding public member functions must always declare
        and use a result variable even when postconditions do not directly use the
        function return value (so to properly support subcontracting, see <link linkend="boost_contract.tutorial.virtual_public_functions">Virtual
        Public Functions</link> and __Overriding_Public_Functions__).
      </para>
    </section>
    <section id="boost_contract.tutorial.old_values">
      <title><link linkend="boost_contract.tutorial.old_values">Old Values</link></title>
      <para>
        When old values are used in postconditions, programmes are responsible to
        declare local variables before the contract and to assign them to related
        old value expressions using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        macro. <footnote id="boost_contract.tutorial.old_values.f0">
        <para>
          The name of the local variable that holds an old value is arbitrary, but
          <literal moreinfo="none">old_<emphasis>name</emphasis></literal> is often used in this
          documentation.
        </para>
        </footnote> For example, for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (but same for all other contracts):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><emphasis>type</emphasis><phrase role="special">&gt;</phrase> <phrase role="identifier">old_</phrase><emphasis>name</emphasis> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><emphasis>expression</emphasis><phrase role="special">);</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>  <phrase role="comment">// Same for all other contracts.</phrase>
    <phrase role="special">...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>                                <phrase role="comment">// Capture by reference...</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_</phrase><emphasis>name</emphasis> <phrase role="special">...);</phrase>           <phrase role="comment">// ...but should not modify captures.</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">})</phrase>
<phrase role="special">;</phrase>
</programlisting>
      <para>
        Old values are handled by this library using the smart pointer class template
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
        (so programmers do not directly manage the allocation and deallocation of
        the pointed memory). The pointed old value is automatically qualified as
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> (so old values cannot
        be mistakenly changed by the contract assertions, see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
        This library ensures that old value pointers are always not null by the time
        postconditions are checked (so programmers can safely dereference these pointers
        in postcondition assertions using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">operator</phrase><phrase role="special">*</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase></computeroutput> without having to check if old value
        pointers are not null first).
      </para>
      <para>
        Old values should never be used in preconditions (because old values are
        the same as the original values when preconditions are checked). This library
        does not even guarantee that old value pointers are not null when precondition
        functors are called (for example, when postcondition contract checking is
        disabled using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>,
        when checking an overridden virtual public function contract via subcontracting,
        etc.). Finally, see <link linkend="boost_contract.advanced_topics.old_values_at_body">Old
        Values at Body</link> for delaying the assignment of old values until after
        preconditions (and possibly class invariants) are checked (this allows to
        program old value expressions under the simplifying assumption that precondition
        and class invariant assertions are satisfied already).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        macro is actually a variadic macro and it takes an extra parameter when used
        in virtual or overriding public functions (see <link linkend="boost_contract.tutorial.virtual_public_functions">Virtual
        Public Functions</link> and __Overriding_Public_Functions__). C++11 auto
        declarations can be used with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        for brevity <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase> </computeroutput><literal moreinfo="none">old_<emphasis>name</emphasis>
        = BOOST_CONTRACT_OLDOF(<emphasis>expression</emphasis>)</literal>. See <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No Macros</link>
        to program old values without using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        (e.g., on compilers that do not support variadic macros).
      </para>
      <para>
        This library ensures that old values are copied only once and that they are
        never copied when postcondition contract checking is disabled using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>.
      </para>
    </section>
    <section id="boost_contract.tutorial.class_invariants">
      <title><link linkend="boost_contract.tutorial.class_invariants">Class Invariants</link></title>
      <para>
        When class invariants are specified, they are programmed in a public <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> member function named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput> taking no argument and returning
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">void</phrase></computeroutput>. Classes that do not have
        invariants, simply do not declare the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        member function. <footnote id="boost_contract.tutorial.class_invariants.f0">
        <para>
          This library uses template meta-programming (SFINAE-based introspection
          techniques) to check invariants only for classes that declare a member
          function named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>.
        </para>
        </footnote> For example:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">a</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>                                 <phrase role="comment">// Must be public.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>            <phrase role="comment">// Must be const.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(...);</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">...</phrase>
<phrase role="special">};</phrase>
</programlisting>
      <para>
        This member function must be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
        because contracts should not modify the object state (see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
        This library will generate a compile-time error if the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
        qualifier is missing (unless the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_PERMISSIVE">BOOST_CONTRACT_PERMISSIVE</link></computeroutput>
        macro is defined).
      </para>
      <para>
        Any code can be programmed in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        function, but it is recommended to keep this code simple using mainly assertions
        and if-statements (to avoid programming complex invariants that might be
        buggy and slow to execute at run-time). It is also recommended to use the
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro to program class invariant assertions because it enables this library
        to print very informative error messages when the asserted conditions are
        evaluated to be false at run-time (this is not a variadic macro, but see
        also <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
        Macros</link>):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><emphasis>boolean-condition</emphasis><phrase role="special">)</phrase>
<phrase role="comment">// Or, if condition has commas `,` not already within parenthesis `(...)`.</phrase>
<phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">((</phrase><emphasis>boolean-condition</emphasis><phrase role="special">))</phrase>
</programlisting>
      <para>
        This library will automatically call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::entry_invariant_failure</computeroutput>
        or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::exit_invariant_failure</computeroutput>
        if any of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro conditions are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput> and
        also if the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput> function
        throws an exception (by default, this terminates the program calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>,
        but see <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link> to throw exceptions, exit the program with an error code,
        etc.).
      </para>
      <para>
        See __Access__ to avoid making the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        member function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>. <footnote id="boost_contract.tutorial.class_invariants.f1">
        <para>
          In this documentation the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
          member function is often declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>
          for simplicity. However, in most production code it might not be acceptable
          to augment the public members of a class adding <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.access">boost::contract::access</link></computeroutput>
          can be used to avoid that as explained in __Access__.
        </para>
        </footnote> See the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_INVARIANT">BOOST_CONTRACT_INVARIANT</link></computeroutput>
        macro to use a name different from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        (e.g., because <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        clashes with other names in user-defined classes).
      </para>
      <note>
        <para>
          No contracts are checked (not event class invariants) when a data member
          is accessed directly (this is different from Eiffel where even accessing
          public data members checks class invariants). Therefore, it might be best
          for both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase></computeroutput>es and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">struct</phrase></computeroutput>s that have invariants to have no
          mutable public data members and to access data members publicly only via
          appropriate public member functions that can check the class invariants.
        </para>
      </note>
      <bridgehead renderas="sect4" id="boost_contract.tutorial.class_invariants.h0">
        <phrase id="boost_contract.tutorial.class_invariants.static_class_invariants"/><link linkend="boost_contract.tutorial.class_invariants.static_class_invariants">Static
        Class Invariants</link>
      </bridgehead>
      <para>
        When static class invariants are specified, they are programmed in a public
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput> member functions named
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput> taking no
        argument and returning <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">void</phrase></computeroutput>.
        Classes that do not have static class invariants, simply do not declare a
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput> member function.
        <footnote id="boost_contract.tutorial.class_invariants.f2">
        <para>
          This library uses template meta-programming (SFINAE-based introspection
          techniques) to check static invariants only for classes that declare a
          member function named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>.
        </para>
        </footnote> For example:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">a</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>                                 <phrase role="comment">// Must be public.</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>    <phrase role="comment">// Must be static.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(...);</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">...</phrase>
<phrase role="special">};</phrase>
</programlisting>
      <para>
        This member function must be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
        so it correctly cannot access the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>.
        This library will generate a compile-time error if the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
        classifier is missing (unless the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_PERMISSIVE">BOOST_CONTRACT_PERMISSIVE</link></computeroutput>
        macro is defined).
      </para>
      <para>
        Any code can be programmed in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
        function, but it is recommended to keep this code simple using mainly assertions
        and if-statements (to avoid programming complex static invariants that might
        be buggy and slow to execute at run-time). It is also recommended to use
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro to program the assertions because it enables this library to print
        very informative error messages when the asserted conditions are evaluated
        to be false at run-time (this is not a variadic macro, but see also <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No Macros</link>):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><emphasis>boolean-condition</emphasis><phrase role="special">)</phrase>
<phrase role="comment">// Or, if condition has commas `,` not already within parenthesis `(...)`.</phrase>
<phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">((</phrase><emphasis>boolean-condition</emphasis><phrase role="special">))</phrase>
</programlisting>
      <para>
        This library will automatically call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::entry_invariant_failure</computeroutput>
        or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::exit_invariant_failure</computeroutput>
        if any of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro conditions are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput> and
        also if the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
        function throws an exception (by default, this terminates the program calling
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>, but see <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link> to throw exceptions, exit the program with an error code,
        etc.).
      </para>
      <para>
        See __Access__ to avoid making <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
        member function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>. <footnote id="boost_contract.tutorial.class_invariants.f3">
        <para>
          In this documentation the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
          member function is often declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>
          for simplicity. However, in most production code it might not be acceptable
          to augment the public members of a class adding <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.access">boost::contract::access</link></computeroutput>
          can be used to avoid that as explained in __Access__.
        </para>
        </footnote> Set the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_STATIC_INVARIANT">BOOST_CONTRACT_STATIC_INVARIANT</link></computeroutput>
        macro to use a name different from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
        (e.g., because <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>
        clashes with other names in the user-defined class). <footnote id="boost_contract.tutorial.class_invariants.f4">
        <para>
          <emphasis role="bold">Rationale:</emphasis> In C++, it is not possible
          to overload a member function based on the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
          classifier. Therefore, different function names have to be used for member
          functions checking static and non-static class invariants, namely <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput>.
        </para>
        </footnote>
      </para>
      <para>
        See __Volatile_Public_Functions__ for programming volatile class invariants.
      </para>
    </section>
    <section id="boost_contract.tutorial.constructors">
      <title><link linkend="boost_contract.tutorial.constructors">Constructors</link></title>
      <para>
        Contracts for constructors are programmed using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
        function and the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        base class. For example (see also <ulink url="../../example/features/public.cpp"><literal moreinfo="none">public.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">unique_identifiers</phrase>
    <phrase role="special">:</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unique_identifiers</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">unique_identifiers</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">to</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unique_identifiers</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">from</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">to</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">to</phrase> <phrase role="special">-</phrase> <phrase role="identifier">from</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="comment">// Constructor body.</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">id</phrase> <phrase role="special">=</phrase> <phrase role="identifier">from</phrase><phrase role="special">;</phrase> <phrase role="identifier">id</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">to</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        It is not possible to specify preconditions using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        for constructors (the library will generate a compile-time error if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput> is used on the object returned by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>).
        Constructor preconditions are specified using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract:constructor_precondition</computeroutput>
        base class instead (see also <link linkend="boost_contract.tutorial.preconditions">Preconditions</link>).
        Programmes should not access the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
        from constructor preconditions (because the object does not exists yet before
        the constructor body is executed, see also <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). Constructors without preconditions simply do not
        explicitly initialize the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        base (because <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        default constructor checks no contract). When <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        is used: <footnote id="boost_contract.tutorial.constructors.f0">
        <para>
          There is a MSVC bug that was fixed in MSVC 2013 for which lambdas cannot
          be used in constructor member initialization lists for templates. On MSVC
          compilers with that bug, an external (static member) function can be used
          (together with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">bind</phrase></computeroutput> and
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">cref</phrase></computeroutput> as needed) to program
          constructor preconditions instead of using lambdas.
        </para>
        </footnote>
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            It should be specified as the <emphasis>first</emphasis> class in the
            inheritance list (so constructor preconditions are checked before initializing
            any other base or member).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Its inheritance level should always be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">private</phrase></computeroutput>
            (so this extra base class does not alter the public inheritance tree
            of the derived class).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            It takes the derived class as template parameter (the Curiously Recursive
            Template Pattern (CRTP) is used here to avoid ambiguity errors with multiple
            inheritance). <footnote id="boost_contract.tutorial.constructors.f1">
            <para>
              <emphasis role="bold">Rationale:</emphasis> The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
              takes the derived class as its template parameter so the instantiated
              template type is unique for each derived class always avoiding base
              class ambiguities even in case of multiple inheritance. Virtual inheritance
              cannot be used resolve such ambiguities because virtual bases are initialized
              only once by the out-most derived class, and that would not allow to
              properly check preconditions of all base classes.
            </para>
            </footnote>
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        It is possible to specify postconditions for constructors (see also <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>).
        Programmers should not access the old value of the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
        in constructor postconditions (because the object did not exist yet before
        the constructor body was executed, see also <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
        function takes <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput> as a parameter
        because constructors check class invariants (see also <link linkend="boost_contract.tutorial.class_invariants">Class
        Invariants</link>).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
        function returns an RAII object that must always be assigned to a local variable
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        otherwise this library will generate a run-time error (note that C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations cannot be used here and
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        type must be explicitly specified). The constructor body is programmed right
        after the declaration of this RAII object. At construction, this RAII object
        does the following:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants, by calling <emphasis><literal moreinfo="none">typeof</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> (but not non-static class invariants
            because the object does not exists yet).
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        At destruction instead:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants, by calling <emphasis><literal moreinfo="none">typeof</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput>.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the constructor body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check non-static class invariants, by calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput>.
                </simpara>
              </listitem>
              <listitem>
                <simpara>
                  Check postconditions, by calling the nullary functor <emphasis><literal moreinfo="none">g</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><emphasis><literal moreinfo="none">g</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        This together with C++ object construction mechanism of base classes and
        the use of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        ensures that the constructor contracts are correctly checked at run-time
        (see also <link linkend="boost_contract.contract_programming_overview.constructor_calls">Constructor
        Calls</link>).
      </para>
      <note>
        <para>
          A constructor can avoid calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
          for efficiency but only when it has no postconditions and its class has
          no invariants. (Even if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::constuctor</computeroutput>
          is not used by a derived class, contracts of base classes will still be
          correctly checked by C++ object construction mechanism.)
        </para>
        <para>
          The default constructor and copy constructor automatically generated by
          C++ will not check contracts. Therefore, unless these constructors are
          not public or they have no preconditions, no postconditions, and the class
          has no invariants, programmers should manually define them using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>.
          (Same for all other automatically generated operations.)
        </para>
      </note>
      <para>
        Private and protected constructors can omit <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
        because they are not part of the public interface of the class so they are
        not required to check class invariants (see also <link linkend="boost_contract.contract_programming_overview.constructor_calls">Constructor
        Calls</link>). They could still use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        to check preconditions before member initializations, and use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (but not <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>)
        to only check postconditions without checking class invariants (see also
        <link linkend="boost_contract.tutorial.private_and_protected_functions">Private
        and Protected Functions</link>).
      </para>
    </section>
    <section id="boost_contract.tutorial.destructors">
      <title><link linkend="boost_contract.tutorial.destructors">Destructors</link></title>
      <para>
        Contracts for destructors are programmed using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>
        function. For example (see also <ulink url="../../example/features/public.cpp"><literal moreinfo="none">public.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">unique_identifiers</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="comment">// Following contract checks invariants.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>

    <phrase role="comment">// Destructor body here... (do nothing in this example).</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        It is not possible to specify preconditions for destructors (the library
        will generate a compile-time error if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        is used here because destructors can be called at any time after construction
        so they have no precondition). It is possible to specify postconditions for
        destructors (see also <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>
        for more information and see __Static_Public_Functions__ for an example).
        Programmers should not access the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
        in destructor postconditions (because the object no longer exists after the
        destructor body has been executed, see also <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>
        function takes <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput> as a parameter
        because destructors check class invariants (see also <link linkend="boost_contract.tutorial.class_invariants">Class
        Invariants</link>).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>
        function returns an RAII object that must always be assigned to a local variable
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        otherwise this library will generate a run-time error (note that C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations cannot be used here and
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        type must be explicitly specified). The destructor body is programmed right
        after the declaration of this RAII object. At construction, this RAII object
        does the following:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static and non-static class invariants, by calling <emphasis><literal moreinfo="none">typeof</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput>.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        At destruction instead:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants, by calling <emphasis><literal moreinfo="none">typeof</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput>.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the destructor body threw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check non-static class invariants, by calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput> (because the object was not successfully
                  destructed).
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Else:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check postconditions, by calling the nullay functor <emphasis><literal moreinfo="none">g</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><emphasis><literal moreinfo="none">g</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        This together with C++ object destruction mechanism of base classes ensures
        that destructor contracts are correctly checked at run-time (see also <link linkend="boost_contract.contract_programming_overview.destructor_calls">Destructor
        Calls</link>).
      </para>
      <note>
        <para>
          A destructor can avoid calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>
          for efficiency but only when it has no postconditions and its class has
          no invariants. (Even if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>
          is not used by a derived class, contracts of base classes will still be
          correctly checked by C++ object destruction mechanism.)
        </para>
        <para>
          The default destructor automatically generated by C++ will not check contracts.
          Therefore, unless the destructor is not public or it has no postconditions
          and the class has no invariants, programmers should manually define it
          using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>.
          (Same for all other automatically generated operations.)
        </para>
      </note>
      <para>
        Private and protected destructors can omit <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>
        because they are not part of the public interface of the class so they are
        not required to check class invariants (see also <link linkend="boost_contract.contract_programming_overview.destructor_calls">Destructor
        Calls</link>). They could use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (but not <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>)
        to only check postconditions without checking class invariants (see also
        <link linkend="boost_contract.tutorial.private_and_protected_functions">Private
        and Protected Functions</link>).
      </para>
    </section>
    <section id="boost_contract.tutorial.public_functions">
      <title><link linkend="boost_contract.tutorial.public_functions">Public Functions</link></title>
      <para>
        Contracts for public member functions are programmed using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function.
      </para>
      <para>
        Let's consider public member functions that are not static, not virtual,
        and do not override any function from base classes. For example, the following
        such a function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">find</phrase></computeroutput> is declared
        as a member of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">unique_identifiers</phrase></computeroutput>
        class (see also <ulink url="../../example/features/public.cpp"><literal moreinfo="none">public.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">bool</phrase> <phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">result</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="comment">// Function body.</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase>
            <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        It is possible to specify both preconditions and postconditions for public
        member functions (see also <link linkend="boost_contract.tutorial.preconditions">Preconditions</link>
        and <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>).
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function takes <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput> as a parameter
        because public member functions check class invariants (see also <link linkend="boost_contract.tutorial.class_invariants">Class
        Invariants</link>).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function returns an RAII object that must always be assigned to a local variable
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        otherwise this library will generate a run-time error (note that C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations cannot be used here and
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        type must be explicitly specified). The public member function body is programmed
        right after the declaration of this RAII object. At construction, this RAII
        object does the following:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static and non-static class invariants, by calling <emphasis><literal moreinfo="none">typeof</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput>.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check preconditions, by calling the nullary functor <emphasis><literal moreinfo="none">f</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase></computeroutput><emphasis><literal moreinfo="none">f</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        At destruction instead:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static and non-static class invariants, by calling <emphasis><literal moreinfo="none">typeof</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput>
            (even if the function body threw an exception).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the function body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check postconditions, by calling the functor <literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><emphasis><literal moreinfo="none">g</literal></emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> (or <literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase></computeroutput><emphasis>result</emphasis><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> for non-void public functions).
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        This ensures that public member function contracts are correctly checked
        at run-time (see also <link linkend="boost_contract.contract_programming_overview.public_function_calls">Public
        Function Calls</link>).
      </para>
      <note>
        <para>
          A public member function can avoid calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          for efficiency but only when it has no preconditions and no postconditions,
          it is not virtual, it does not override any virtual function, and its class
          has no invariant.
        </para>
        <para>
          The default copy assignment operator automatically generated by C++ will
          not check contracts. Therefore, unless this operator is not public or it
          has no preconditions, no postconditions, and the class has no invariants,
          programmers should manually define it using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>.
          (Same for all other automatically generated operations.)
        </para>
      </note>
    </section>
    <section id="boost_contract.tutorial.virtual_public_functions">
      <title><link linkend="boost_contract.tutorial.virtual_public_functions">Virtual
      Public Functions</link></title>
      <para>
        Let's consider public member functions that are virtual but that still do
        not override any function from base classes. For example, the following such
        a function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput> is declared
        as a member of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">unique_identifiers</phrase></computeroutput>
        class (see also <ulink url="../../example/features/public.cpp"><literal moreinfo="none">public.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">// Specified identifier must not already be in container.</phrase>
<phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">id</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_find</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase> <phrase role="comment">// Pass `v`.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase> <phrase role="comment">// Pass `v`.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase> <phrase role="comment">// Pass `v` and `result`.</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(!*</phrase><phrase role="identifier">old_find</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">}</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">id</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="comment">// Function body.</phrase>
    <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">id</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        Public virtual functions must declare an extra trailing parameter of type
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">*</phrase></computeroutput> with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">0</phrase></computeroutput>
        default value (i.e., <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">nullptr</phrase></computeroutput>).
        <footnote id="boost_contract.tutorial.virtual_public_functions.f0">
        <para>
          The name of this extra parameter is arbitrary, but <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput>
          is often used in this documentation.
        </para>
        </footnote> This extra parameter is the last parameter and it has a default
        argument so it does not really alter the calling interface of the virtual
        function. Callers will rarely have to explicitly deal with this extra parameter
        (a part from when manipulating the virtual function type directly as a function
        pointer, for function pointer type-casts, etc.). Programmers must pass the
        extra virtual parameter as the very first argument to all <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        calls in the virtual function. <footnote id="boost_contract.tutorial.virtual_public_functions.f1">
        <para>
          <emphasis role="bold">Rationale:</emphasis> The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">*</phrase></computeroutput> optional parameter is used by this library
          to determine that a function is virtual (in C++ it is not possible to introspect
          if a function has been declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">virtual</phrase></computeroutput>).
          Furthermore, this parameter is internally used by this library to pass
          result and old values that are evaluated by the overriding function to
          overridden virtual functions, and also to check preconditions and postconditions
          of overridden virtual functions when subcontracting (but without executing
          overridden function bodies).
        </para>
        </footnote>
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function takes <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput> as a parameter
        because public virtual functions check class invariants (see also <link linkend="boost_contract.tutorial.class_invariants">Class
        Invariants</link>). As shown in the example above, when the public virtual
        function has a non-void return type programmers must pass a reference to
        the function return value as the second argument to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>.
        In this case the functor specified to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        takes a single parameter for the return value (possibly as a constant reference
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>
        to avoid extra copies of the return value). <footnote id="boost_contract.tutorial.virtual_public_functions.f2">
        <para>
          <emphasis role="bold">Rationale:</emphasis> The functor passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput> takes the extra return value parameter
          because that is used by this library to pass the return value evaluated
          by the overriding function to all its overridden virtual functions when
          subcontracting.
        </para>
        </footnote>
      </para>
      <important>
        <para>
          It is the responsibility of the programmers to pass the extra parameter
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput> to all <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          calls within public virtual functions, and also to pass the return value
          reference after <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput> to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          for non-void public virtual functions. This library cannot automatically
          generate compile-time errors if programmers fail to do so (but in general
          contract checking will not correctly work at run-time). <footnote id="boost_contract.tutorial.virtual_public_functions.f3">
          <para>
            <emphasis role="bold">Rationale:</emphasis> This library does not require
            the function type when using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
            for non-overriding virtual functions. Therefore, this library does not
            know if the enclosing function has a non-void return type so it cannot
            check if the return value reference is passed as required for non-overriding
            virtual functions. Instead this library requires the function type for
            overriding virtual functions thus it gives a compile-time error if the
            return value reference is missing in those cases.
          </para>
          </footnote>
        </para>
        <para>
          <emphasis>Remember: always pass "v" as the first argument to
          old-of macros, the contract, etc. for public virtual functions; always
          pass the result variable after "<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput>"
          to the contract for non-void virtual functions.</emphasis>
        </para>
      </important>
      <para>
        For the rest, the same considerations made in <link linkend="boost_contract.tutorial.public_functions">Public
        Functions</link> apply.
      </para>
    </section>
    <section id="boost_contract.tutorial.public_function_overrides__subcontracting_">
      <title><link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
      Function Overrides (Subcontracting)</link></title>
      <para>
        Let's consider public member functions (virtual or not) that override public
        virtual functions from one or more public base classes. For example, the
        following such a function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput>
        is declared as a member of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">identifiers</phrase></computeroutput>
        derived class and it overrides <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">push_back</phrase></computeroutput>
        from the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">unique_identifiers</phrase></computeroutput>
        base class (see also <ulink url="../../example/features/public.cpp"><literal moreinfo="none">public.cpp</literal></ulink>):
        <footnote id="boost_contract.tutorial.public_function_overrides__subcontracting_.f0">
        <para>
          In this document, overriding functions are often marked with the comment
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">/* override */</phrase></computeroutput>. On compilers
          that support C++11 virtual specifiers, the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override</phrase></computeroutput>
          identifier can be used instead (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override</phrase></computeroutput>
          is not used in the documentation only because virtual specifiers are not
          widely supported yet, even by compilers that support C++11 lambda functions,
          etc.).
        </para>
        </footnote>
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">identifiers</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">unique_identifiers</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// Bases typedef.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check in AND with bases.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Do nothing if specified identifier already in container.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">id</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_find</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_push_back</phrase> <phrase role="comment">// Pass override plus below function pointer...</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">identifiers</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="comment">// ...and arguments.</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check in OR with bases.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check in AND with bases.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_find</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="comment">// Function body.</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">))</phrase> <phrase role="identifier">unique_identifiers</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">);</phrase> <phrase role="comment">// Else, do nothing.</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">id</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">push_back</phrase><phrase role="special">);</phrase> <phrase role="comment">// Define `override_push_back`.</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The extra <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">typedef</phrase></computeroutput> that uses
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
        macro is required by this library for derived classes and it is internally
        used detect base classes for subcontracting (see <link linkend="boost_contract.tutorial.base_classes__subcontracting_">Base
        Classes</link>).
      </para>
      <para>
        When called from overriding public functions, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        takes an explicit template argument <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override_</phrase></computeroutput><literal moreinfo="none"><emphasis>function-name</emphasis></literal>
        that must be defined by:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><emphasis>function-name</emphasis><phrase role="special">)</phrase>
</programlisting>
      <para>
        This can be used at any point in the public section of the enclosing class
        (see __Access__ to use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        in a non-public section of the class instead). The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        macro must be used only once in a class for a given function name and overloaded
        functions can reuse the same <literal moreinfo="none">override_<emphasis>function-name</emphasis></literal>
        definition (plus <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>
        can be used to generate a name different than <literal moreinfo="none">override_<emphasis>function-name</emphasis></literal>,
        see also __Overloads_and_Named_Overrides__). This library will generate a
        compile-time error if there is no suitable virtual function to override in
        any of the public base classes. <footnote id="boost_contract.tutorial.public_function_overrides__subcontracting_.f1">
        <para>
          This error is similar in principle to the error generated by C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override</phrase></computeroutput> specifier, but it is limited
          to functions with the extra <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">*</phrase></computeroutput> parameter and searched recursively only
          in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput> base classes passed
          to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
          because only those are valid functions to override for subcontracting.
        </para>
        </footnote>
      </para>
      <para>
        For convenience <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDES">BOOST_CONTRACT_OVERRIDES</link></computeroutput>
        can be used with multiple functions names instead of repeating <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput> for each
        function name (on compilers that support variadic macros):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>function-name1</emphasis></literal><phrase role="special">,</phrase> <literal moreinfo="none"><emphasis>function-name2</emphasis></literal><phrase role="special">,</phrase> <phrase role="special">...)</phrase>
</programlisting>
      <para>
        Which is equivalent to:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>function-name1</emphasis></literal><phrase role="special">)</phrase>
<phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>function-name2</emphasis></literal><phrase role="special">)</phrase>
<phrase role="special">...</phrase>
</programlisting>
      <para>
        Overriding public functions must always list the extra trailing parameter
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">*</phrase></computeroutput> with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">0</phrase></computeroutput>
        default value (i.e., <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">nullptr</phrase></computeroutput>),
        even when they are not declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">virtual</phrase></computeroutput>
        (because this parameter is present in the signature of the virtual function
        being overridden from base classes). Programmers must pass the extra virtual
        parameter as the very first argument to all <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        calls in the overriding function.
      </para>
      <para>
        When called from overriding public functions, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        also takes a pointer to the enclosing function, the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput> (because overriding public functions
        check class invariants), and references to each function argument in the
        order they appear in the function declaration. <footnote id="boost_contract.tutorial.public_function_overrides__subcontracting_.f2">
        <para>
          <emphasis role="bold">Rationale:</emphasis> The object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
          is passed after the function pointer to follow <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">bind</phrase></computeroutput>'s
          syntax. The function pointer and references to all function arguments are
          needed for overriding virtual public functions because this library has
          to call overridden virtual public functions to check their contracts for
          subcontracting (even if this library will not actually execute the bodies
          of the overridden functions).
        </para>
        </footnote> As shown in the example above, when the overriding public function
        has a non-void return type, programmers must pass a reference to the function
        return value as the second argument to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        (this library will generate a compile-time error otherwise). <footnote id="boost_contract.tutorial.public_function_overrides__subcontracting_.f3">
        <para>
          <emphasis role="bold">Rationale:</emphasis> As for non-overriding public
          virtual functions, also overriding functions use the extra return value
          parameter to pass it to the overridden functions when subcontracting. In
          the case of overriding functions this library also has the function pointer
          so it will generate a compile-time error if the function is non-void and
          programmers forget to specify the extra return value parameter (this extra
          error checking is not possible instead for non-overriding public virtual
          functions because their contracts do not have to specify the function pointer,
          see also <link linkend="boost_contract.tutorial.virtual_public_functions">Virtual
          Public Functions</link>).
        </para>
        </footnote> In this case the functor specified to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        takes a single parameter for the return value (possibly as a constant reference
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>
        to avoid extra copies of the return value).
      </para>
      <important>
        <para>
          It is the responsibility of the programmers to pass the extra parameter
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput> to all <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          calls within overriding public functions, and also to pass the return value
          reference after <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput> to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          for non-void overriding public functions. This library cannot always generate
          compile-time errors if programmers fail to do so (but in general contract
          checking will not correctly work at run-time).
        </para>
        <para>
          <emphasis>Remember: always pass "v" as the first argument to
          old-of macros, the contract, etc. for overriding public functions; always
          pass the result variable after "<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput>"
          to the contract for non-void overriding public functions.</emphasis>
        </para>
      </important>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function returns an RAII object that must always be assigned to a local variable
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        otherwise this library will generate a run-time error (note that C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations cannot be used here and
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::const::guard</computeroutput>
        type must be explicitly specified). The public member function body is programmed
        right after the declaration of this RAII object. At construction, this RAII
        object doe the following:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static and non-static class invariants for all overridden bases
            and for the derived class, by calling <literal moreinfo="none"><emphasis>typeof</emphasis>(<emphasis>overridden-base</emphasis>)</literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <literal moreinfo="none"><emphasis>overridden-base</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>...
            <literal moreinfo="none"><emphasis>typeof</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput>
            <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput>.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check preconditions for all overridden base functions and for the overriding
            derived function in <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
            with each other, by calling the nullary functors <literal moreinfo="none"><emphasis>f1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>...
            <literal moreinfo="none"><emphasis>fn</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>
            passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>f1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>, ..., <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>fn</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> for all of the overridden and overriding
            functions respectively.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        At destruction instead:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static and non-static class invariants for all overridden bases
            and for the derived class, by calling <literal moreinfo="none"><emphasis>typeof</emphasis>(<emphasis>overridden-base</emphasis>)</literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <literal moreinfo="none"><emphasis>overridden-base</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>...
            <literal moreinfo="none"><emphasis>typeof</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput>
            <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">invariant</phrase><phrase role="special">()</phrase></computeroutput>
            (even if the function body threw an exception).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the function body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check postconditions for all overridden base functions and for
                  the overriding derived function in <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>
                  with each other, by calling the functors <literal moreinfo="none"><emphasis>g1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>...
                  <literal moreinfo="none"><emphasis>gn</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>
                  passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>g1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>, ..., <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>gn</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> for all of the overridden and
                  overriding functions respectively (or <literal moreinfo="none"><emphasis>g1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>result</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> <link linkend="and_anchor"><literal moreinfo="none"><emphasis>AND</emphasis></literal></link>...
                  <literal moreinfo="none"><emphasis>gn</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>result</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> for non-void public function overrides).
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        This ensures that overriding public function subcontracts are checked correctly
        at run-time (see also <link linkend="boost_contract.contract_programming_overview.public_function_calls">Public
        Function Calls</link>).
      </para>
      <para>
        For the rest, the same considerations made in __Public_Virtual_Functions__
        apply.
      </para>
    </section>
    <section id="boost_contract.tutorial.base_classes__subcontracting_">
      <title><link linkend="boost_contract.tutorial.base_classes__subcontracting_">Base
      Classes (Subcontracting)</link></title>
      <para>
        In order for this library to support subcontracting, programmers must specify
        the bases of a class declaring a public member type named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>
        via a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">typedef</phrase></computeroutput> using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>. For
        example (see also <ulink url="../../example/features/base_types.cpp"><literal moreinfo="none">base_types.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">chars</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="comment">/* local macro (for convenience) */</phrase> <phrase role="special">\</phrase>
        <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">chars</phrase><phrase role="special">&gt;,</phrase> <phrase role="special">\</phrase>
        <phrase role="keyword">public</phrase> <phrase role="identifier">unique_chars</phrase><phrase role="special">,</phrase> <phrase role="special">\</phrase>
        <phrase role="keyword">public</phrase> <phrase role="keyword">virtual</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;,</phrase> <phrase role="special">\</phrase>
        <phrase role="keyword">virtual</phrase> <phrase role="keyword">protected</phrase> <phrase role="identifier">has_size</phrase><phrase role="special">,</phrase> <phrase role="special">\</phrase>
        <phrase role="keyword">private</phrase> <phrase role="identifier">has_empty</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase> <phrase role="comment">// Bases of this class.</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// Bases typedef.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase> <phrase role="comment">// Undefine local macro.</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        For convenience, a <emphasis>local macro</emphasis> named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BASES</phrase></computeroutput>
        can be used to avoid repeating the base list twice (first when inheriting
        <literal moreinfo="none">: <emphasis>base-list</emphasis></literal> and then when invoking
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput><literal moreinfo="none">(<emphasis>base-list</emphasis>)</literal>).
        Being a local macro, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BASES</phrase></computeroutput>
        must be undefined using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#undef</phrase>
        <phrase role="identifier">BASES</phrase></computeroutput> after it has been used to
        declare <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput> (to avoid
        macro redefinition errors). <footnote id="boost_contract.tutorial.base_classes__subcontracting_.f0">
        <para>
          In this documentation, the local macro to declare base classes is often
          named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BASES</phrase></computeroutput> but any other
          name can be used.
        </para>
        </footnote>
      </para>
      <para>
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
        is a variadic macro and accepts a list of bases separated by commas (see
        <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No Macros</link>
        to program <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput> without
        using macros). When the extra base <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        is used to program constructor preconditions, it must always be private and
        appear as the very first base (see also <link linkend="boost_contract.tutorial.constructors">Constructors</link>).
      </para>
      <important>
        <para>
          Each base passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
          must <emphasis>explicitly</emphasis> specify its inheritance access level
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">protected</phrase></computeroutput>,
          or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">private</phrase></computeroutput> (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">virtual</phrase></computeroutput> is optional and can be specified
          either before or after the access level as usual in C++). <footnote id="boost_contract.tutorial.base_classes__subcontracting_.f1">
          <para>
            <emphasis role="bold">Rationale:</emphasis> This library explicitly requires
            the inheritance access level because derived classes must subcontract
            only from public bases, but not from protected or private bases (see
            <link linkend="boost_contract.contract_programming_overview.public_function_calls">Public
            Function Calls</link>). Therefore, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
            inspect each inheritance access level (using preprocessor meta-programming)
            and removes non-public bases from the list bases <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>
            to consider for subcontracting.
          </para>
          </footnote> This library will generate a compiler-error if the first base
          is missing its inheritance access level, but this library will not be able
          to error if the access level is missing from bases after the first one.
        </para>
        <para>
          It is the responsibility of the programmers to make sure that all bases
          passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
          explicitly specify their inheritance access level (inheritance access levels
          are instead optional in C++ because <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">private</phrase></computeroutput>
          is implicitly assumed for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase></computeroutput>
          types and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput> for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">struct</phrase></computeroutput> types).
        </para>
      </important>
      <para>
        See __Access__ to avoid making <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>
        member type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput> (e.g., in
        cases when all public members of a class including <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">typedef</phrase></computeroutput>s
        must be controlled exactly). Set the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPEDEF">BOOST_CONTRACT_BASE_TYPEDEF</link></computeroutput>
        configuration macro to use a name different from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>
        (e.g., because <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>
        clashes with other names in the user-defined class).
      </para>
    </section>
    <section id="boost_contract.tutorial.static_public_functions">
      <title><link linkend="boost_contract.tutorial.static_public_functions">Static
      Public Functions</link></title>
      <para>
        Let's consider static public member functions. For example, the following
        such a function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">instances</phrase></computeroutput>
        is declared as a member of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">make</phrase></computeroutput>
        class template (see also <ulink url="../../example/features/static_public.cpp"><literal moreinfo="none">static_public.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">C</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">make</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Static class invariants.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Explicit template parameter `make` (to check static invariants).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">make</phrase><phrase role="special">&gt;();</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">instances_</phrase><phrase role="special">;</phrase> <phrase role="comment">// Function body.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        When called from static public functions, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        cannot take the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
        as a parameter (because there is no object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
        in static member functions) so the enclosing class type (necessary to check
        static class invariants, see also <link linkend="boost_contract.tutorial.class_invariants.static_class_invariants">Static
        Class Invariants</link>) is specified as an explicit template parameter.
        Even if they are not present in the example above, it is possible to specify
        preconditions and postconditions for static public member functions using
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>
        as usual (see also <link linkend="boost_contract.tutorial.preconditions">Preconditions</link>
        and <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function returns an RAII object that must be assigned to a local variable
        of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        otherwise this library will generate a run-time error (note that C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations cannot be used here and
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>
        type must be explicitly specified). The static public member functions body
        is programmed right after the declaration of this RAII object. At construction,
        this RAII object does the following:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants, by calling <literal moreinfo="none"><emphasis>class-type</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> (but never non-static class invariants).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Check preconditions, by calling the nullary functor <literal moreinfo="none"><emphasis>f</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>f</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        At destruction instead:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <simpara>
            Check static class invariants, by calling <literal moreinfo="none"><emphasis>class-type</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase></computeroutput> (even if the function body threw and
            exception, but never non-static class invariants).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            If the function body did not throw an exception:
            <orderedlist inheritnum="ignore" continuation="restarts">
              <listitem>
                <simpara>
                  Check postconditions, by calling the nullary functor <literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>g</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>.
                </simpara>
              </listitem>
            </orderedlist>
          </simpara>
        </listitem>
      </orderedlist>
      <para>
        This ensures that static public member function contracts are correctly checked
        at run-time (note that static public member functions do not subcontract,
        see also <link linkend="boost_contract.contract_programming_overview.public_function_calls">Public
        Function Calls</link>).
      </para>
      <note>
        <para>
          A static public member function can avoid calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          for efficiency but only when it has no preconditions, no postconditions,
          and its class has no static invariants (the class can still have non-static
          invariants or base classes instead).
        </para>
      </note>
    </section>
    <section id="boost_contract.tutorial.private_and_protected_functions">
      <title><link linkend="boost_contract.tutorial.private_and_protected_functions">Private
      and Protected Functions</link></title>
      <para>
        Private and protected member functions do not check class invariants (because
        they are not part of the public class interface) and they do not subcontract
        (because they are not accessible at the calling site where the <ulink url="http://en.wikipedia.org/wiki/Liskov_substitution_principle">substitution
        principle</ulink> applies, see also <link linkend="boost_contract.contract_programming_overview.function_calls">Function
        Calls</link>). However, programmers can still choose to specify preconditions
        and postconditions for private and protected member functions if they want
        to check correctness of implementations and usage of base member functions
        in derived classes. Therefore, when programmers decide to specify contracts
        for private and protected member functions, they can use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>
        (like for non-member functions). For example (see also <ulink url="../../example/features/private_protected.cpp"><literal moreinfo="none">private_protected.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">counter</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Protected function (like non-member functions).</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">n_</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n_</phrase><phrase role="special">;</phrase> <phrase role="comment">// Function body.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">dec</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Private function (like non-member functions).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_n</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">n_</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">n_</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">numeric_limits</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">min</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">n_</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="special">--</phrase><phrase role="identifier">n_</phrase><phrase role="special">;</phrase> <phrase role="comment">// Function body.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">n_</phrase><phrase role="special">;</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The same considerations made in <link linkend="boost_contract.tutorial.non_member_functions">Non-Member
        Functions</link> apply.
      </para>
      <para>
        See <link linkend="boost_contract.tutorial.constructors">Constructors</link>
        and <link linkend="boost_contract.tutorial.destructors">Destructors</link>
        for notes on how to program contracts for private and protected constructors
        and destructors respectively.
      </para>
    </section>
  </section>
  <section id="boost_contract.advanced_topics">
    <title><link linkend="boost_contract.advanced_topics">Advanced Topics</link></title>
    <para>
      This section illustrates more advanced uses of this library.
    </para>
    <section id="boost_contract.advanced_topics.old_values_at_body">
      <title><link linkend="boost_contract.advanced_topics.old_values_at_body">Old
      Values at Body</link></title>
      <para>
        In the examples seen so far old value variables of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
        are initialized to a copy of the expression passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        at the point of their declaration. This correctly is before the function
        body is executed but also before the contract is executed, therefore even
        before class invariants at function entry and preconditions are checked.
      </para>
      <para>
        This is convenient and might be sufficient in most cases. However, in general
        old values should be copied before executing the function body but after
        checking entry class invariants and preconditions (see <link linkend="boost_contract.contract_programming_overview.assertions">Assertions</link>).
        There can be cases in which the expression passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        should be evaluated only if the assertions in class invariants and preconditions
        are checked to be true.
      </para>
      <para>
        This library allows to construct <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
        variables using their default constructor (equivalent to a null pointer)
        and then assign them later to a copy of the expression passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput> in a functor
        with no parameter <literal moreinfo="none"><emphasis>h</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>h</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput>. The nullary functor <literal moreinfo="none"><emphasis>h</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> is called by this library before the function
        body is executed but only after class invariants and preconditions are checked:
        <footnote id="boost_contract.advanced_topics.old_values_at_body.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> Functors for preconditions,
          old value assignments, and postconditions are all optional but when specified,
          they must be specified in this order. Such order is enforced by the fact
          that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::specify_precondition_old_postconditions</computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.specify_old_postcondition">boost::contract::specify_old_postcondition</link></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.specify_postcondition_only">boost::contract::specify_postcondition_only</link></computeroutput>,
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.specify_nothing">boost::contract::specify_nothing</link></computeroutput>
          provide a progressively decreasing subset of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(...)</phrase></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput>
          member functions. The enforced order of preconditions, old value assignments,
          and postconditions is logical because it reflects the order in which they
          are executed at run-time. Other contract programming frameworks allow to
          mix this order, that could have been implemented for this library too but
          it would have complicated a somewhat the library implementation while adding
          no real value (arguably creating confusion because allowing for less logical
          orderings).
        </para>
        </footnote>
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;...&gt;</phrase> <phrase role="identifier">old_</phrase><literal moreinfo="none"><emphasis>name</emphasis></literal><phrase role="special">;</phrase>                 <phrase role="comment">// Use default constructor.</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>  <phrase role="comment">// Same for all other contracts.</phrase>
    <phrase role="special">...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>                                          <phrase role="comment">// Capture by reference...</phrase>
        <phrase role="identifier">old_</phrase><literal moreinfo="none"><emphasis>name</emphasis></literal> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>expression</emphasis></literal><phrase role="special">);</phrase>    <phrase role="comment">// ...but modify only old values.</phrase>
    <phrase role="special">})</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_</phrase><literal moreinfo="none"><emphasis>name</emphasis></literal> <phrase role="special">...);</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">})</phrase>
<phrase role="special">;</phrase>
</programlisting>
      <para>
        For example, the following old value expression <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">s</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">]</phrase></computeroutput> passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        is valid only after the precondition has checked that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">index</phrase></computeroutput>
        is within range <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase>
        <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase></computeroutput>.
        Therefore, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">old_y</phrase></computeroutput> is first
        declared using its default constructor (i.e., initialized to a null pointer)
        and later assigned to a copy of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">s</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">]</phrase></computeroutput> in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput>
        after the precondition has checked that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">index</phrase></computeroutput>
        is in range (see also <ulink url="../../example/features/old.cpp"><literal moreinfo="none">old.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">char</phrase> <phrase role="identifier">replace</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">s</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">index</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">char</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_y</phrase><phrase role="special">;</phrase> <phrase role="comment">// But old value copied later...</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase> <phrase role="comment">// ...after preconditions (and invariants) checked.</phrase>
            <phrase role="identifier">old_y</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">]);</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">]</phrase> <phrase role="special">==</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_y</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">s</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="identifier">s</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        The functor passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput> should capture all variables it needs
        to evaluate and copy old value expressions. In general, these variables should
        be captured by reference and not by value (because old values need to copy
        values the variables will have just before executing the function body, and
        not the value these variables had when the functor passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput>
        was first declared). In any case, this functor should modify only old values
        and not the value of other captured variables (see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
      </para>
      <para>
        This library will automatically call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::postcondition_failure</computeroutput>
        if calling the functor specified via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput>
        throws an exception (by default, this terminates the program calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>,
        but see <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link> to throw exceptions, exit the program with an error code,
        etc.). <footnote id="boost_contract.advanced_topics.old_values_at_body.f1">
        <para>
          <emphasis role="bold">Rationale:</emphasis> If old value pointers are assigned
          at the point of their construction instead of using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput>
          then an exception thrown by the old value expression <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
          or more in general any exception thrown by the old value pointer initialization
          will result in that exception being thrown up the stack by the contracted
          function. This is arguably less correct than calling <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::postcondition_failure</computeroutput>
          because an exception thrown by an old value copy causes the program to
          fail checking its postconditions and should not technically causes the
          contracted function to thrown an exception (however, this might not be
          a significant difference in practice). Note that while it would be possible
          to wrap all old value operations ([refclass boost::contract::old_ptr
        </para>
        </footnote> copy constructor, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.make_old_id465946">boost::contract::make_old</link></computeroutput>,
        etc.) in try-catch statements so this library will call <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::postcondition_failure</computeroutput>
        also when old values are copied when they are constructed outside <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput>,
        that will prevent this library from knowing the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::from</computeroutput>
        parameter which is not acceptable (specifically because destructors can have
        postconditions). ]
      </para>
    </section>
    <section id="boost_contract.advanced_topics.optional_return_value">
      <title><link linkend="boost_contract.advanced_topics.optional_return_value">Optional
      Return Value</link></title>
      <para>
        It is possible to use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput>
        to handle the return value when programmers cannot construct the result variable
        at its point of declaration before the contract (e.g., because an appropriate
        constructor for the return type is not available at that point, or just because
        it would be too expensive to execute an extra initialization of the result
        value at run-time). <footnote id="boost_contract.advanced_topics.optional_return_value.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput>
          was used instead of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput>
          because this library is designed to work well with Boost and because <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput> is not part of the C++ standard
          yet.
        </para>
        </footnote> For example (see also <ulink url="../../example/features/optional_result.cpp"><literal moreinfo="none">optional_result.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">struct</phrase> <phrase role="identifier">surface</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">area</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">perimeter</phrase><phrase role="special">;</phrase>

    <phrase role="comment">// No default constructor.</phrase>
    <phrase role="identifier">surface</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">area</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">perimeter</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">area</phrase><phrase role="special">(</phrase><phrase role="identifier">area</phrase><phrase role="special">),</phrase> <phrase role="identifier">perimeter</phrase><phrase role="special">(</phrase><phrase role="identifier">perimeter</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">surface</phrase> <phrase role="identifier">square_surface</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">edge</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">surface</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase> <phrase role="comment">// No default constructor so use optional.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">edge</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">area</phrase> <phrase role="special">==</phrase> <phrase role="identifier">edge</phrase> <phrase role="special">*</phrase> <phrase role="identifier">edge</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">perimeter</phrase> <phrase role="special">==</phrase> <phrase role="identifier">edge</phrase> <phrase role="special">*</phrase> <phrase role="number">4</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">surface</phrase><phrase role="special">(</phrase><phrase role="identifier">edge</phrase> <phrase role="special">*</phrase> <phrase role="identifier">edge</phrase><phrase role="special">,</phrase> <phrase role="identifier">edge</phrase> <phrase role="special">*</phrase> <phrase role="number">4</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        In this example the return type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">surface</phrase></computeroutput>
        does not have a default constructor that can be used to initialize <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput> when it is first declared. The
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">surface</phrase></computeroutput> non-default constructor
        should not be used to initialize <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput>
        by passing it <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">edge</phrase> <phrase role="special">*</phrase>
        <phrase role="identifier">edge</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">edge</phrase>
        <phrase role="special">*</phrase> <phrase role="number">4</phrase></computeroutput>
        because such operations are logically the responsibility of the function
        body (in fact, it makes logical sense to do such multiplications only after
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">edge</phrase></computeroutput> has been checked to
        be positive by the preconditions). Therefore, instead of initializing <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput> with some arbitrary <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">area</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">perimeter</phrase></computeroutput>
        values (e.g., <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">0</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="number">0</phrase></computeroutput>, or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">-</phrase><phrase role="number">1</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">-</phrase><phrase role="number">1</phrase></computeroutput>), <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput>
        is used in this example to not initialize <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput>
        with a return value when it is first declared before the contract. <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput> is initialized later in the function
        body when the function is about to return and directly using the correct
        return value <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase> <phrase role="special">=</phrase>
        <phrase role="identifier">surface</phrase><phrase role="special">(</phrase><phrase role="identifier">edge</phrase> <phrase role="special">*</phrase> <phrase role="identifier">edge</phrase><phrase role="special">,</phrase> <phrase role="identifier">edge</phrase> <phrase role="special">*</phrase> <phrase role="number">4</phrase><phrase role="special">)</phrase></computeroutput>.
      </para>
      <para>
        When this technique is used, programmers have to make sure that each return
        statement in the function is of the form:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;...&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">...);</phrase>
</programlisting>
      <para>
        This also ensures that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput>
        is always set to the return value before the postconditions are checked.
        Therefore, programmers can always dereference <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput>
        in postconditions to access the return value (using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">operator</phrase><phrase role="special">*</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase></computeroutput> as usual with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput>,
        and without having to explicitly check if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput>
        is an empty <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput> object).
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.optional_return_value.h0">
        <phrase id="boost_contract.advanced_topics.optional_return_value.virtual_and_overriding_public_functions"/><link linkend="boost_contract.advanced_topics.optional_return_value.virtual_and_overriding_public_functions">Virtual
        and Overriding Public Functions</link>
      </bridgehead>
      <para>
        Similarly, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase></computeroutput> can be used for return values
        of virtual and overriding public functions. As usual with non-void virtual
        and overriding public functions the return value <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput>
        must be passed as a parameter to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        right after <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput> (see also
        <link linkend="boost_contract.tutorial.virtual_public_functions">Virtual
        Public Functions</link>). This this case the functor passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(...)</phrase></computeroutput> takes a parameter of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase></computeroutput><literal moreinfo="none"><emphasis>result-type</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">
        <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase>
        <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>
        (see <link linkend="boost_contract.advanced_topics.pure_virtual_public_functions">Pure
        Virtual Public Functions</link> for an example):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><literal moreinfo="none"><emphasis>return-type</emphasis></literal><phrase role="special">&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">...</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">...)</phrase>
    <phrase role="special">...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><literal moreinfo="none"><emphasis>return-type</emphasis></literal> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">;</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">...);</phrase>
</programlisting>
      <para>
        The inner <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>
        in the postcondition functor parameter type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;...</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase></computeroutput> is mandatory (the outer <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>
        in the postcondition functor parameter type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;...</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput> is not). <footnote id="boost_contract.advanced_topics.optional_return_value.f1">
        <para>
          <emphasis role="bold">Rationale:</emphasis> This library requires the postcondition
          functor parameter to be of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;...</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase></computeroutput> so the return value does not have
          to be copied (because of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&amp;</phrase></computeroutput>)
          while postconditions are still prevented from changing it (because of
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>, see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
          Note that the library cannot require the actual functor parameter <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">result</phrase></computeroutput> to be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput> instead (because programmers can always
          program the functor without specifying the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput> outside the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;...</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase></computeroutput> type).
        </para>
        </footnote>
      </para>
    </section>
    <section id="boost_contract.advanced_topics.pure_virtual_public_functions">
      <title><link linkend="boost_contract.advanced_topics.pure_virtual_public_functions">Pure
      Virtual Public Functions</link></title>
      <para>
        In C++, pure virtual functions are allowed to have a <emphasis>default implementation</emphasis>
        as long as such implementation is programmed out-of-line so defined outside
        the class declaring the pure virtual function as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">virtual</phrase>
        <phrase role="special">...</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase></computeroutput>. Contracts
        for pure virtual public functions are programmed using the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        function like for (non-pure) virtual public functions, so all consideration
        made in <link linkend="boost_contract.tutorial.virtual_public_functions">Virtual
        Public Functions</link> apply. However, in this case contracts are always
        programmed out-of-line, in the default implementation of the pure virtual
        function.
      </para>
      <para>
        For example, note how the following <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">shape</phrase><phrase role="special">::</phrase><phrase role="identifier">get_surface</phrase></computeroutput>
        default implementation (which is used to program the pure virtual function
        contract) must be defined out-of-line and therefore outside the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">shape</phrase></computeroutput> class declaration (see also <ulink url="../../example/features/pure_virtual_public.cpp"><literal moreinfo="none">pure_virtual_public.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">struct</phrase> <phrase role="identifier">surface</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">area</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">perimeter</phrase><phrase role="special">;</phrase>

    <phrase role="comment">// No default constructor.</phrase>
    <phrase role="identifier">surface</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">area</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">perimeter</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">area</phrase><phrase role="special">(</phrase><phrase role="identifier">area</phrase><phrase role="special">),</phrase> <phrase role="identifier">perimeter</phrase><phrase role="special">(</phrase><phrase role="identifier">perimeter</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">shape</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="identifier">surface</phrase> <phrase role="identifier">get_surface</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Pure-virtual function definition (and contract) out-of-line (usual in C++).</phrase>
<phrase role="identifier">surface</phrase> <phrase role="identifier">shape</phrase><phrase role="special">::</phrase><phrase role="identifier">get_surface</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">surface</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">surface</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">area</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">perimeter</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase> <phrase role="comment">// Pure function body (never executed by this library).</phrase>
    <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">square</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">square</phrase><phrase role="special">&gt;,</phrase> <phrase role="special">\</phrase>
            <phrase role="keyword">public</phrase> <phrase role="identifier">shape</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="identifier">surface</phrase> <phrase role="identifier">get_surface</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">surface</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_get_surface</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">square</phrase><phrase role="special">::</phrase><phrase role="identifier">get_surface</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">surface</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">area</phrase> <phrase role="special">==</phrase> <phrase role="identifier">edge</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="identifier">edge</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">perimeter</phrase> <phrase role="special">==</phrase> <phrase role="identifier">edge</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="number">4</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">surface</phrase><phrase role="special">(</phrase><phrase role="identifier">edge</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="identifier">edge</phrase><phrase role="special">(),</phrase> <phrase role="identifier">edge</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="number">4</phrase><phrase role="special">));</phrase>
    <phrase role="special">}</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">get_surface</phrase><phrase role="special">)</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        This library will never actually execute the pure virtual function body while
        it is calling the pure virtual function default implementation to check its
        contract for subcontracting. Therefore, programmers can safely <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">)</phrase></computeroutput> at
        the beginning of the body if they intend for that body to never be executed
        (or they can program a working body in case they need to use C++ pure virtual
        function default implementation outside of what strictly required by this
        library).
      </para>
      <para>
        Note that because of subcontracting, preconditions of derived class functions
        are checked in <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
        with preconditions of base class functions (see <link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
        Function Overrides</link>). If base class member functions specify no precondition
        then preconditions specified by overriding functions in derived classes will
        have no effect (because when checked in <link linkend="or_anchor"><literal moreinfo="none"><emphasis>OR</emphasis></literal></link>
        with the base class function that has no precondition they will always pass).
        This correctly reflects the fact that the base class member function can
        be called in any context (because it has no precondition) and so must all
        its overriding function in derived classes in order for the derived class
        to act like the base class in virtue of inheritance. However, it is sometimes
        acceptable for a base class to declare a pure virtual function with a precondition
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">)</phrase></computeroutput> indicating
        that the pure virtual function must be redefined by derived classes (as always
        with pure virtual functions) and also that derived classes will be responsible
        to specify preconditions (this technique makes sense only for preconditions
        of pure virtual functions otherwise it will prevent a concrete base function
        from being ever called successfully). For example (see also <ulink url="../../example/features/named_override.cpp"><literal moreinfo="none">named_override.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">generic_unary_pack</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">_1</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="identifier">T</phrase> <phrase role="identifier">_1</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">generic_unary_pack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">_1</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="comment">// Derived concrete classes will enforce preconditions.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        As already discussed in <link linkend="boost_contract.tutorial.private_and_protected_functions">Private
        and Protected Functions</link>, private and protected member functions do
        not check class invariants and do not subcontract (not even when they are
        virtual or pure virtual). Therefore, no contract is ever programmed for a
        private or protected pure virtual function (because that contract would never
        be checked during subcontracting anyway).
      </para>
    </section>
    <section id="boost_contract.advanced_topics.overloaded_functions">
      <title><link linkend="boost_contract.advanced_topics.overloaded_functions">Overloaded
      Functions</link></title>
      <para>
        As seen in <link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
        Function Overrides</link>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        takes a pointer to the enclosing function as a parameter when used in overriding
        public functions. When an overriding public function is overloaded, the function
        pointer cannot be automatically deduced by the compiler so programmers have
        to use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static_cast</phrase></computeroutput> to resolve
        ambiguities (as usual with pointers to overloaded functions in C++). <footnote id="boost_contract.advanced_topics.overloaded_functions.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> In oder to avoid copies, this
          library takes all contracted function arguments and the return value as
          references when passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          for overriding public functions. Therefore, the library cannot differentiate
          the actual argument and return types of the contracted functions when they
          are passed by reference and when they are not. As a result, the library
          cannot automatically reconstruct the contracted function pointer type which
          must be instead deduced from the function pointer explicitly passed by
          programmers to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
          (in turn this requires using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static_cast</phrase></computeroutput>
          to resolve ambiguities as usual in C++ when obtaining the pointer of overloaded
          functions).
        </para>
        </footnote> For example, note how <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static_cast</phrase></computeroutput>
        is used in the following calls to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        (see also <ulink url="../../example/features/overload.cpp"><literal moreinfo="none">overload.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">string_lines</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">lines</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase><phrase role="special">)</phrase> <phrase role="comment">// Used only once for all `str` overloads.</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_str</phrase>
        <phrase role="comment">// Note the use of `static_cast` (and same in other overloads below).</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::*)(</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*)</phrase> <phrase role="keyword">const</phrase><phrase role="special">&gt;(&amp;</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::</phrase><phrase role="identifier">str</phrase><phrase role="special">),</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">str_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Overload on (absence of) `const` qualifier.</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_str</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">str_</phrase><phrase role="special">,</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&amp;</phrase> <phrase role="special">(</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::*)(</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*)&gt;(&amp;</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::</phrase><phrase role="identifier">str</phrase><phrase role="special">),</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">str_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><phrase role="identifier">put</phrase><phrase role="special">)</phrase> <phrase role="comment">// Used only once for all `put` overloads.</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_str</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">str</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_put</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase> <phrase role="special">(</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::*)(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*)&gt;(&amp;</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::</phrase><phrase role="identifier">put</phrase><phrase role="special">),</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_str</phrase> <phrase role="special">+</phrase> <phrase role="identifier">x</phrase> <phrase role="special">+</phrase> <phrase role="char">'\n'</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">str_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">str_</phrase> <phrase role="special">+</phrase> <phrase role="identifier">x</phrase> <phrase role="special">+</phrase> <phrase role="char">'\n'</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Overload on argument type.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_str</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">str</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_put</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase> <phrase role="special">(</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::*)(</phrase><phrase role="keyword">char</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase>
                <phrase role="identifier">virtual_</phrase><phrase role="special">*)&gt;(&amp;</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::</phrase><phrase role="identifier">put</phrase><phrase role="special">),</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_str</phrase> <phrase role="special">+</phrase> <phrase role="identifier">x</phrase> <phrase role="special">+</phrase> <phrase role="char">'\n'</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">str_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">str_</phrase> <phrase role="special">+</phrase> <phrase role="identifier">x</phrase> <phrase role="special">+</phrase> <phrase role="char">'\n'</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Overload on argument type and arity (also with default parameter).</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">tab</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_str</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">str</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_put</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase> <phrase role="special">(</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::*)(</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase>
                <phrase role="identifier">virtual_</phrase><phrase role="special">*)&gt;(&amp;</phrase><phrase role="identifier">string_lines</phrase><phrase role="special">::</phrase><phrase role="identifier">put</phrase><phrase role="special">),</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">tab</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">ostringstream</phrase> <phrase role="identifier">s</phrase><phrase role="special">;</phrase>
                <phrase role="identifier">s</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                        <phrase role="identifier">str</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_str</phrase> <phrase role="special">+</phrase> <phrase role="special">(</phrase><phrase role="identifier">tab</phrase> <phrase role="special">?</phrase> <phrase role="string">"\t"</phrase> <phrase role="special">:</phrase> <phrase role="string">""</phrase><phrase role="special">)</phrase> <phrase role="special">+</phrase> <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">str</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="char">'\n'</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">ostringstream</phrase> <phrase role="identifier">s</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">s</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">str_</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">tab</phrase> <phrase role="special">?</phrase> <phrase role="string">"\t"</phrase> <phrase role="special">:</phrase> <phrase role="string">""</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="char">'\n'</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">str_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">str</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">str_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <para>
        Overloaded functions have the same function name so the same <literal moreinfo="none">override_<emphasis>function-name</emphasis></literal>
        type can be used as template parameter of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>.
        Therefore, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        only needs to be invoked once for any given function name even when the function
        name is overloaded (as shown in the example above).
      </para>
    </section>
    <section id="boost_contract.advanced_topics.named_overrides">
      <title><link linkend="boost_contract.advanced_topics.named_overrides">Named
      Overrides</link></title>
      <para>
        The function name passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        should never start with an underscore to avoid generating names containing
        double underscores <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override__</phrase><phrase role="special">...</phrase></computeroutput> that are reserved by the C++ standard.
        There is a separate macro <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>
        that can be used to explicitly specify the name of the type that will be
        passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        as a template argument: <footnote id="boost_contract.advanced_topics.named_overrides.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> A different macro <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>
          is used instead of overloading <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
          using variadic macros because the override macros cannot be programmed
          manually by the users so making them variadic would prevent the use of
          this library on compilers that do not support variadic macros (see also
          <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
          Macros</link>).
        </para>
        </footnote>
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>function-name</emphasis></literal><phrase role="special">)</phrase>                  <phrase role="comment">// Generate `override_...`.</phrase>
<phrase role="identifier">BOOST_CONTRACT_NAMED_OVERRIDE</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>type-name</emphasis></literal><phrase role="special">,</phrase> <literal moreinfo="none"><emphasis>function-name</emphasis></literal><phrase role="special">)</phrase> <phrase role="comment">// Generate `type-name`.</phrase>
</programlisting>
      <para>
        For example, the following overriding member function is named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">_1</phrase></computeroutput> so <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">_1</phrase><phrase role="special">)</phrase></computeroutput>
        would generate a type named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override__1</phrase></computeroutput>
        (which is reserved in C++ because it contains double underscores <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">__</phrase></computeroutput>), <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_NAMED_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">override1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">)</phrase></computeroutput>
        is used to name the type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override1</phrase></computeroutput>
        instead (see also <ulink url="../../example/features/named_override.cpp"><literal moreinfo="none">named_override.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">positive_unary_pack</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">generic_unary_pack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="comment">// BOOST_CONTRACT_OVERRIDE(_1) would generate reserved symbol `override__1`.</phrase>
    <phrase role="identifier">BOOST_CONTRACT_NAMED_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">override1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">)</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">_1</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Use `override1` type generated by NAMED_OVERRIDE macro above.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">override1</phrase><phrase role="special">&gt;(</phrase>
            <phrase role="identifier">v</phrase><phrase role="special">,</phrase>
            <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase> <phrase role="special">(</phrase><phrase role="identifier">positive_unary_pack</phrase><phrase role="special">::*)(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*)&gt;(&amp;</phrase><phrase role="identifier">positive_unary_pack</phrase><phrase role="special">::</phrase><phrase role="identifier">_1</phrase><phrase role="special">),</phrase>
            <phrase role="keyword">this</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">value</phrase>
        <phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
        <phrase role="identifier">value1_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>
        macro can be used for function names that start with an underscore <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">_</phrase><phrase role="special">...</phrase></computeroutput>, when
        the name <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override_</phrase></computeroutput><literal moreinfo="none"><emphasis>function-name</emphasis></literal>
        generated by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        would clash with other names in the user code, to generate names in CamelCase
        or any other style, in any other case when programmers need or want to generate
        names different than <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override_</phrase><phrase role="special">...</phrase></computeroutput>.
      </para>
    </section>
    <section id="boost_contract.advanced_topics.move_operations">
      <title><link linkend="boost_contract.advanced_topics.move_operations">Move
      Operations</link></title>
      <para>
        As with all public operations of a class, also move operations should maintain
        class invariants (see also <link linkend="Stroustrup13_anchor">[Stroustrup13]</link>,
        p. 520). Specifically, C++ requires the following:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            The moved-from object can be copy assigned.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The moved-from object can be move assigned.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The moved-from object can be destroyed. <footnote id="boost_contract.advanced_topics.move_operations.f0">
            <para>
              If not anything else, this requires that class invariants are maintained
              by move operations because the destructor of the moved-from object
              requires that class invariants are true at its entry (as always with
              destructors, see also <link linkend="boost_contract.contract_programming_overview.destructor_calls">Destructor
              Calls</link>).
            </para>
            </footnote>
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        Thus both the move constructor and the move assignment operator need to maintain
        the class invariants of the moved-from object and their contracts can be
        programmed using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>
        as always for constructors and public member functions, for example (see
        also <ulink url="../../example/features/move.cpp"><literal moreinfo="none">move.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">circular_buffer</phrase> <phrase role="special">:</phrase>
        <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Do not check (some) invariants for moved-from objects.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">circular_buffer</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">data</phrase><phrase role="special">,</phrase>
            <phrase role="keyword">unsigned</phrase> <phrase role="identifier">start</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">start</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">data</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">data_</phrase><phrase role="special">(</phrase><phrase role="identifier">data</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">index_</phrase><phrase role="special">(</phrase><phrase role="identifier">start</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">moved_</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Moved-from can always be destroyed (so no pre `!moved()` here).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Copy constructor.</phrase>
    <phrase role="comment">/* implicit */</phrase> <phrase role="identifier">circular_buffer</phrase><phrase role="special">(</phrase><phrase role="identifier">circular_buffer</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">copy</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Copy assignment.</phrase>
    <phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">circular_buffer</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Moved-from can be (copy) assigned (so no pre `!moved()` here).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">copy</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Move constructor.</phrase>
    <phrase role="comment">/* implicit */</phrase> <phrase role="identifier">circular_buffer</phrase><phrase role="special">(</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">move</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">forward</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">other</phrase><phrase role="special">));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Move assignment.</phrase>
    <phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Moved-from can be (move) assigned (so no pre `!moved()` here).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">move</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">forward</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">other</phrase><phrase role="special">));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">char</phrase> <phrase role="identifier">read</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">moved</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">unsigned</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">index_</phrase><phrase role="special">++;</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">index_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">data_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">())</phrase> <phrase role="identifier">index_</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="comment">// Circular.</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">data_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">i</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">moved</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">moved_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">copy</phrase><phrase role="special">(</phrase><phrase role="identifier">circular_buffer</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">data_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">index_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">index_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">moved_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">move</phrase><phrase role="special">(</phrase><phrase role="identifier">circular_buffer</phrase><phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">data_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">data_</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">index_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">index_</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">moved_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">moved_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="comment">// Mark moved-from object.</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">index_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">moved_</phrase><phrase role="special">;</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        This example assumes that it is possible to call the public member function
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">move</phrase><phrase role="special">()</phrase></computeroutput>
        on the moved-from object. This allows to make explicit the precondition that
        except for destructor, copy and move assignments all other public member
        functions cannot be called on a moved-from object. This precondition is usually
        implicit in C++ (i.e., documented by the standard but not checked by the
        language at run-time). If it is is not possible (e.g., due to some optimized
        implementation of the move operations) to have such a public <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">move</phrase><phrase role="special">()</phrase></computeroutput>
        member function, the private <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">moved_</phrase></computeroutput>
        member (or similar) can be used to program class invariants and preconditions
        (and that will just relay on the usual implicit C++ assumption on moved-from
        object because users will not be able to fully check preconditions and class
        invariants before calling functions of a moved-from object).
      </para>
      <note>
        <para>
          The default move constructor and move assignment operator automatically
          generated by C++ will not check contracts. Therefore, unless these operations
          are not public or they have no preconditions, no postconditions, and the
          class has no invariants, programmers should manually define them using
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>,
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>.
          (Same for all other automatically generated operations.)
        </para>
      </note>
    </section>
    <section id="boost_contract.advanced_topics.unions">
      <title><link linkend="boost_contract.advanced_topics.unions">Unions</link></title>
      <para>
        In C++, a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">union</phrase></computeroutput> cannot have
        virtual member functions, bases classes, and cannot be used as a base class
        thus subcontracting (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>,
        etc.) do not apply to unions. Also a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">union</phrase></computeroutput>
        cannot inherit from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>
        (because it cannot have base classes) so such a class is used to declare
        a local object that checks constructor preconditions (see <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">pre</phrase></computeroutput>
        in the example below). A part from that, this library is used as usual to
        program contracts for unions, for example (see also <ulink url="../../example/features/union.cpp"><literal moreinfo="none">union.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">union</phrase> <phrase role="identifier">positive</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">i_</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">d_</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">positive</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Unions cannot have bases so ctor preconditions here.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">positive</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">pre</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">});</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">i_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
        <phrase role="special">++</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">positive</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Unions cannot have bases so ctor preconditions here.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">positive</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">pre</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">});</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">d_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
        <phrase role="special">++</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">positive</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="special">--</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
            <phrase role="special">});</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">i_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
            <phrase role="special">});</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">d_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">positive</phrase><phrase role="special">&gt;();</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">i_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">d_</phrase><phrase role="special">;</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
    </section>
    <section id="boost_contract.advanced_topics.volatile_class_invariants">
      <title><link linkend="boost_contract.advanced_topics.volatile_class_invariants">Volatile
      Class Invariants</link></title>
      <para>
        This library allows to specify a different set of class invariants to be
        checked for public volatile member functions. These <emphasis>volatile class
        invariants</emphasis> are programmed in a public member function <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
        qualified and named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        (see <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_INVARIANT">BOOST_CONTRACT_INVARIANT</link></computeroutput>
        to name the invariant function differently from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput>
        and __Access__ to not have to declare it public).
      </para>
      <para>
        In general, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
        qualified invariants work the same as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
        qualified invariant (see <link linkend="boost_contract.tutorial.class_invariants">Class
        Invariants</link>) with the only difference that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
        member functions check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> invariants while mutable (i.e., neither
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> nor <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput>
        qualified) and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> member
        functions check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> invariants.
        A given class can specify both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
        <phrase role="keyword">volatile</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
        qualified invariant member functions: <footnote id="boost_contract.advanced_topics.volatile_class_invariants.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> Constructors and destructors
          check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> invariants in that
          order because the qualifier that limits the calls the least is checked
          first (note that a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> calls can be made on any object
          while <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> calls cannot be
          made on <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput> non-<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> objects, in that sense the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
          qualifier limits calls on an object less than <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
          alone does). This is consistent with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
          class invariants that are checked even before <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
          <phrase role="keyword">volatile</phrase></computeroutput> invariants (the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput> classifier limits calls even less
          than <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
          in the sense that an object is not even needed to make static calls). While
          there is a more important reason to check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
          invariants before all other invariants (see <link linkend="boost_contract.contract_programming_overview">Contract
          Programming Overview</link>), the above is the only reason why this library
          checks <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
          invariants before <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> invariants
          for constructors and destructors.
        </para>
        </footnote>
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            Constructors check both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
            <phrase role="keyword">volatile</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
            qualified invariants in that order (at exit if no exception is thrown).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Destructors check both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
            qualified invariants (at entry).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Both mutable and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> public
            member functions check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
            qualified invariants (at entry and at exit if no exception is thrown).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
            public member functions check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
            <phrase role="keyword">volatile</phrase></computeroutput> qualified invariants
            (at entry and at exit if no exception is thrown).
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        This ensures that volatile class invariants are correctly checked (see also
        <link linkend="boost_contract.contract_programming_overview.constructor_calls">Constructor
        Calls</link>, <link linkend="boost_contract.contract_programming_overview.destructor_calls">Destructor
        Calls</link>, and <link linkend="boost_contract.contract_programming_overview.public_function_calls">Public
        Function Calls</link>). For example (see also <ulink url="../../example/features/volatile.cpp"><literal moreinfo="none">volatile.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">a</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase><phrase role="special">;</phrase>    <phrase role="comment">// Invariants cv qualified.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>             <phrase role="comment">// Invariants const qualified.</phrase>

    <phrase role="identifier">a</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check both cv and const invariant (at exit if no throw).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase><phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">a</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check both cv and const invariant (at entry).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">m</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check const invariant (at entry and exit if no throw).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">c</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check const invariant (at entry and exit if no throw).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">v</phrase><phrase role="special">()</phrase> <phrase role="keyword">volatile</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check cv invariant (at entry and exit if no throw).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">cv</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Check cv inv. (at entry and exit if no throw).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <para>
        While this library does not automatically check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
        <phrase role="keyword">volatile</phrase></computeroutput> invariants for non-volatile
        functions, programmers can explicitly call the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
        <phrase role="keyword">volatile</phrase></computeroutput> invariant function from the
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> invariant function if
        that makes sense for the contracts being specified (that way all public member
        functions <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput> and not will
        check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>
        invariants): <footnote id="boost_contract.advanced_topics.volatile_class_invariants.f1">
        <para>
          <emphasis role="bold">Rationale:</emphasis> Note that while all public
          member functions can be made to check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
          <phrase role="keyword">volatile</phrase></computeroutput> invariants, it is never
          possible to make volatile public member functions check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
          non-volatile invariants. That is because both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput> can always be
          added but never stripped in C++ (a part from forcefully via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const_cast</phrase></computeroutput>) but <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
          is always automatically added by this library in order to enforce contract
          constant-correctness (see <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
          That said, it would be incorrect for this library to also automatically
          add <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput> and require all
          functions to check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> (not just <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>)
          invariants because only <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput>
          members can be accessed from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
          <phrase role="keyword">volatile</phrase></computeroutput> invariants so there could
          be many <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> (but not <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>)
          members that are accessible from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
          invariants but not from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> invariants. To avoid this confusion,
          this library has chosen to draw a clear dichotomy between <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
          <phrase role="keyword">volatile</phrase></computeroutput> invariants so that only
          volatile members check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> invariants and only non-volatile
          members check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> (but not
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput>)
          invariants. This is simple and should serve most cases. If programmers
          need non-volatile members to check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase>
          <phrase role="keyword">volatile</phrase></computeroutput> invariants, they can explicitly
          do so by calling the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase></computeroutput> invariant function from the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> invariant function as shown in this
          documentation.
        </para>
        </footnote>
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <literal moreinfo="none"><emphasis>class-type</emphasis></literal> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <literal moreinfo="none"><emphasis>class-type</emphasis></literal> <phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">cv</phrase> <phrase role="special">=</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">cv</phrase><phrase role="special">.</phrase><phrase role="identifier">invariant</phrase><phrase role="special">();</phrase> <phrase role="comment">// Call `void invariant() const volatile` below.</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="keyword">volatile</phrase> <phrase role="special">{</phrase>
        <phrase role="special">...</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">...</phrase>
<phrase role="special">};</phrase>
</programlisting>
      <para>
        As usual, static class invariants can also be specified (see <link linkend="boost_contract.tutorial.class_invariants.static_class_invariants">Static
        Class Invariants</link>) and private and protected member functions do not
        check any invariant (see <link linkend="boost_contract.tutorial.private_and_protected_functions">Private
        and Protected Functions</link>).
      </para>
    </section>
    <section id="boost_contract.advanced_topics.old_value_requirements">
      <title><link linkend="boost_contract.advanced_topics.old_value_requirements">Old
      Value Requirements</link></title>
      <para>
        Old values require copying the expression passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        so the type of that expression must be copy constructible. More precisely,
        dereferencing an old value pointer of type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase></computeroutput>
        requires <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase></computeroutput> to be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput>
        (otherwise this library will generate a compile-time error).
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            In some cases it might be acceptable, or even desirable, to cause a compile-time
            error when a program uses old value types that are not copy constructible
            (because it is not possible to fully check the correctness of the program
            as stated by the contract assertions that use these old values). In these
            cases, programmers can declare old values using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
            as seen so far (or equivalently using C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput>
            declarations <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase> <phrase role="special">...</phrase>
            <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(...)</phrase></computeroutput>). <footnote id="boost_contract.advanced_topics.old_value_requirements.f0">
            <para>
              <emphasis role="bold">Rationale:</emphasis> When C++11 <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput> declarations are used, this library
              defaults the type of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
              to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
              because it generates a compile-time error for non-copyable types so
              it is in general more conservative than <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput>.
            </para>
            </footnote>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            However, in other cases it might be desirable to simply not check assertions
            that use some old values when the related old value types are not copy
            constructible. Programmers can do this by using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput>
            instead of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
            to program these old values (and by checking if the old value pointer
            is not null before dereferencing it in postconditions).
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        For example, consider the following <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">accumulate</phrase></computeroutput>
        function template that could in general be instantiated for types <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput> that are not copy constructible, that
        is when <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase></computeroutput> is <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput>
        (see also <ulink url="../../example/features/old_noncopyable.cpp"><literal moreinfo="none">noncopyable.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">accumulate</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">total</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="comment">// No compiler error if T has no copy constructor...</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr_noncopyable</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_total</phrase> <phrase role="special">=</phrase>
            <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">total</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="comment">// ...but old value null if T has no copy constructor.</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">old_total</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">total</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_total</phrase> <phrase role="special">+</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="identifier">total</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        The old value pointer <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">old_total</phrase></computeroutput>
        is programmed using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput>
        so if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput> is not copy constructible
        then <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">total</phrase></computeroutput> will simply not
        be copied and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">old_total</phrase></computeroutput> will
        be left as a null pointer (in these cases <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">old_total</phrase></computeroutput>
        must be checked to be not null <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">old_total</phrase><phrase role="special">)</phrase> <phrase role="special">...</phrase></computeroutput> before
        it can be dereferenced in the postconditions). If the above example used
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
        instead then the library would have generated a compile-time error if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">accumulate</phrase></computeroutput> is instantiated for types <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput> that are not copy constructible (but
        only if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">old_total</phrase></computeroutput> is actually
        dereferenced in the contract assertions somewhere <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">*</phrase><phrase role="identifier">old_total</phrase> <phrase role="special">...</phrase></computeroutput>).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_noncopyable</phrase></computeroutput>
        postfix in the type name <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase></computeroutput>
        refers to the pointed type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput>
        that may or not be copy constructible without causing a compile-time error
        in this case (the old value pointer itself is always copyable, or at least
        copy assignable).
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.old_value_requirements.h0">
        <phrase id="boost_contract.advanced_topics.old_value_requirements.no_c__11"/><link linkend="boost_contract.advanced_topics.old_value_requirements.no_c__11">No
        C++11</link>
      </bridgehead>
      <para>
        In general, the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase></computeroutput> type trait requires
        C++11 for full support. On non-C++11 compilers, it is possible to inherit
        the old value type from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase></computeroutput>,
        or use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_MOVABLE_BUT_NOT_COPYABLE</phrase></computeroutput>,
        or explicitly specialize the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase></computeroutput>
        template (see <ulink url="http://www.boost.org/doc/libs/release/libs/type_traits/doc/html/boost_typetraits/reference/is_copy_constructible.html">boost::is_copy_constrictible</ulink>
        for more information):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">type_traits</phrase><phrase role="special">/</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;&gt;</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase><literal moreinfo="none"><emphasis>old-value-type</emphasis></literal><phrase role="special">&gt;</phrase> <phrase role="special">:</phrase> <phrase role="identifier">false_type</phrase> <phrase role="special">{};</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </section>
    <section id="boost_contract.advanced_topics.assertion_requirements__static_if_">
      <title><link linkend="boost_contract.advanced_topics.assertion_requirements__static_if_">Assertion
      Requirements (Static-If)</link></title>
      <para>
        In general, assertions can introduce a new set of requirements on the types
        used by the program. Some of these type requirements might be necessary only
        to check the assertions and they would not be required by the program otherwise.
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            In some cases it might be acceptable, or even desirable, to cause a compile-time
            error when a program uses types that do not provide all the operations
            needed to check contract assertions (because it is not possible to fully
            check the correctness of the program as stated by the contracts). In
            these cases, programmers can specify contract assertions as we have seen
            so far, compilation will fail if user types do not provide all operations
            necessary to check the contracts.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            However, in other cases it might be desirable that adding contracts to
            a program does not alter its type requirements and that assertions are
            simply not checked when user types do not provide all the operations
            necessary to check them. Programmers can do this by using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.check_if">boost::contract::check_if</link></computeroutput>
            (and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.check_if_c">boost::contract::check_if_c</link></computeroutput>)
            within the contract assertions.
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        For example, let's consider the following <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase></computeroutput>
        class template. This class template does not usually require that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput> has an equality operator <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">==</phrase></computeroutput> (it only requires <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput>
        to be copy constructible, see <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase></computeroutput>
        documentation). However, the contracts of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase></computeroutput>
        member function include a postcondition <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">back</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">value</phrase></computeroutput>
        which introduces the new requirement that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput>
        must also have an equality operator <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">==</phrase></computeroutput>.
        Programmers can specify this postcondition as usual <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">back</phrase><phrase role="special">()</phrase>
        <phrase role="special">==</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase></computeroutput> an let the program fail to compile when
        users instantiate this template with a type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput>
        that does not provide an equality operator <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">==</phrase></computeroutput>.
        Otherwise, programmers can specify this postcondition using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.check_if">boost::contract::check_if</link></computeroutput>
        to check the assertion only for types <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">T</phrase></computeroutput>
        that have an equality operator <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">==</phrase></computeroutput>
        and trivially check <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput> otherwise,
        for example (see also <ulink url="../../example/features/check_if.cpp"><literal moreinfo="none">check_if.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Instead of `ASSERT(back() == value)` to handle T no `==`.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;(),</phrase>
                            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">back</phrase><phrase role="special">()),</phrase>
                            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase>
                        <phrase role="special">)</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.check_if">boost::contract::check_if</link></computeroutput>
        function template is a special case of the more general facility <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>: Specifically,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase></computeroutput><literal moreinfo="none"><emphasis>condition</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&gt;(</phrase></computeroutput><literal moreinfo="none"><emphasis>check</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> is equivalent to:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">call_if</phrase><phrase role="special">&lt;</phrase><literal moreinfo="none"><emphasis>condition</emphasis></literal><phrase role="special">&gt;(</phrase>
    <literal moreinfo="none"><emphasis>check</emphasis></literal>
<phrase role="special">).</phrase><phrase role="identifier">else_</phrase><phrase role="special">(</phrase>
    <phrase role="special">[]</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">)</phrase>
</programlisting>
      <para>
        Where <literal moreinfo="none"><emphasis>condition</emphasis></literal> is a nullary boolean
        meta-function and <literal moreinfo="none"><emphasis>check</emphasis></literal> is a nullary
        boolean functor. If <literal moreinfo="none"><emphasis>condition</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">value</phrase></computeroutput>
        is statically evaluated to be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput>
        at compile-time then <literal moreinfo="none"><emphasis>check</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> is called at run-time and its boolean result
        is returned by the enclosing <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">call_if</phrase></computeroutput>.
        Otherwise, if <literal moreinfo="none"><emphasis>condition</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">value</phrase></computeroutput>
        is statically evaluated to be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput>
        at compile-time then <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[]</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="special">}()</phrase></computeroutput> is called
        at run-time and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput> is trivially
        returned by the enclosing <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">call_if</phrase></computeroutput>.
        Note that <literal moreinfo="none"><emphasis>check</emphasis></literal> must be a functor
        template (and not just a functor) so its code that contains the assertion
        operations with the extra type requirements (e.g., the operator <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">==</phrase></computeroutput>) will not be instantiated and compiled
        for specific types unless the compiler determines it will be actually called
        at run-time (C++14 generic lambdas and functor templates like <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase></computeroutput>
        can be used to program <literal moreinfo="none"><emphasis>check</emphasis></literal>, but
        C++11 lambdas cannot).
      </para>
      <para>
        More in general, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>
        accepts a number of optional else-if and one optional else statement:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">call_if</phrase><phrase role="special">&lt;</phrase><literal moreinfo="none"><emphasis>condition1</emphasis></literal><phrase role="special">&gt;(</phrase>
    <literal moreinfo="none"><emphasis>then1</emphasis></literal>
<phrase role="special">).</phrase><phrase role="keyword">template</phrase> <phrase role="identifier">else_if</phrase><phrase role="special">&lt;</phrase><literal moreinfo="none"><emphasis>condition2</emphasis></literal><phrase role="special">&gt;(</phrase>       <phrase role="comment">// Optional.</phrase>
    <literal moreinfo="none"><emphasis>then2</emphasis></literal>
<phrase role="special">)</phrase>
<phrase role="special">...</phrase>                                   <phrase role="comment">// Optionally, other `else_if`.</phrase>
<phrase role="special">.</phrase><phrase role="identifier">else_</phrase><phrase role="special">(</phrase>                               <phrase role="comment">// Optional for `void` functors, otherwise required.</phrase>
    <literal moreinfo="none"><emphasis>else</emphasis></literal>
<phrase role="special">)</phrase>
</programlisting>
      <para>
        Where <literal moreinfo="none"><emphasis>condition1</emphasis></literal>, <literal moreinfo="none"><emphasis>condition2</emphasis></literal>,
        ... are nullary boolean meta-functions and <literal moreinfo="none"><emphasis>then1</emphasis></literal>,
        <literal moreinfo="none"><emphasis>then2</emphasis></literal>, ..., <literal moreinfo="none"><emphasis>else</emphasis></literal>
        are nullary functors. The return types of the functor calls <literal moreinfo="none"><emphasis>then1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>, <literal moreinfo="none"><emphasis>then2</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>, ..., <literal moreinfo="none"><emphasis>esle</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> must either all be the same (possibly all
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">void</phrase></computeroutput>) or be of types implicitly
        convertible into one another. At run-time <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>
        will call the functor <literal moreinfo="none"><emphasis>then1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>, or <literal moreinfo="none"><emphasis>then2</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>, ..., or <literal moreinfo="none"><emphasis>else</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput> depending on which meta-function <literal moreinfo="none"><emphasis>condition1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">value</phrase></computeroutput>,
        <literal moreinfo="none"><emphasis>condition2</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">value</phrase></computeroutput>, ... is evaluated to be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput>
        at compile-time, at it will return the value returned by the functor being
        called If <literal moreinfo="none"><emphasis>then1</emphasis></literal>, <literal moreinfo="none"><emphasis>then2</emphasis></literal>,
        ..., <literal moreinfo="none"><emphasis>else</emphasis></literal> are nullary functor templates
        (not just nullary functors) then their code will only be compiled if the
        compiler determines they need to be actually called at run-time (so only
        if the related <literal moreinfo="none"><emphasis>condition1</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">value</phrase></computeroutput>,
        <literal moreinfo="none"><emphasis>condition2</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">::</phrase><phrase role="identifier">value</phrase></computeroutput>, ... are evaluated to be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput>
        at compile-time). All the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">esle_if</phrase><phrase role="special">&lt;...&gt;(...)</phrase></computeroutput> statements are optional,
        the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">else_</phrase><phrase role="special">(...)</phrase></computeroutput>
        statement is optional if the functor calls return <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">void</phrase></computeroutput>
        but it is required otherwise.
      </para>
      <para>
        In general, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>
        can be used to program contract assertions that compile and check different
        functor templates depending on related conditions being evaluated to be
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">true</phrase></computeroutput> at compile-time (but in
        most cases <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.check_if">boost::contract::check_if</link></computeroutput>
        should be sufficient, simpler and less verbose to use).
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.check_if_c">boost::contract::check_if_c</link></computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if_c">boost::contract::call_if_c</link></computeroutput>,
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">else_if_c</phrase></computeroutput>
        function templates work similarly to their counterparts without the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_c</phrase></computeroutput> postfix
        above, but they take their condition template parameters as static boolean
        values instead of nullary boolean meta-functions.
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.assertion_requirements__static_if_.h0">
        <phrase id="boost_contract.advanced_topics.assertion_requirements__static_if_.static_if__c__14_"/><link linkend="boost_contract.advanced_topics.assertion_requirements__static_if_.static_if__c__14_">Static-If
        (C++14)</link>
      </bridgehead>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>
        function template is a general facility and its use is not limited to programming
        contracts. In fact, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>
        can be used together with C++14 generic lambdas to program statements similar
        to the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase></computeroutput>
        proposal (at least at function scope, see also <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3613.pdf">N3613</ulink>).
        For example, consider the following implementation of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">advance</phrase></computeroutput>
        that uses <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase></computeroutput>-like
        statements programmed via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput>
        (see also <ulink url="../../test/call_if/advance_cxx14.cpp"><literal moreinfo="none">advance_cxx14.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Iter</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Dist</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">myadvance</phrase><phrase role="special">(</phrase><phrase role="identifier">Iter</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">i</phrase><phrase role="special">,</phrase> <phrase role="identifier">Dist</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">Iter</phrase> <phrase role="special">*</phrase><phrase role="identifier">p</phrase> <phrase role="special">=</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">i</phrase><phrase role="special">;</phrase> <phrase role="comment">// So captures change actual pointed iterator value.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">call_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">is_random_access_iterator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Iter</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">([]</phrase> <phrase role="special">(</phrase><phrase role="keyword">auto</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="keyword">auto</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="comment">// C++14 generic lambda.</phrase>
            <phrase role="identifier">out</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"random iterator"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
            <phrase role="special">*</phrase><phrase role="identifier">p</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
        <phrase role="special">},</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
    <phrase role="special">).</phrase><phrase role="keyword">template</phrase> <phrase role="identifier">else_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">is_bidirectional_iterator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Iter</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">([]</phrase> <phrase role="special">(</phrase><phrase role="keyword">auto</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="keyword">auto</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">out</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"bidirectional iterator"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">while</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">--)</phrase> <phrase role="special">++*</phrase><phrase role="identifier">p</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">else</phrase> <phrase role="keyword">while</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">++)</phrase> <phrase role="special">--*</phrase><phrase role="identifier">p</phrase><phrase role="special">;</phrase>
        <phrase role="special">},</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
    <phrase role="special">).</phrase><phrase role="keyword">template</phrase> <phrase role="identifier">else_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">is_input_iterator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Iter</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">([]</phrase> <phrase role="special">(</phrase><phrase role="keyword">auto</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="keyword">auto</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">out</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"input iterator"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">while</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">--)</phrase> <phrase role="special">++*</phrase><phrase role="identifier">p</phrase><phrase role="special">;</phrase>
        <phrase role="special">},</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
    <phrase role="special">).</phrase><phrase role="identifier">else_</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">([]</phrase> <phrase role="special">(</phrase><phrase role="keyword">auto</phrase> <phrase role="identifier">false_</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">static_assert</phrase><phrase role="special">(</phrase><phrase role="identifier">false_</phrase><phrase role="special">,</phrase> <phrase role="string">"requires input iter"</phrase><phrase role="special">);</phrase>
        <phrase role="special">},</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">false_type</phrase><phrase role="special">())</phrase> <phrase role="comment">// Use constexpr value.</phrase>
    <phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        This implementation is much more concise, easy to read and maintain than
        the usual implementation of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">advance</phrase></computeroutput>
        that uses tag dispatching. <footnote id="boost_contract.advanced_topics.assertion_requirements__static_if_.f0">
        <para>
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">hana</phrase><phrase role="special">::</phrase><phrase role="identifier">if_</phrase></computeroutput> can also be used to emulate function
          scope <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase></computeroutput>
          with C++14 generic lambdas.
        </para>
        </footnote>
      </para>
    </section>
    <section id="boost_contract.advanced_topics.access_specifiers">
      <title><link linkend="boost_contract.advanced_topics.access_specifiers">Access
      Specifiers</link></title>
      <para>
        As seen so far, programmers are required to decorate their classes declaring
        extra members that are internally used by this library to check contracts:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput> member functions (used
            to check class invariants, see also <link linkend="boost_contract.tutorial.class_invariants">Class
            Invariants</link>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput> member
            type declared via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
            (used to implement subcontracting, see also <link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
            Function Overrides</link>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override_</phrase><phrase role="special">...</phrase></computeroutput>
            member types declared via <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>,
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>,
            and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDES">BOOST_CONTRACT_OVERRIDES</link></computeroutput>
            (used to implement subcontracting for overriding functions, see also
            <link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
            Function Overrides</link>). <footnote id="boost_contract.advanced_topics.access_specifiers.f0">
            <para>
              <emphasis role="bold">Rationale:</emphasis> The internals of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override_</phrase><phrase role="special">...</phrase></computeroutput>
              type generated by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
              use names reserved by this library to users should not actually use
              such a type even when it is defined <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>.
              (On a related note, in theory using C++14 generic lambdas, the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput> macro
              could be re-implemented in a way so it can be expanded at function
              scoped, instead of class scoped.)
            </para>
            </footnote>
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        In general, these members must be declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>
        in the user class in order for this library to access them. <footnote id="boost_contract.advanced_topics.access_specifiers.f1">
        <para>
          There is some variability among compiler implementations: the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput> member type needs to be declared
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput> on all MSVC, GCC, ang
          CLang; the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">invariant</phrase></computeroutput> and
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">static_invariant</phrase></computeroutput> member
          functions need to be declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>
          on MSVC, but not on GCC and CLang; the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">override_</phrase><phrase role="special">...</phrase></computeroutput> member types do not have to be declared
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput> on any compiler. In
          any case, declaring the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.access">boost::contract::access</link></computeroutput>
          class <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">friend</phrase></computeroutput> allows to always
          declare all these extra members <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">private</phrase></computeroutput>
          on all compilers.
        </para>
        </footnote> However, programmers might need to more precisely control the
        public members of their classes to prevent incorrect access of encapsulated
        members. All these members can be declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">private</phrase></computeroutput>
        as long as the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.access">boost::contract::access</link></computeroutput>
        class is declared as <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">friend</phrase></computeroutput>,
        for example (see also <ulink url="../../example/features/access.cpp"><literal moreinfo="none">access.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase> <phrase role="comment">// Friend `access` class so...</phrase>

    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// ...private bases.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">push_back</phrase><phrase role="special">)</phrase> <phrase role="comment">// ..private overrides.</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="comment">// ...private invariants.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_push_back</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vector</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        This technique is not used in most examples of this documentation only for
        brevity, but programmers are encouraged to use it in real code.
      </para>
    </section>
    <section id="boost_contract.advanced_topics.separate_body_implementation">
      <title><link linkend="boost_contract.advanced_topics.separate_body_implementation">Separate
      Body Implementation</link></title>
      <para>
        Contracts are part of the program specification and not of its implementation
        (see also <link linkend="boost_contract.contract_programming_overview.specification_and_implementation">Specification
        and Implementation</link>). However, this library uses function definitions
        to program the contracts so contract code appears together with the function
        implementation code. This is not ideal, but contract code programmed with
        this library must always appear at the very top of the function definition
        so programmers will easily be able to distinguish it from the rest of function
        implementation code (so this might not be real problem in practise).
      </para>
      <para>
        In some cases, it might be desirable to completely separate the contract
        code (function specification) from the function body code (function implementation).
        For example, this could be necessary for software that ships only header
        files and pre-compiled source code to its users (notably, that cannot be
        done for template code in C++). If the contracts are programmed in the function
        definitions that are pre-compiled with the source code, users will not be
        able to inspect the contract code to understand semantics and usage of the
        functions (again, this might not be a real problem in practice for example
        if contract code is already somehow extracted from the source code and presented
        as part of the documentation of the shipped software).
      </para>
      <para>
        In such cases, the function implementation can be programmed in an extra
        <emphasis>body function</emphasis> (e.g., named <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_body</phrase></computeroutput>) that is defined in the source code.
        The original function definition remains in the header files instead, it
        programs the contract and simply calls the extra body function. At the cost
        of programmers writing an extra function declaration for the body function,
        this technique allows to keep the contract code in header files while separating
        the body implementation code to source files (with the limitation that constructor
        member initialization lists must still be programmed in the header files
        because that is where the constructors are actually defined).
      </para>
      <para>
        For example, the following header file only contains function declarations
        and contract code (function specifications) and constructor member initializations
        (see also <ulink url="../../example/features/separate_body.hpp"><literal moreinfo="none">separate_body.hpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">array</phrase> <phrase role="special">:</phrase>
        <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">values_</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">MaxSize</phrase><phrase role="special">])</phrase> <phrase role="comment">// Still, member initializations must be here.</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
        <phrase role="identifier">constructor_body</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">);</phrase> <phrase role="comment">// Separate constructor body implementation.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">array</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase> <phrase role="comment">// Inv.</phrase>
        <phrase role="identifier">destructor_body</phrase><phrase role="special">();</phrase> <phrase role="comment">// Separate destructor body implementation.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
        <phrase role="identifier">push_back_body</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// Contracts in class declaration (above), but body implementations are not.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">constructor_body</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">destructor_body</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">push_back_body</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        Instead, the function bodies (function implementations) is programmed in
        a separate source file (see also <ulink url="../../example/features/separate_body.cpp"><literal moreinfo="none">separate_body.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">constructor_body</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">values_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">size_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">destructor_body</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">values_</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">push_back_body</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">values_</phrase><phrase role="special">[</phrase><phrase role="identifier">size_</phrase><phrase role="special">++]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The same technique can be used for non-member, private, and protected functions.
      </para>
      <note>
        <para>
          When contracts are programmed in a separate <literal moreinfo="none">.cpp</literal> files
          and also <emphasis>all</emphasis> these library headers are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase></computeroutput>d only from <literal moreinfo="none">.cpp</literal>
          files, then the <literal moreinfo="none">.cpp</literal> files can be compiled disabling
          specific contract checking (for example, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>,
          see <link linkend="boost_contract.advanced_topics.disable_contract_checking">Disable
          Contract Checking</link>). The user code that will link to these <literal moreinfo="none">.cpp</literal>
          files not be able to Then the code in these <literal moreinfo="none">.cpp</literal> files
          will always have such contract checking disabled even when linked to some
          other user code that might have been compiled with a different set of disable
          contracts (i.e., a different <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_NO_</phrase><phrase role="special">...</phrase></computeroutput> defined). This technique might be useful
          to ship a pre-compiled set of object files (e.g., for a library) that will
          never check some contracts (e.g., postconditions and exit invariants) regardless
          of the definition of the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_NO_</phrase><phrase role="special">...</phrase></computeroutput> macros used to compile code that uses
          such object files.
        </para>
        <para>
          On the contrary, if contracts are programmed in header files and this library
          headers are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase></computeroutput>d
          in header files that are being shipped, then end users enable or disables
          contracts of the shipped code by defining <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_NO_</phrase><phrase role="special">...</phrase></computeroutput> when they compiled the shipped header
          files as part of their code. This technique might be useful in other situations
          when programmers that ship code want instead to leave it up the their end
          users to decide which contracts in the shipped code should be checked at
          run-time.
        </para>
      </note>
    </section>
    <section id="boost_contract.advanced_topics.throw_on_failure">
      <title><link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
      on Failure</link></title>
      <para>
        If a condition checked using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        is <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput> or if code specified
        in preconditions, postconditions, and class invariants throws an exception,
        this library calls the <emphasis>contract failure handler</emphasis> functions
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::precondition_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::postcondition_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::entry_invariant_failure</computeroutput>,
        or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::exit_invariant_failure</computeroutput>
        respectively (in fact, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        simply expands to code that throws a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::assertion_failure</computeroutput>
        exception, see also <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
        Macros</link>).
      </para>
      <para>
        By default, the contract failure handler functions print a message to the
        standard error <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cerr</phrase></computeroutput> and then terminate the program calling
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase></computeroutput>. <footnote id="boost_contract.advanced_topics.throw_on_failure.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> In general, when a contract
          fails the only safe thing to do is to terminate the program execution (because
          the contract failure indicates a bug in the program, and in general the
          program is in a state for which no operation can be successfully performed,
          so the program should be stopped). Therefore, this library terminates the
          program by default. However, for specific applications, programmers could
          implement some fail-safe mechanism for which some mission-critical operation
          can always be performed upon handling failures so this library allows programmers
          to override the default contract failure handlers to fully customize how
          to handle contract failures.
        </para>
        </footnote> However, programmers can override the default contract failure
        handlers to perform any custom action on contract failure using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_precondition_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_postcondition_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_entry_invariant_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_exit_invariant_failure</computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_invariant_failure</computeroutput>
        (to set both entry and exit invariant failure handlers at once for convenience),
        or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::set_failure</computeroutput>
        (to set all failure handlers at once for convenience). For example (see also
        <ulink url="../../example/features/throw_on_failure.cpp"><literal moreinfo="none">throw_on_failure.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">void</phrase> <phrase role="identifier">throwing_handler</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">from</phrase> <phrase role="identifier">context</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">context</phrase> <phrase role="special">==</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">from_destructor</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Ignore exception because destructors should never throw.</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">clog</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">"destructor contract failed (ignored)"</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase> <phrase role="keyword">else</phrase> <phrase role="keyword">throw</phrase><phrase role="special">;</phrase> <phrase role="comment">// Re-throw (assertion_failure, too_large_error, etc.).</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">set_failure</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">throwing_handler</phrase><phrase role="special">);</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        Note that in order to comply with C++ and STL exception safety rules, destructors
        should never throw. This library passes a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::from</computeroutput>
        parameter to the contract failure handler functions that indicates if the
        contract failure occurred in a destructor, constructor, or function call.
        This way programmers can ensure to never throw from a destructor call (in
        the example above, contract failures from destructors are simply ignored
        even if that is probably never a safe thing to do in real code). <footnote id="boost_contract.advanced_topics.throw_on_failure.f1">
        <para>
          It is the responsibility of the programmers to decide how to handle contract
          failures from destructors when they reprogram the contract failure handlers
          to throw exceptions instead of terminating the program (given that C++
          and STL exception safety rules requires destructors to never throw). This
          is not a simple dilemma and it might be one more reason to terminate the
          program instead of throwing exceptions when contract assertions fail (as
          this library does by default).
        </para>
        </footnote>
      </para>
      <para>
        The contract assertions can be programmed to throw <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::assertion_failure</computeroutput>
        using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        (see also <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
        Macros</link>) or to throw any other exception using code similar to:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">if</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>error-condition</emphasis></literal><phrase role="special">)</phrase> <phrase role="keyword">throw</phrase> <literal moreinfo="none"><emphasis>exception-object</emphasis></literal><phrase role="special">;</phrase>
</programlisting>
      <para>
        For example (see also <ulink url="../../example/features/throw_on_failure.cpp"><literal moreinfo="none">throw_on_failure.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">struct</phrase> <phrase role="identifier">too_large_error</phrase> <phrase role="special">{};</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">cstring</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">cstring</phrase><phrase role="special">&lt;</phrase> <phrase role="special">\</phrase>
            <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="comment">/* implicit */</phrase> <phrase role="identifier">cstring</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">chars</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">cstring</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">chars</phrase><phrase role="special">);</phrase> <phrase role="comment">// Throw `assertion_failure`.</phrase>
            <phrase role="comment">// Or, throw user-defined exception.</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">strlen</phrase><phrase role="special">(</phrase><phrase role="identifier">chars</phrase><phrase role="special">)</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">)</phrase> <phrase role="keyword">throw</phrase> <phrase role="identifier">too_large_error</phrase><phrase role="special">();</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">{</phrase>

        <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
    </section>
    <section id="boost_contract.advanced_topics.disable_contract_checking">
      <title><link linkend="boost_contract.advanced_topics.disable_contract_checking">Disable
      Contract Checking</link></title>
      <para>
        Checking contracts adds run-time overhead and can slow down program execution
        (see also <link linkend="boost_contract.contract_programming_overview.benefits_and_costs">Benefits
        and Costs</link>). Therefore, programmers can define the following macros
        (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">-</phrase><phrase role="identifier">D</phrase></computeroutput>
        option in Clang and GCC, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">/</phrase><phrase role="identifier">D</phrase></computeroutput>
        option in MSVC, etc.) to instruct this library to not check specific set
        of contracts at run-time: <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput>
        (do not check preconditions), <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>
        (do not check postconditions), <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>
        (do not check invariants at call entry), <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>
        (do not check invariants at call exit), and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link></computeroutput>
        (do not check invariants at both call entry and exit). By default, none of
        these macros are defined so this library checks all contracts.
      </para>
      <para>
        For example, programmers could decide to check all contracts during early
        development builds, but later check only preconditions and maybe entry invariants
        for release builds by defining <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>.
      </para>
    </section>
    <section id="boost_contract.advanced_topics.disable_contract_compilation">
      <title><link linkend="boost_contract.advanced_topics.disable_contract_compilation">Disable
      Contract Compilation</link></title>
      <para>
        This library provides macros that can be used to disable compile-time overhead
        introduced by contracts but at the cost of manually programming <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput> statements around contract code.
        The authors of this library do not recommend to use this practice unless
        strictly necessary because it makes the contract code more verbose, less
        readable, and in most applications the compile-time overhead of contracts
        should not represent an issue (it should be sufficient to disable contract
        checking at run-time as indicated before).
      </para>
      <para>
        In any case, the following example illustrates how to completely disable
        contract code compilation for non-member functions (see also <ulink url="../../example/features/ifdef.cpp"><literal moreinfo="none">ifdef.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_ALL</phrase>
    <phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#endif</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">inc</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_POSTCONDITIONS</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
    <phrase role="preprocessor">#endif</phrase>
    <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_FUNCTIONS</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PRECONDITIONS</phrase>
                <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">numeric_limits</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">max</phrase><phrase role="special">());</phrase>
                <phrase role="special">})</phrase>
            <phrase role="preprocessor">#endif</phrase>
            <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_POSTCONDITIONS</phrase>
                <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_x</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_x</phrase><phrase role="special">);</phrase>
                <phrase role="special">})</phrase>
            <phrase role="preprocessor">#endif</phrase>
        <phrase role="special">;</phrase>
    <phrase role="preprocessor">#endif</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">++;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <para>
        The same is done to disable contract code complication for private and protected
        functions. For constructors, destructors, and public functions instead (see
        also <ulink url="../../example/features/ifdef.cpp"><literal moreinfo="none">ifdef.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">class</phrase> <phrase role="identifier">integers</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PRECONDITONS</phrase>
            <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">integers</phrase><phrase role="special">&gt;,</phrase> <phrase role="identifier">BASES</phrase>
        <phrase role="preprocessor">#else</phrase>
            <phrase role="identifier">BASES</phrase>
        <phrase role="preprocessor">#endif</phrase>
<phrase role="special">{</phrase>
    <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_ALL</phrase>
        <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#endif</phrase>

    <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</phrase>
        <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#endif</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_INVARIANTS</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
    <phrase role="preprocessor">#endif</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">integers</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">to</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PRECONDITIONS</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">integers</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">from</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">to</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">,</phrase>
        <phrase role="preprocessor">#endif</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">to</phrase> <phrase role="special">-</phrase> <phrase role="identifier">from</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_CONSTRUCTORS</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
                <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_POSTCONDITIONS</phrase>
                    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">())</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">to</phrase> <phrase role="special">-</phrase> <phrase role="identifier">from</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">));</phrase>
                    <phrase role="special">})</phrase>
                <phrase role="preprocessor">#endif</phrase>
            <phrase role="special">;</phrase>
        <phrase role="preprocessor">#endif</phrase>

        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">from</phrase><phrase role="special">;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">to</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">-</phrase> <phrase role="identifier">from</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">integers</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_DESTRUCTORS</phrase>
            <phrase role="comment">// Check invariants.</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="preprocessor">#endif</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase>
        <phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</phrase>
            <phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase>
        <phrase role="preprocessor">#endif</phrase>
    <phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_POSTCONDITIONS</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">;</phrase>
        <phrase role="preprocessor">#endif</phrase>
        <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                    <phrase role="identifier">override_push_back</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">integers</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
                <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PRECONDITIONS</phrase>
                    <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
                    <phrase role="special">})</phrase>
                <phrase role="preprocessor">#endif</phrase>
                <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_POSTCONDITIONS</phrase>
                    <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                        <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
                    <phrase role="special">})</phrase>
                    <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                    <phrase role="special">})</phrase>
                <phrase role="preprocessor">#endif</phrase>
            <phrase role="special">;</phrase>
        <phrase role="preprocessor">#endif</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</phrase>
        <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">push_back</phrase><phrase role="special">)</phrase>
    <phrase role="preprocessor">#endif</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        As shown by the examples above:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput>
            macro is defined by programmers and it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of preconditions, including constructor
            preconditions (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput>
            macro is defined by programmers and it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of postconditions, old value declarations,
            and old value assignments at body (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(...)</phrase></computeroutput>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link></computeroutput>
            macro is defined by programmers (or it will be automatically defined
            by this library if both <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>
            and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>
            are defined) and it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of class invariants (including static
            and volatile class invariants). Also the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>
            and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>
            macros are defined by programmers (or they will be both automatically
            defined by this library if <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link></computeroutput>
            is defined) but these macros are not directly used to disable contract
            code compilation (only contract code run-time checking).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_CONSTRUCTORS">BOOST_CONTRACT_NO_CONSTRUCTORS</link></computeroutput>
            macro is automatically defined by this library (a compile-time error
            will be reported if programmes try to manually define this macro) and
            it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of constructor contract guards.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_DESTRUCTORS">BOOST_CONTRACT_NO_DESTRUCTORS</link></computeroutput>
            macro is automatically defined by this library (a compile-time error
            will be reported if programmers try to manually define this macro) and
            it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of destructor contract guards.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS">BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</link></computeroutput>
            macro is automatically defined by this library (a compile-time error
            will be reported if programmers try to manually define this macro) and
            it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of public member function contract
            guards, base type <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">typedef</phrase></computeroutput>,
            extra <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput>
            function parameters, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
            declarations.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_FUNCTIONS">BOOST_CONTRACT_NO_FUNCTIONS</link></computeroutput>
            macro is automatically defined by this library (a compile-time error
            will be reported if programmers try to manually define this macro) and
            it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable compilation of contract guards for non-member functions
            as well as private and protected functions.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NO_ALL">BOOST_CONTRACT_NO_ALL</link></computeroutput>
            macro is automatically defined by this library (a compile-time error
            will be reported if programmers try to manually define this macro) and
            it can be used in <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifdef</phrase></computeroutput>
            statements to disable <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.access">boost::contract::access</link></computeroutput>
            friendship declarations and also inclusions of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="header.boost.contract_hpp">boost/contract.hpp</link></computeroutput>
            (some of the other macros listed here can be used to selectively disable
            inclusion of <literal moreinfo="none">boost/contract/*.hpp</literal> headers when they
            are used instead of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="header.boost.contract_hpp">boost/contract.hpp</link></computeroutput>.)
          </simpara>
        </listitem>
      </itemizedlist>
    </section>
    <section id="boost_contract.advanced_topics.no_macros__no_c__11_">
      <title><link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
      Macros (No C++11)</link></title>
      <para>
        It is possible to specify contracts without using this library macros and
        programming the related code manually instead (a part from <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>,
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDES">BOOST_CONTRACT_OVERRIDES</link></computeroutput>,
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>
        that cannot be programmed manually).
      </para>
      <para>
        Some of this library macros are variadic macros, others are not (see below).
        Variadic macros were officially added to the language since C++11 but most
        compilers have been supporting variadic macros as an extension for a long
        time, plus essentially all compilers that support C++11 lambda functions
        also support C++11 variadic macros (and this library might rarely be used
        without the convenience of C++11 lambda functions, see also <link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
        Lambda Functions</link>). Therefore, the following can be considered mainly
        a curiosity because programmers should seldom need to use this library without
        using its macros.
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.no_macros__no_c__11_.h0">
        <phrase id="boost_contract.advanced_topics.no_macros__no_c__11_.overrides"/><link linkend="boost_contract.advanced_topics.no_macros__no_c__11_.overrides">Overrides</link>
      </bridgehead>
      <para>
        As shown in <link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
        Function Overrides</link> and <link linkend="boost_contract.advanced_topics.named_overrides">Named
        Overrides</link>, this library provides the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link></computeroutput>
        macros to program contracts for overriding public functions. These macros
        cannot be programmed manually but they are not variadic macros so programmers
        should be able to use them on all C++ compilers. <footnote id="boost_contract.advanced_topics.no_macros__no_c__11_.f0">
        <para>
          <emphasis role="bold">Rationale:</emphasis> These macros expand SFINAE-based
          introspection templates that cannot be reasonably programmed by users (that
          remains the case even if C++14 generic lambdas were to be used here).
        </para>
        </footnote> The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDES">BOOST_CONTRACT_OVERRIDES</link></computeroutput>
        macro is a variadic macro instead but programmes can manually repeat the
        non-variadic macro <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput>
        for each overriding public function name on compilers that do not support
        variadic macros.
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.no_macros__no_c__11_.h1">
        <phrase id="boost_contract.advanced_topics.no_macros__no_c__11_.assertions__not_variadic_"/><link linkend="boost_contract.advanced_topics.no_macros__no_c__11_.assertions__not_variadic_">Assertions
        (Not Variadic)</link>
      </bridgehead>
      <para>
        As shown in <link linkend="boost_contract.tutorial.preconditions">Preconditions</link>,
        <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>,
        <link linkend="boost_contract.tutorial.class_invariants">Class Invariants</link>,
        etc. this library provides the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        macro to assert contract conditions. This is not a variadic macro and programmers
        should be able to use it on all C++ compilers. However, the macro invocation
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase></computeroutput><literal moreinfo="none"><emphasis>condition</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">)</phrase></computeroutput> simply expands to code equivalent to the
        following:
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">if</phrase><phrase role="special">(!</phrase><literal moreinfo="none"><emphasis>condition</emphasis></literal><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">throw</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">assertion_failure</phrase><phrase role="special">(</phrase><phrase role="identifier">__FILE__</phrase><phrase role="special">,</phrase> <phrase role="identifier">__LINE__</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">BOOST_PP_STRINGIZE</phrase><phrase role="special">(</phrase><literal moreinfo="none"><emphasis>condition</emphasis></literal><phrase role="special">));</phrase>
<phrase role="special">}</phrase>
</programlisting>
      <para>
        That is because this library considers any exception thrown from within preconditions,
        postconditions, and class invariants as a contract failure and reports it
        calling the related contract failure handler (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::precondition_failure</computeroutput>,
        etc., see also <link linkend="boost_contract.advanced_topics.throw_on_failure">Throw
        on Failure</link>). In fact, if there is a need for it, programmers can always
        program contract assertions that throw an exception as follow (see <ulink url="../../example/features/throw_on_failure.cpp"><literal moreinfo="none">throw_on_failure.cpp</literal></ulink>
        for an example):
      </para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">if</phrase><phrase role="special">(!</phrase><literal moreinfo="none"><emphasis>condition</emphasis></literal><phrase role="special">)</phrase> <phrase role="keyword">throw</phrase> <literal moreinfo="none"><emphasis>exception-type</emphasis></literal><phrase role="special">(...);</phrase>
</programlisting>
      <para>
        However, using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput>
        always allows this library to show detailed information about the assertion
        code, its file and line number, etc.
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.no_macros__no_c__11_.h2">
        <phrase id="boost_contract.advanced_topics.no_macros__no_c__11_.base_types__variadic_"/><link linkend="boost_contract.advanced_topics.no_macros__no_c__11_.base_types__variadic_">Base
        Types (Variadic)</link>
      </bridgehead>
      <para>
        As shown in <link linkend="boost_contract.tutorial.base_classes__subcontracting_">Base
        Classes</link>, this library provides the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
        variadic macro to declare the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput>
        member type that lists all public bases of a derived class. Programmers can
        also declare <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput> without
        using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
        at the cost of writing a bit more code manually, for example (see also <ulink url="../../example/features/base_types_no_macros.cpp"><literal moreinfo="none">base_types_no_macros.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">mpl</phrase><phrase role="special">/</phrase><phrase role="identifier">vector</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">chars</phrase> <phrase role="special">:</phrase>
    <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">chars</phrase><phrase role="special">&gt;,</phrase>
    <phrase role="keyword">public</phrase> <phrase role="identifier">unique_chars</phrase><phrase role="special">,</phrase>
    <phrase role="keyword">public</phrase> <phrase role="keyword">virtual</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;,</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">protected</phrase> <phrase role="identifier">has_size</phrase><phrase role="special">,</phrase>
    <phrase role="keyword">private</phrase> <phrase role="identifier">has_empty</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// Program `base_types` without macros (list only public bases).</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unique_chars</phrase><phrase role="special">,</phrase> <phrase role="identifier">pushable</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">base_types</phrase></computeroutput> member type
        must be a <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase></computeroutput>
        and it must list <emphasis>only</emphasis> <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">public</phrase></computeroutput>
        base classes (because only public bases subcontract, see also <link linkend="boost_contract.contract_programming_overview.function_calls">Function
        Calls</link>). If the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
        macro is not used, it is the responsibility of the programmers to maintain
        the correct list of bases in the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase></computeroutput> each time the derived class inheritance
        list changes (this might complicate maintenance). In general, it is recommended
        to use the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput>
        macro if possible.
      </para>
      <bridgehead renderas="sect4" id="boost_contract.advanced_topics.no_macros__no_c__11_.h3">
        <phrase id="boost_contract.advanced_topics.no_macros__no_c__11_.old_values__variadic_"/><link linkend="boost_contract.advanced_topics.no_macros__no_c__11_.old_values__variadic_">Old
        Values (Variadic)</link>
      </bridgehead>
      <para>
        As shown in <link linkend="boost_contract.tutorial.old_values">Old Values</link>,
        this library provides the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        variadic macro to assign old value copies. Programmers can also assign old
        values without using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        at the cost of writing a bit more code manually, for example (see also <ulink url="../../example/features/old_no_macros.cpp"><literal moreinfo="none">old_no_macros.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Program old value instead of using `OLDOF(size())` macro.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">make_old</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">copy_old</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">?</phrase>
                    <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">null_old</phrase><phrase role="special">())</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* ... */</phrase>
</programlisting>
      </para>
      <para>
        The ternary operator <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">copy_old</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">)</phrase>
        <phrase role="special">?</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">null_old</phrase><phrase role="special">()</phrase></computeroutput> must be used here to avoid evaluating and
        copying the old value expression <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">size</phrase><phrase role="special">()</phrase></computeroutput> when <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.copy_old_id466837">boost::contract::copy_old</link></computeroutput>
        returns <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">false</phrase></computeroutput> because old values
        are not being copied (postcondition checking is disable at run-time, an overridden
        virtual function call is not checking postconditions yet, etc.). The enclosing
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.make_old_id465946">boost::contract::make_old</link></computeroutput>
        copies the old value expression and creates an old value pointer, while
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.null_old">boost::contract::null_old</link></computeroutput>
        indicates when a null old value pointer should be created.
      </para>
      <para>
        The <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.make_old_id465946">boost::contract::make_old</link></computeroutput>
        and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.copy_old_id466837">boost::contract::copy_old</link></computeroutput>
        functions are used exactly as above but without the extra <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">v</phrase></computeroutput>
        parameter when they are called from within non-virtual functions (see also
        <link linkend="boost_contract.tutorial.public_function_overrides__subcontracting_">Public
        Function Overrides</link>). The old value pointer returned by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.make_old_id465946">boost::contract::make_old</link></computeroutput>
        can be assigned to either <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput>
        or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude">boost::contract::noncoyable_old_ptr</computeroutput>
        (see also <link linkend="boost_contract.advanced_topics.old_value_requirements">Old
        Value Requirements</link>).
      </para>
      <para>
        In general, it is recommended to use the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>
        macro if possible.
      </para>
    </section>
    <section id="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">
      <title><link linkend="boost_contract.advanced_topics.no_lambda_functions__no_c__11_">No
      Lambda Functions (No C++11)</link></title>
      <para>
        This section shows how to use this library without C++11 lambda functions.
        This has some advantages:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            It allows to use this library on compilers that do not support C++11
            lambda functions (essentially most C++03 compilers can be used, see
            <link linkend="boost_contract.advanced_topics.no_macros__no_c__11_">No
            Macros</link> to also avoid using variadic macros).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Contract functions (see the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_precondition</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_old</phrase></computeroutput>, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_postcondition</phrase></computeroutput> functions in the example
            below) can be programmed to fully enforce constant-correctness and other
            contract requirements at compile-time (see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>).
            <footnote id="boost_contract.advanced_topics.no_lambda_functions__no_c__11_.f0">
            <para>
              If C++ allowed lambda functions to capture variables by constant reference
              (e.g., <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[</phrase><phrase role="keyword">const</phrase><phrase role="special">&amp;]</phrase> <phrase role="special">(...)</phrase>
              <phrase role="special">{</phrase> <phrase role="special">...</phrase>
              <phrase role="special">}</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[</phrase><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase>
              </computeroutput><literal moreinfo="none"><emphasis>variable-name</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">]</phrase> <phrase role="special">(...)</phrase> <phrase role="special">{</phrase> <phrase role="special">...</phrase> <phrase role="special">}</phrase></computeroutput>) also lambdas could be used to program
              contract functors that fully enforce <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>
              at compile-time. Note that C++11 lambda allows to capture variables
              by value (<computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[=]</phrase> <phrase role="special">(...)</phrase>
              <phrase role="special">{</phrase> <phrase role="special">...</phrase>
              <phrase role="special">}</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">[</phrase></computeroutput><literal moreinfo="none"><emphasis>variable-name</emphasis></literal><computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">]</phrase> <phrase role="special">(...)</phrase> <phrase role="special">{</phrase> <phrase role="special">...</phrase> <phrase role="special">}</phrase></computeroutput>), these value captures are <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> (unless the lambda is explicitly
              declared <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">mutable</phrase></computeroutput>) but
              they are not suitable to program postconditions using this library
              (see <link linkend="boost_contract.tutorial.postconditions">Postconditions</link>),
              plus they introduce an extra copy that might be too expensive in general.
            </para>
            </footnote>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Contracts are separated from function body implementations (see also
            <link linkend="boost_contract.contract_programming_overview.specification_and_implementation">Specification
            and Implementation</link> and <link linkend="boost_contract.advanced_topics.separate_body_implementation">Separate
            Body Implementation</link>).
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        However, not using C++11 lambda functions comes to the significant cost of
        having to manually write a great deal of extra code to program the contract
        functions, for example (see also <ulink url="../../example/features/no_lambdas.hpp"><literal moreinfo="none">no_lambdas.hpp</literal></ulink>
        and <ulink url="../../example/features/no_lambdas.cpp"><literal moreinfo="none">no_lambdas.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">array</phrase> <phrase role="special">:</phrase>
        <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">constructor_precondition</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">constructor_old</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;&amp;</phrase>
                <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">constructor_postcondition</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">array</phrase><phrase role="special">();</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">destructor_old</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase>
                <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">destructor_postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase>
                <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">push_back_precondition</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">push_back_old</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">push_back_postcondition</phrase><phrase role="special">(</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>

    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">instances</phrase><phrase role="special">();</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">values_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase>
            <phrase role="special">&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">,</phrase> <phrase role="identifier">count</phrase><phrase role="special">)),</phrase>
    <phrase role="identifier">values_</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">MaxSize</phrase><phrase role="special">])</phrase> <phrase role="comment">// Member initializations can be here.</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_old</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">ref</phrase><phrase role="special">(</phrase><phrase role="identifier">old_instances</phrase><phrase role="special">)))</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_postcondition</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">old_instances</phrase><phrase role="special">)))</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">values_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">size_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
    <phrase role="special">++</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::~</phrase><phrase role="identifier">array</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor_old</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">ref</phrase><phrase role="special">(</phrase><phrase role="identifier">old_instances</phrase><phrase role="special">)))</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor_postcondition</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">old_instances</phrase><phrase role="special">)))</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">values_</phrase><phrase role="special">;</phrase>
    <phrase role="special">--</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back_precondition</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">))</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back_old</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">),</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">ref</phrase><phrase role="special">(</phrase><phrase role="identifier">old_size</phrase><phrase role="special">)))</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back_postcondition</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">old_size</phrase><phrase role="special">)))</phrase>
    <phrase role="special">;</phrase>

    <phrase role="identifier">values_</phrase><phrase role="special">[</phrase><phrase role="identifier">size_</phrase><phrase role="special">++]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">unsigned</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="comment">// Check invariants.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="comment">// Check static invariants.</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&gt;();</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">instances_</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
</programlisting>
      </para>
      <para>
        If programmers also want to fully enforce all contract programming constant-correctness
        requirements at compile-time, they should follow these rules when programming
        the contract functions (see also <link linkend="boost_contract.contract_programming_overview.constant_correctness">Constant-Correctness</link>):
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            Precondition functions (i.e., the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_precondition</phrase></computeroutput> functions in the example
            above) can take their arguments either by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
            value or by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>,
            and they should be either <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
            or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> member functions.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Postcondition functions (i.e., the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_postcondition</phrase></computeroutput> functions in the example
            above) should take their arguments by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput>, and they should be either <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput>
            member functions.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Old value functions (i.e., the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">...</phrase><phrase role="identifier">_old</phrase></computeroutput> functions in the example above)
            should take their arguments by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput> a part from old value pointers that
            should be taken by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&amp;</phrase></computeroutput>
            (so only old value pointers can be modified), and they should be either
            <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput> or <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase></computeroutput> member functions.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Constructor precondition and old value functions should be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput> (because constructor preconditions
            and old values cannot access the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>,
            see also <link linkend="boost_contract.contract_programming_overview.constructor_calls">Constructor
            Calls</link>).
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Destructor postcondition functions should be <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static</phrase></computeroutput>
            (because destructor postconditions cannot access the object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>, see also <link linkend="boost_contract.contract_programming_overview.destructor_calls">Destructor
            Calls</link>).
          </simpara>
        </listitem>
      </itemizedlist>
      <para>
        Note that the extra contract functions also allow to program only the contract
        code in the header file (see also <link linkend="boost_contract.contract_programming_overview.specification_and_implementation">Specification
        and Implementation</link>). All function body implementation code was instead
        programmed in the source file (including the constructor member initialization
        list, that could not be done with the technique shown in <link linkend="boost_contract.advanced_topics.separate_body_implementation">Separate
        Body Implementation</link>). <footnote id="boost_contract.advanced_topics.no_lambda_functions__no_c__11_.f1">
        <para>
          In this example, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">bind</phrase></computeroutput> was
          used to generate nullary functors from the contract functions. As always
          with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">bind</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">cref</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">ref</phrase></computeroutput>
          must be used to bind arguments by <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase></computeroutput> and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">&amp;</phrase></computeroutput>
          respectively, plus it might be necessary to explicitly <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">static_cast</phrase></computeroutput>
          the function pointer passed to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">bind</phrase></computeroutput>
          in case the bound function name is overloaded.
        </para>
        </footnote> Also note that the contract functions can always be declared
        <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">private</phrase></computeroutput> if programmers need
        to exactly control the public members of the class (this was not done in
        this example only for brevity, see also __Access__).
      </para>
      <para>
        Alternatively, on compilers that do not support C++11 lambda functions but
        that support type-of (either native as an extension or via emulation, these
        should be most recent C++03 compilers), <ulink url="http://www.boost.org/doc/libs/release/libs/local_function/doc/html/index.html">Boost.LocalFunction</ulink>
        can be used to program the contract functions, for example (see also <ulink url="../../example/features/no_lambdas_local_func.cpp"><literal moreinfo="none">no_lambda_local_func.cpp</literal></ulink>):
      </para>
      <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">local_function</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">array</phrase> <phrase role="special">:</phrase>
        <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">constructor_pre</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase>
                <phrase role="special">&amp;</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_pre</phrase><phrase role="special">,</phrase> <phrase role="identifier">count</phrase><phrase role="special">)),</phrase>
        <phrase role="identifier">values_</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">MaxSize</phrase><phrase role="special">])</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">old</phrase><phrase role="special">)</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase> <phrase role="identifier">this_</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase>
                <phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">this_</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">this_</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">post</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
                <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">old</phrase><phrase role="special">).</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">post</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">values_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">();</phrase>
        <phrase role="identifier">size_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
        <phrase role="special">++</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">array</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase> <phrase role="identifier">this_</phrase><phrase role="special">,</phrase> <phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">old_instances</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">this_</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">instances</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">old</phrase><phrase role="special">)</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_instances</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">array</phrase><phrase role="special">::</phrase><phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_instances</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">post</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
                <phrase role="special">.</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">old</phrase><phrase role="special">).</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">post</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">values_</phrase><phrase role="special">;</phrase>
        <phrase role="special">--</phrase><phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">unsigned</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase> <phrase role="identifier">this_</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">this_</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">pre</phrase><phrase role="special">)</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase> <phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase> <phrase role="identifier">this_</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">this_</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">old</phrase><phrase role="special">)</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_TPL</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase> <phrase role="identifier">this_</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">bind</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_size</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">this_</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase> <phrase role="identifier">BOOST_LOCAL_FUNCTION_NAME_TPL</phrase><phrase role="special">(</phrase><phrase role="identifier">post</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
                <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase><phrase role="identifier">pre</phrase><phrase role="special">).</phrase><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">old</phrase><phrase role="special">).</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">post</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">values_</phrase><phrase role="special">[</phrase><phrase role="identifier">size_</phrase><phrase role="special">++]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">instances</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check static invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">array</phrase><phrase role="special">&gt;();</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">values_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">instances_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">array</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">MaxSize</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">instances_</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
</programlisting>
      </para>
      <para>
        This code is somewhat less verbose than the previous example (about 30% less
        lines of code) but the contract code is hard to ready.
      </para>
      <para>
        Other libraries could also be used to program the contract functions without
        C++11 lambda functions (Boost.Lambda, Boost.Fusion, etc.) but like the techniques
        shown above, they will all result in contract code more verbose, or harder
        to read and maintain than the contract code programmed using C++11 lambda
        functions. Therefore, authors think this library is most useful when used
        together with C++11 lambda functions.
      </para>
    </section>
  </section>
  <section id="reference"><title>Reference</title><section id="header.boost.contract_hpp"><title>Header &lt;<ulink url="../..//boost/contract.hpp">boost/contract.hpp</ulink>&gt;</title><para>Include all header files required by this library at once (for convenience). </para><para>All headers file <computeroutput>boost/contract/*.hpp</computeroutput> are independent from one another and can be included one-by-one to reduce the amount of the code of this library being compiled in user code (but that should not make a significant difference). Instead the headers <computeroutput>boost/contract/core/*.hpp</computeroutput> are not independent from other library headers and they are automatically included by the <computeroutput>boost/contract/*.hpp</computeroutput> headers (so the <computeroutput>boost/contract/core/*.hpp</computeroutput> headers are usually not directly included by programmers).</para><para>All files under the <computeroutput>boost/contract/detail/</computeroutput> directory, names within the <computeroutput>boost::contract::detail</computeroutput> namespace, names prefixed with <computeroutput>boost_contract_detail</computeroutput>... and <computeroutput>BOOST_CONTRACT_DETAIL</computeroutput>... (in any namesapce, including user's code) are reserved for internal use of this library and should never be used directly by programmers. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.getting_started"> Getting Started</link> </para></para>
</para>
</section>
<section id="header.boost.contract.assert_hpp"><title>Header &lt;<ulink url="../..//boost/contract/assert.hpp">boost/contract/assert.hpp</ulink>&gt;</title><para>Facility to assert contract conditions. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude">

<link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link>(condition)</synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_ASSERT"><refmeta><refentrytitle>Macro BOOST_CONTRACT_ASSERT</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_ASSERT</refname><refpurpose>Preferred way to assert contract conditions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.assert_hpp">boost/contract/assert.hpp</link>&gt;

</phrase>BOOST_CONTRACT_ASSERT(condition)</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Any exception thrown from within a preconditions, postcondition, or class invariant functor is interpreted by this library as a contract failure. Therefore, users can program contract assertions manually throwing exceptions from the precondition, postcondition, or invariant functions when the asserted condition is checked to be <computeroutput>false</computeroutput> (this library will then call the appropriate contract failure handler  <computeroutput>boost::contract::precondition_failure</computeroutput>, etc.). However, using this macro is preferred because in case <computeroutput>condition</computeroutput> is checked to be <computeroutput>false</computeroutput>, this macro expands to code that throws  <computeroutput>boost::contract::assertion_failure</computeroutput> with the correct assertion file name (<computeroutput>__FILE__</computeroutput>), line number (<computeroutput>__LINE__</computeroutput>), and asserted condition source code so to produce an informative error message.</para><para>This macro is not a variadic macro. Therefore, if <computeroutput>condition</computeroutput> contains commas not already wrapped by round parenthesis, it needs to be wrapped by an outer set of extra round parenthesis <computeroutput>BOOST_CONTRACT_ASSERT((...))</computeroutput> (as usual with C++ non-variadic macro parameters). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
              list-presentation="table"
            ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                      list-presentation="table"
                    ?><varlistentry><term><computeroutput>condition</computeroutput></term><listitem><para>The contract condition being checked. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.base_types_hpp"><title>Header &lt;<ulink url="../..//boost/contract/base_types.hpp">boost/contract/base_types.hpp</ulink>&gt;</title><para>Facility to specify inheritance form base classes (to support subcontracting). </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude">

<link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link>(...)</synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_BASE_TYPES"><refmeta><refentrytitle>Macro BOOST_CONTRACT_BASE_TYPES</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_BASE_TYPES</refname><refpurpose>Used to program a <computeroutput>typedef</computeroutput> listing the bases of a derived class. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.base_types_hpp">boost/contract/base_types.hpp</link>&gt;

</phrase>BOOST_CONTRACT_BASE_TYPES(...)</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>In order to support subcontracting, a derived class that specifies contracts for one or more overriding public function must declare a <computeroutput>typedef</computeroutput> named  <computeroutput><link linkend="BOOST_CONTRACT_BASE_TYPEDEF">BOOST_CONTRACT_BASE_TYPEDEF</link></computeroutput> using this macro. This <computeroutput>typedef</computeroutput> must be <computeroutput>public</computeroutput> unless <computeroutput><link linkend="boost.contract.access">boost::contract::access</link></computeroutput> is used.</para><para>This is a variadic macro. On compilers that do not support variadic macros, the base classes <computeroutput>typedef</computeroutput> can be programmed manually without using this macro (see  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
              list-presentation="table"
            ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                      list-presentation="table"
                    ?><varlistentry><term><computeroutput>...</computeroutput></term><listitem><para>Comma separated list of base classes. Each listed base must explicitly list its access specifier <computeroutput>public</computeroutput>, <computeroutput>protected</computeroutput>, or <computeroutput>private</computeroutput>, and <computeroutput>virtual</computeroutput> if present (this not always required in C++ instead). There is an intrinsic limit around 20 on the maximum number of supported bases (because of similar limits for some Boost libraries like Boost.MPL internally used by this library). </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.call_if_hpp"><title>Header &lt;<ulink url="../..//boost/contract/call_if.hpp">boost/contract/call_if.hpp</ulink>&gt;</title><para>Statically disable compilation and execution of functor calls. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Then<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ThenResult <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> 
      <phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">;</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id461419">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">false</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id461686">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ThenResult<phrase role="special">&gt;</phrase> 
      <phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id461787">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">ThenResult</phrase><phrase role="special">&gt;</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id462051">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">Cond</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase> <phrase role="special">&gt;</phrase> <link linkend="boost.contract.call_if_c"><phrase role="identifier">call_if_c</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Then</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">Cond</phrase><phrase role="special">::</phrase><phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase> <phrase role="special">&gt;</phrase> <link linkend="boost.contract.call_if"><phrase role="identifier">call_if</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Then</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Check<phrase role="special">&gt;</phrase> <phrase role="keyword">bool</phrase> <link linkend="boost.contract.check_if_c"><phrase role="identifier">check_if_c</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Check</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Check<phrase role="special">&gt;</phrase> <phrase role="keyword">bool</phrase> <link linkend="boost.contract.check_if"><phrase role="identifier">check_if</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Check</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if_statement"><refmeta><refentrytitle>Struct template call_if_statement</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if_statement</refname><refpurpose>Class template to select compilation and execution of functor calls via a static boolean condition. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Then<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ThenResult <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> 
<phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement">call_if_statement</link> <phrase role="special">{</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This class template has no members because it is never used directly, it is only used via its specializations.</para><para>Usually this class template is instantiated only via the return value of  <computeroutput><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput> and <computeroutput><link linkend="boost.contract.call_if_c">boost::contract::call_if_c</link></computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">bool</phrase> Cond</literallayout></para><para><para>Static boolean condition selecting which functor call to compile and execute. </para></para></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> Then</literallayout></para><para><para>Type of functor to call when the static condition if true. </para></para></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> ThenResult <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase></literallayout></para><para><para>Return type of then-branch functor call. </para></para></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if_statement_id461419"><refmeta><refentrytitle>Struct template call_if_statement&lt;false, Then, unspecified&gt;</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if_statement&lt;false, Then, unspecified&gt;</refname><refpurpose>Template specialization to handle false static conditions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
<phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id461419">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">false</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
  <phrase role="comment">// <link linkend="boost.contract.call_if_statement_id461419construct-copy-destruct">construct/copy/destruct</link></phrase>
  <phrase role="keyword">explicit</phrase> <link linkend="id461660-bb"><phrase role="identifier">call_if_statement</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id461479-bb">public member functions</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Else<phrase role="special">&gt;</phrase> <phrase role="identifier">result_of</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">Else</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">&gt;</phrase><phrase role="special">::</phrase><phrase role="identifier">type</phrase> <link linkend="id461482-bb"><phrase role="identifier">else_</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Else</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">ElseIfCond</phrase><phrase role="special">,</phrase> <phrase role="identifier">ElseIfThen</phrase> <phrase role="special">&gt;</phrase> <link linkend="id461540-bb"><phrase role="identifier">else_if_c</phrase></link><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">ElseIfCond</phrase><phrase role="special">::</phrase><phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">ElseIfThen</phrase> <phrase role="special">&gt;</phrase> 
    <link linkend="id461602-bb"><phrase role="identifier">else_if</phrase></link><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This one specialization handles all else-branch functor calls (whether they return <computeroutput>void</computeroutput> or not).</para><para>Usually this class template is instantiated only via the return value of  <computeroutput><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput> and <computeroutput><link linkend="boost.contract.call_if_c">boost::contract::call_if_c</link></computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> Then</literallayout></para><para><para>Type of functor to call when the static condition if true. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.call_if_statement_id461419construct-copy-destruct"/><computeroutput>call_if_statement</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">explicit</phrase> <anchor id="id461660-bb"/><phrase role="identifier">call_if_statement</phrase><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object with the then-branch functor. <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Then-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is false for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the return type of the other functor calls specified for this call-if object. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2><refsect2><title><anchor id="id461479-bb"/><computeroutput>call_if_statement</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Else<phrase role="special">&gt;</phrase> <phrase role="identifier">result_of</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">Else</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">&gt;</phrase><phrase role="special">::</phrase><phrase role="identifier">type</phrase> <anchor id="id461482-bb"/><phrase role="identifier">else_</phrase><phrase role="special">(</phrase><phrase role="identifier">Else</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify the else-branch functor. <para><note><para>The <computeroutput>result_of&lt;Else()&gt;::type</computeroutput> expression should be evaluated only when the static condition is already checked to be false (because <computeroutput>Else()</computeroutput> is required to compile only in that case). Thus, this result-of expression is evaluated lazily only in instantiations of this template. </para></note>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed in this case (because the if-statement static condition is <computeroutput>false</computeroutput> for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the return type of the other functor calls specified for this call-if object. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A copy of the value returned by the call to the else-branch functor <computeroutput>f()</computeroutput>. </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">ElseIfCond</phrase><phrase role="special">,</phrase> <phrase role="identifier">ElseIfThen</phrase> <phrase role="special">&gt;</phrase> <anchor id="id461540-bb"/><phrase role="identifier">else_if_c</phrase><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify an else-if-branch functor. <para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-if-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed if and only if <computeroutput>ElseIfCond</computeroutput> is <computeroutput>true</computeroutput> (because the if-statement static condition is <computeroutput>false</computeroutput> for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the return type of the other functor calls specified for this call-if object. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>ElseIfCond</computeroutput></term><listitem><para>Static boolean condition selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so the else statement and additional else-if statements can be specified if needed. Ultimately this will return the return value of the functor call being compiled and executed. </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">ElseIfCond</phrase><phrase role="special">::</phrase><phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">ElseIfThen</phrase> <phrase role="special">&gt;</phrase> 
  <anchor id="id461602-bb"/><phrase role="identifier">else_if</phrase><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify an else-if-branch functor. <para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-if-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed if and only if <computeroutput>ElseIfCond::value</computeroutput> is <computeroutput>true</computeroutput> (because the if-statement static condition is false for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the return type of the other functor calls specified for this call-if object. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>ElseIfCond</computeroutput></term><listitem><para>Static boolean nullary meta-function selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so the else statement and additional else-if statements can be specified if needed. Ultimately this will return the return value of the functor call being compiled and executed. </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if_statement_id461686"><refmeta><refentrytitle>Struct template call_if_statement&lt;true, Then, unspecified&gt;</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if_statement&lt;true, Then, unspecified&gt;</refname><refpurpose>Template specialization to dispatch between then-branch functor calls that return void and the ones that return non-void. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
<phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id461686">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> boost::contract::call_if_statement&lt; true, Then, result_of&lt; Then()&gt;::type &gt;
<phrase role="special">{</phrase>
  <phrase role="comment">// <link linkend="boost.contract.call_if_statement_id461686construct-copy-destruct">construct/copy/destruct</link></phrase>
  <phrase role="keyword">explicit</phrase> <link linkend="id461762-bb"><phrase role="identifier">call_if_statement</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Then</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>The base class is a call-if statement so the else and else-if statements can be specified if needed.</para><para>Usually this class template is instantiated only via the return value of  <computeroutput><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput> and <computeroutput><link linkend="boost.contract.call_if_c">boost::contract::call_if_c</link></computeroutput>. <note><para>The <computeroutput>result_of&lt;Then()&gt;::type</computeroutput> expression should be evaluated only when the static condition is already checked to be true (because <computeroutput>Then()</computeroutput> is required to compile only in that case). This template specialization introduces an extra level of indirection necessary for the proper lazy evaluation of this result-of expression. </para></note>
<para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> Then</literallayout></para><para><para>Type of functor to call when the static condition if true. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.call_if_statement_id461686construct-copy-destruct"/><computeroutput>call_if_statement</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">explicit</phrase> <anchor id="id461762-bb"/><phrase role="identifier">call_if_statement</phrase><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object with the then-branch functor. <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Then-branch nullary templated functor. The functor <computeroutput>f()</computeroutput> is compiled and called in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the return type of all other functor calls specified for this call-if object. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if_statement_id461787"><refmeta><refentrytitle>Struct template call_if_statement&lt;true, Then, ThenResult&gt;</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if_statement&lt;true, Then, ThenResult&gt;</refname><refpurpose>Template specialization to handle true static conditions for then-branch functor calls that do not return <computeroutput>void</computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ThenResult<phrase role="special">&gt;</phrase> 
<phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id461787">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">ThenResult</phrase><phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
  <phrase role="comment">// <link linkend="boost.contract.call_if_statement_id461787construct-copy-destruct">construct/copy/destruct</link></phrase>
  <phrase role="keyword">explicit</phrase> <link linkend="id462020-bb"><phrase role="identifier">call_if_statement</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Then</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id461851-bb">public member functions</link></phrase>
  <link linkend="id461854-bb"><phrase role="keyword">operator</phrase> <phrase role="identifier">ThenResult</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Else<phrase role="special">&gt;</phrase> <phrase role="identifier">ThenResult</phrase> <link linkend="id461864-bb"><phrase role="identifier">else_</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Else</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">ThenResult</phrase> <phrase role="special">&gt;</phrase> 
    <link linkend="id461908-bb"><phrase role="identifier">else_if_c</phrase></link><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">ThenResult</phrase> <phrase role="special">&gt;</phrase> 
    <link linkend="id461965-bb"><phrase role="identifier">else_if</phrase></link><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Usually this class template is instantiated only via the return value of  <computeroutput><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput> and <computeroutput><link linkend="boost.contract.call_if_c">boost::contract::call_if_c</link></computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> Then</literallayout></para><para><para>Type of functor to call when the static condition if true. </para></para></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> ThenResult</literallayout></para><para><para>Non-void return type of the then-branch functor call. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.call_if_statement_id461787construct-copy-destruct"/><computeroutput>call_if_statement</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">explicit</phrase> <anchor id="id462020-bb"/><phrase role="identifier">call_if_statement</phrase><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object with the then-branch functor. <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Then-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the <computeroutput>ThenResult</computeroutput> type. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2><refsect2><title><anchor id="id461851-bb"/><computeroutput>call_if_statement</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id461854-bb"/><phrase role="keyword">operator</phrase> <phrase role="identifier">ThenResult</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>This implicit type conversion returns a copy of the value returned by the call to the then-branch functor. </listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Else<phrase role="special">&gt;</phrase> <phrase role="identifier">ThenResult</phrase> <anchor id="id461864-bb"/><phrase role="identifier">else_</phrase><phrase role="special">(</phrase><phrase role="identifier">Else</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify the else-branch functor. <para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the <computeroutput>ThenResult</computeroutput> type. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A copy of the value returned by the call to the then-branch functor (because the else-branch functor call is not executed in this case). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">ThenResult</phrase> <phrase role="special">&gt;</phrase> 
  <anchor id="id461908-bb"/><phrase role="identifier">else_if_c</phrase><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify an else-if-branch functor. <para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-if-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the <computeroutput>ThenResult</computeroutput> type. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>ElseIfCond</computeroutput></term><listitem><para>Static boolean condition selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so the else statement and additional else-if statements can be specified if needed. Ultimately it will return the return value of the then-branch functor call in this case (because the if-statement static condition is true for this template specialization). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="identifier">ThenResult</phrase> <phrase role="special">&gt;</phrase> 
  <anchor id="id461965-bb"/><phrase role="identifier">else_if</phrase><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify an else-if-branch functor. <para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-if-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be the same as (or implicitly convertible to) the <computeroutput>ThenResult</computeroutput> type. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>ElseIfCond</computeroutput></term><listitem><para>Static boolean nullary meta-function selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so the else statement and additional else-if statements can be specified if needed. Ultimately it will return the return value of the then-branch functor call in this case (because the if-statement static condition is true for this template specialization). </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if_statement_id462051"><refmeta><refentrytitle>Struct template call_if_statement&lt;true, Then, void&gt;</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if_statement&lt;true, Then, void&gt;</refname><refpurpose>Template specialization to handle true static conditions for then-branch functor calls that return <computeroutput>void</computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
<phrase role="keyword">struct</phrase> <link linkend="boost.contract.call_if_statement_id462051">call_if_statement</link><phrase role="special">&lt;</phrase><phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> <phrase role="special">{</phrase>
  <phrase role="comment">// <link linkend="boost.contract.call_if_statement_id462051construct-copy-destruct">construct/copy/destruct</link></phrase>
  <phrase role="keyword">explicit</phrase> <link linkend="id462291-bb"><phrase role="identifier">call_if_statement</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Then</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id462107-bb">public member functions</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Else<phrase role="special">&gt;</phrase> <phrase role="keyword">void</phrase> <link linkend="id462111-bb"><phrase role="identifier">else_</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Else</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <link linkend="id462155-bb"><phrase role="identifier">else_if_c</phrase></link><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <link linkend="id462224-bb"><phrase role="identifier">else_if</phrase></link><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Usually this class template is instantiated only via the return value of  <computeroutput><link linkend="boost.contract.call_if">boost::contract::call_if</link></computeroutput> and <computeroutput><link linkend="boost.contract.call_if_c">boost::contract::call_if_c</link></computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> Then</literallayout></para><para><para>Type of functor to call when the static condition if true. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.call_if_statement_id462051construct-copy-destruct"/><computeroutput>call_if_statement</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">explicit</phrase> <anchor id="id462291-bb"/><phrase role="identifier">call_if_statement</phrase><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object with the then-branch functor. <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Then-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be <computeroutput>void</computeroutput> in this case (because the then-branch functor calls return <computeroutput>void</computeroutput> for this template specialization). </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2><refsect2><title><anchor id="id462107-bb"/><computeroutput>call_if_statement</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Else<phrase role="special">&gt;</phrase> <phrase role="keyword">void</phrase> <anchor id="id462111-bb"/><phrase role="identifier">else_</phrase><phrase role="special">(</phrase><phrase role="identifier">Else</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify the else-branch functor. <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be <computeroutput>void</computeroutput> in this case (because the then-branch functor calls return <computeroutput>void</computeroutput> for this template specialization). </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <anchor id="id462155-bb"/><phrase role="identifier">else_if_c</phrase><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify an else-if-branch functor. <para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-if-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be <computeroutput>void</computeroutput> in this case (because the then-branch functor calls return <computeroutput>void</computeroutput> for this template specialization). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>ElseIfCond</computeroutput></term><listitem><para>Static boolean condition selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so the else statement and additional else-if statements can be specified if needed. Ultimately it will return <computeroutput>void</computeroutput> in this case (because the then-branch functor calls return <computeroutput>void</computeroutput> for this template specialization). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> ElseIfCond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> ElseIfThen<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase><phrase role="special">,</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <anchor id="id462224-bb"/><phrase role="identifier">else_if</phrase><phrase role="special">(</phrase><phrase role="identifier">ElseIfThen</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Specify an else-if-branch functor. <para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Else-if-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is never compiled and executed in this case (because the if-statement static condition is true for this template specialization). The return type of <computeroutput>f()</computeroutput> must be <computeroutput>void</computeroutput> in this case (because the then-branch functor calls return <computeroutput>void</computeroutput> for this template specialization). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>ElseIfCond</computeroutput></term><listitem><para>Static boolean nullary meta-function selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so the else statement and additional else-if statements can be specified if needed. Ultimately it will return <computeroutput>void</computeroutput> in this case (because the then-branch functor calls return <computeroutput>void</computeroutput> for this template specialization). </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if_c"><refmeta><refentrytitle>Function template call_if_c</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if_c</refname><refpurpose>Select compilation and execution of functor calls via a static boolean condition. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">Cond</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">call_if_c</phrase><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Make a call-if object with the specified then-branch functor. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>



</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Then-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed if and only if <computeroutput>Cond</computeroutput> if <computeroutput>true</computeroutput>. The return type of other functor calls specified for this call-if statement (else-branches, else-if-branches, etc.) must be the same as (or implicitly convertible to) the return type of then-branch functor call <computeroutput>f()</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Cond</computeroutput></term><listitem><para>Static boolean condition selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so else and else-if statements can be specified if needed. Ultimately this will return the return value of the functor call being compiled and executed. </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.call_if"><refmeta><refentrytitle>Function template call_if</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::call_if</refname><refpurpose>Select compilation and execution of functor calls via a static boolean nullary meta-function. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Then<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.call_if_statement">call_if_statement</link><phrase role="special">&lt;</phrase> <phrase role="identifier">Cond</phrase><phrase role="special">::</phrase><phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">Then</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">call_if</phrase><phrase role="special">(</phrase><phrase role="identifier">Then</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Make a call-if object with the specified then-branch functor. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>



</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Then-branch nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed if and only if <computeroutput>Cond::value</computeroutput> if <computeroutput>true</computeroutput>. The return type of other functor calls specified for this call-if statement (else-branches, else-if-branches, etc.) must be the same as (or implicitly convertible to) the return type of then-branch functor call <computeroutput>f()</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Cond</computeroutput></term><listitem><para>Static boolean nullary meta-function selecting which functor call to compile and execute. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>A call-if statement so else and else-if statements can be specified if needed. Ultimately this will return the return value of the functor call being compiled and executed. </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.check_if_c"><refmeta><refentrytitle>Function template check_if_c</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::check_if_c</refname><refpurpose>Select compilation and execution of a boolean functor check via a static boolean condition. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Check<phrase role="special">&gt;</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">check_if_c</phrase><phrase role="special">(</phrase><phrase role="identifier">Check</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Compile and execute a boolean nullary functor call if and only if the specified static condition is true, otherwise trivially return <computeroutput>true</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>



</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Boolean nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed if and only if <computeroutput>Cond</computeroutput> is <computeroutput>true</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Cond</computeroutput></term><listitem><para>Static boolean condition selecting when the functor call should be compiled and executed. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>Boolean value returned by <computeroutput>f()</computeroutput> if the static condition if true, otherwise simply return <computeroutput>true</computeroutput> (i.e., check trivially passed). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.check_if"><refmeta><refentrytitle>Function template check_if</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::check_if</refname><refpurpose>Select compilation and execution of a boolean functor check via a static boolean nullary meta-function. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.call_if_hpp">boost/contract/call_if.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Cond<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Check<phrase role="special">&gt;</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">check_if</phrase><phrase role="special">(</phrase><phrase role="identifier">Check</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Compile and execute a boolean nullary functor call if and only if the specified static condition is true, otherwise trivially return <computeroutput>true</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>



</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Boolean nullary templated functor. The functor call <computeroutput>f()</computeroutput> is compiled and executed if and only if <computeroutput>Cond::value</computeroutput> is <computeroutput>true</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Cond</computeroutput></term><listitem><para>Static boolean nullary meta-function selecting when the functor call should be compiled and executed. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>Boolean value returned by <computeroutput>f()</computeroutput> if the static condition if true, otherwise simply return <computeroutput>true</computeroutput> (i.e., check trivially passed). </para></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.constructor_hpp"><title>Header &lt;<ulink url="../..//boost/contract/constructor.hpp">boost/contract/constructor.hpp</ulink>&gt;</title><para>Program contracts for constructors. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <link linkend="boost.contract.constructor_precondition">constructor_precondition</link><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link> <link linkend="boost.contract.constructor"><phrase role="identifier">constructor</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.constructor_precondition"><refmeta><refentrytitle>Class template constructor_precondition</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::constructor_precondition</refname><refpurpose>Program preconditions for constructors. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.constructor_hpp">boost/contract/constructor.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
<phrase role="keyword">class</phrase> <link linkend="boost.contract.constructor_precondition">constructor_precondition</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.constructor_preconditionconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id462683-bb"><phrase role="identifier">constructor_precondition</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <phrase role="keyword">explicit</phrase> <link linkend="id462692-bb"><phrase role="identifier">constructor_precondition</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This class must be the very first base class of the contracted class. Also the contracted class shall privately inherit from this base class (to not alter the contracted class public interface).</para><para>Unions cannot have base classes in C++ so this class can be used to declare a local object within the constructor function just before  <computeroutput><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput> is used (see  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> Class</literallayout></para><para><para>Class of contracted constructor. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.constructor_preconditionconstruct-copy-destruct"/><computeroutput>constructor_precondition</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id462683-bb"/><phrase role="identifier">constructor_precondition</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object without specifying constructor preconditions. <para>This is implicitly called for those constructors of the contracted class that do not specify preconditions. </para></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <phrase role="keyword">explicit</phrase> <anchor id="id462692-bb"/><phrase role="identifier">constructor_precondition</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object specifying constructor preconditions. <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to check constructor preconditions <computeroutput>f()</computeroutput>. Precondition assertions within this functor call are usually programmed using  <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput></computeroutput>, but any exception thrown by a call to this functor indicates a precondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::precondition_failure</computeroutput></computeroutput>). This functor must be a nullary functor. This functor can capture variables by value, or better by (constant) reference to avoid extra copies. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.constructor"><refmeta><refentrytitle>Function template constructor</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::constructor</refname><refpurpose>Program contracts for constructors. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.constructor_hpp">boost/contract/constructor.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link> <phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify postconditions, old value assignments at body, and check class invariants for constructors (see  <computeroutput><computeroutput><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput></computeroutput> to specify preconditions for constructors instead).</para><para>For optimization, this can be omitted for constructors that do not have postconditions when the enclosing class has no invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted constructor. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted constructor (otherwise this library will generate a run-time error, see <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.core.access_hpp"><title>Header &lt;<ulink url="../..//boost/contract/core/access.hpp">boost/contract/core/access.hpp</ulink>&gt;</title><para>Facility to declare invariants, base types, etc all as private members. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">class</phrase> <link linkend="boost.contract.access">access</link><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.access"><refmeta><refentrytitle>Class access</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::access</refname><refpurpose>Friend this class to declare invariants and base types as private members. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.access_hpp">boost/contract/core/access.hpp</link>&gt;

</phrase>
<phrase role="keyword">class</phrase> <link linkend="boost.contract.access">access</link> <phrase role="special">:</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">noncopyable</phrase> <phrase role="special">{</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Declare this class as friend of the contracted class in order to declare the invariants functions and the base types <computeroutput>typedef</computeroutput> as non-public members. In real code, programmers will likely chose to declare this class as friend so to fully control the contracted class public interface.</para><para>This class is not intended to be directly used by programmers a part from declaring it <computeroutput>friend</computeroutput> (and that is why this class does not have any public member and it is not copyable).</para><para><note><para>Not making this class friend of the contracted class will cause compiler errors on some compilers (e.g., MSVC) because the private members needed to check the contracts will not be accessible. On other compilers (e.g., GCC and CLang), the private access will instead fail SFINAE and no compiler error will be reported while invariants and subcontracting will be silently skipped at run-time. Therefore, programmers must make sure to either declare invariant functions and base types <computeroutput>typedef</computeroutput> as public members or to make this class a friend. </para></note>
<para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
</section>
<section id="header.boost.contract.core.config_hpp"><title>Header &lt;<ulink url="../..//boost/contract/core/config.hpp">boost/contract/core/config.hpp</ulink>&gt;</title><para>Facilities to configure this library compile-time and run-time behaviour. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude">

<link linkend="BOOST_CONTRACT_DYN_LINK">BOOST_CONTRACT_DYN_LINK</link>
<link linkend="BOOST_CONTRACT_HEADER_ONLY">BOOST_CONTRACT_HEADER_ONLY</link>
<link linkend="BOOST_CONTRACT_DISABLE_THREADS">BOOST_CONTRACT_DISABLE_THREADS</link>
<link linkend="BOOST_CONTRACT_MAX_ARGS">BOOST_CONTRACT_MAX_ARGS</link>
<link linkend="BOOST_CONTRACT_BASE_TYPEDEF">BOOST_CONTRACT_BASE_TYPEDEF</link>
<link linkend="BOOST_CONTRACT_INVARIANT">BOOST_CONTRACT_INVARIANT</link>
<link linkend="BOOST_CONTRACT_STATIC_INVARIANT">BOOST_CONTRACT_STATIC_INVARIANT</link>
<link linkend="BOOST_CONTRACT_PERMISSIVE">BOOST_CONTRACT_PERMISSIVE</link>
<link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link>
<link linkend="BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION">BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION</link>
<link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link>
<link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link>
<link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link>
<link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link>
<link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link>
<link linkend="BOOST_CONTRACT_NO_CONSTRUCTORS">BOOST_CONTRACT_NO_CONSTRUCTORS</link>
<link linkend="BOOST_CONTRACT_NO_DESTRUCTORS">BOOST_CONTRACT_NO_DESTRUCTORS</link>
<link linkend="BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS">BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</link>
<link linkend="BOOST_CONTRACT_NO_FUNCTIONS">BOOST_CONTRACT_NO_FUNCTIONS</link>
<link linkend="BOOST_CONTRACT_NO_ALL">BOOST_CONTRACT_NO_ALL</link></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_DYN_LINK"><refmeta><refentrytitle>Macro BOOST_CONTRACT_DYN_LINK</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_DYN_LINK</refname><refpurpose>Define this macro to compile this library as a shared library or DLL (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_DYN_LINK</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>In general, this library must be compiled as a shared library (a.k.a., Dynamically Linked Library (DLL)) by defining this macro. That is necessary when the same library instance is used by multiple programs (otherwise the contracts will not necessarily be checked correctly at run-time).</para><para><emphasis role="bold">Rationale:</emphasis> Named after <computeroutput>BOOST_ALL_DYN_LINK</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.getting_started"> Getting Started</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_HEADER_ONLY"><refmeta><refentrytitle>Macro BOOST_CONTRACT_HEADER_ONLY</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_HEADER_ONLY</refname><refpurpose>Define this macro when compiling user code to avoid compiling this library (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_HEADER_ONLY</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>If this macro is defined, this library does not have to be compiled separately from user code. This library headers are simply included in the user program and this library implementation code is compiled as part of the user program. However, in general this library must be compiled as a shared library defining <computeroutput><link linkend="BOOST_CONTRACT_DYN_LINK">BOOST_CONTRACT_DYN_LINK</link></computeroutput> when it is used by multiple programs (otherwise the contracts will not necessarily be checked correctly at run-time).</para><para><emphasis role="bold">Rationale:</emphasis> Named after <computeroutput>BOOST_CHRONO_HEADER_ONLY</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.getting_started"> Getting Started</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_DISABLE_THREADS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_DISABLE_THREADS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_DISABLE_THREADS</refname><refpurpose>Define this macro to not lock internal library data for thread safety (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_DISABLE_THREADS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Defining this macro will make the library implementation code not thread safe so this macro should not be defined unless the library is being used strictly under single-threaded applications. However, when this macro is left undefined this library needs to use "global" locks (to ensure contract checking is globally disabled when other contracts are being checked and also to safely access the failure handler functors) and that could introduce a significant amount of synchronization in some multi-threaded applications.</para><para><emphasis role="bold">Rationale:</emphasis> Named after <computeroutput>BOOST_DISABLE_THREADS</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.contract_programming_overview"> Contract Programming Overview</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_MAX_ARGS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_MAX_ARGS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_MAX_ARGS</refname><refpurpose>Maximum number of function arguments when no variadic macros are supported (default to <computeroutput>10</computeroutput>). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_MAX_ARGS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>On compilers that support variadic macros, this macro has no effect. On compilers that do not support variadic macros, this macro can be defined to support a maximum number of arguments different than <computeroutput>10</computeroutput> for overriding public functions (contracted via  <computeroutput><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>). (Compilation times of this library were measured to be comparable between compilers that support variadic macros and compilers that do not.) <note><para>Regardless of the value of this macro and of compiler support for variadic macros, there is an intrinsic limit around 18 arguments for overriding public functions (because of similar limits for some Boost libraries like Boost.MPL and Boost.FunctionTypes internally used by this library).</para></note>
<emphasis role="bold">Rationale:</emphasis> Named after <computeroutput>BOOST_FUNCTION_MAX_ARGS</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_BASE_TYPEDEF"><refmeta><refentrytitle>Macro BOOST_CONTRACT_BASE_TYPEDEF</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_BASE_TYPEDEF</refname><refpurpose>Define the name of the base type <computeroutput>typedef</computeroutput> (<computeroutput>base_types</computeroutput> by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_BASE_TYPEDEF</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This macro can be defined if the <computeroutput>typedef</computeroutput> declared using  <computeroutput><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput> must have a name different than <computeroutput>base_types</computeroutput>.</para><para><emphasis role="bold">Rationale:</emphasis> This macro cannot be called <computeroutput>BOOST_CONTRACT_BASE_TYPES</computeroutput> because that is already the name of the macro that extracts public bases. Then <computeroutput>BOOST_CONTRACT_BASE_TYPEDEF</computeroutput> is a reasonable name (but without changing this macro default definition to <computeroutput>base_typedef</computeroutput> because <computeroutput>base_types</computeroutput> is remains the preferred syntax for user code). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_INVARIANT"><refmeta><refentrytitle>Macro BOOST_CONTRACT_INVARIANT</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_INVARIANT</refname><refpurpose>Define the name of the invariant member functions (<computeroutput>invariant</computeroutput> by defult). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_INVARIANT</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This macro expands to the name of the <computeroutput>const</computeroutput> and <computeroutput>const volatile</computeroutput> member functions that check mutable and volatile class invariants respectively. This macro can be defined if the invariant functions need to be named differently from <computeroutput>invariant</computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_STATIC_INVARIANT"><refmeta><refentrytitle>Macro BOOST_CONTRACT_STATIC_INVARIANT</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_STATIC_INVARIANT</refname><refpurpose>Define the name of the static invariant member function (<computeroutput>static_invariant</computeroutput> by defult). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_STATIC_INVARIANT</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This macro expands to the name of the <computeroutput>static</computeroutput> member function that checks static class invariants. This macro can be defined if the static invariant function needs to be named differently from <computeroutput>static_invariant</computeroutput>.</para><para><emphasis role="bold">Rationale:</emphasis> C++ does not allow to overload member functions based on the <computeroutput>static</computeroutput> classifier, so a name different from the one expanded by <computeroutput><link linkend="BOOST_CONTRACT_INVARIANT">BOOST_CONTRACT_INVARIANT</link></computeroutput> needed to be used here. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_PERMISSIVE"><refmeta><refentrytitle>Macro BOOST_CONTRACT_PERMISSIVE</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_PERMISSIVE</refname><refpurpose>Disable a number of static checks and related compile-time errors generated by this library (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_PERMISSIVE</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Among other compile-time errors, defining this macro disables compile-time error for the following checks: <itemizedlist>
<listitem><para>The static invariant member function must be <computeroutput>static</computeroutput>. </para></listitem>
<listitem><para>Non-static invariant member functions must be either <computeroutput>const</computeroutput>, <computeroutput>const volatile</computeroutput>, or <computeroutput>volatile const</computeroutput>. </para></listitem>
<listitem><para>A class that programs contracts for one or more overriding public functions via <computeroutput><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput> must also define the <computeroutput><link linkend="BOOST_CONTRACT_BASE_TYPES">BOOST_CONTRACT_BASE_TYPES</link></computeroutput> <computeroutput>typedef</computeroutput>. </para></listitem>
</itemizedlist>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_ON_MISSING_GUARD"><refmeta><refentrytitle>Macro BOOST_CONTRACT_ON_MISSING_GUARD</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_ON_MISSING_GUARD</refname><refpurpose>Code block to execute if contracts are not assigned to a  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> variable (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_ON_MISSING_GUARD</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>In general, there is a logic error in the program when contracts are not assigned to a local variable of type <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput>. Therefore, by default (i.e., when this macro is not defined) this library calls <computeroutput>assert</computeroutput> with a <computeroutput>false</computeroutput> condition in such cases. If this macro is defined, this library will execute the code expanded by the macro instead of calling <computeroutput>assert</computeroutput> (if programmers prefer to throw an exception, etc.). </para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION"><refmeta><refentrytitle>Macro BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION</refname><refpurpose>Define this macro to not disable other any assertion checking while checking preconditions (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_PRECONDITIONS_DISABLE_NO_ASSERTION</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>The <link linkend="boost_contract.bibliography"> [N1962]</link> proposal does not disable any assertion checking while checking preconditions (because unchecked arguments can be passed to function bodies if contract checking is disabled within precondition checking when function bodies are executed directly or indirectly to check the preconditions in question). However, not disabling assertion checking while checking preconditions can lead to infinite recursion in user code so by default this macro is not defined (but this macro can be defined to obtain the behaviour specified in  <link linkend="boost_contract.bibliography"> [1962]</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.contract_programming_overview"> Contract Programming Overview</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_PRECONDITIONS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_PRECONDITIONS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_PRECONDITIONS</refname><refpurpose>If defined, this library does not check preconditions at run-time (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_PRECONDITIONS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>If this macro is defined, this library implementation code is also optimized to reduce compile-time (not just run-time) overhead associated with checking preconditions. Users can also manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of preconditions (not recommended). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_POSTCONDITIONS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_POSTCONDITIONS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_POSTCONDITIONS</refname><refpurpose>If defined, this library does not check postconditions and does not copy old values at run-time (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_POSTCONDITIONS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>If this macro is defined, this library implementation code is also optimized to reduce compile-time (not just run-time) overhead associated with checking postconditions and copying old values. Users can also manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of postconditions and old values (not recommended). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_ENTRY_INVARIANTS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_ENTRY_INVARIANTS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_ENTRY_INVARIANTS</refname><refpurpose>If defined, this library does not check entry invariants at run-time (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_ENTRY_INVARIANTS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>If this macro is defined, this library implementation code is also optimized to reduce compile-time (not just run-time) overhead associated with checking class invariants at function entry.</para><para>This macro can always be defined by itself but it is also automatically defined when <computeroutput><link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link></computeroutput> is defined. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_EXIT_INVARIANTS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_EXIT_INVARIANTS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_EXIT_INVARIANTS</refname><refpurpose>If defined, this library does not check exit invariants at run-time (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_EXIT_INVARIANTS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>If this macro is defined, this library implementation code is also optimized to reduce compile-time (not just run-time) overhead associated with checking class invariants at function exit.</para><para>This macro can always be defined by itself but it is also automatically defined when <computeroutput><link linkend="BOOST_CONTRACT_NO_INVARIANTS">BOOST_CONTRACT_NO_INVARIANTS</link></computeroutput> is defined. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_INVARIANTS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_INVARIANTS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_INVARIANTS</refname><refpurpose>If defined, this library does not check class invariants at run-time (undefined by default). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_INVARIANTS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>If this macro is defined, this library implementation code is also optimized to reduce compile-time (not just run-time) overhead associated with checking class invariants (at both function entry and exit). Users can also manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of class invariants (not recommended).</para><para>This macro can always be defined by itself but it is also automatically defined when <computeroutput><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput> and  <computeroutput><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput> are both defined. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_CONSTRUCTORS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_CONSTRUCTORS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_CONSTRUCTORS</refname><refpurpose>Defined by this library if constructor contracts are not being checked by  <computeroutput><link linkend="boost.contract.constructor">boost::contract::constructor</link></computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_CONSTRUCTORS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Users can manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of constructor contracts (not recommended).</para><para>This macro is automatically defined by this library, and it is not a configuration macro. This library will generate a compile-time error if programmers try to manually define this macro. Programmers can manually define <computeroutput><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>, and  <computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput> instead (constructor preconditions are checked separately by  <computeroutput><link linkend="boost.contract.constructor_precondition">boost::contract::constructor_precondition</link></computeroutput> so they are disabled by  <computeroutput><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_DESTRUCTORS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_DESTRUCTORS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_DESTRUCTORS</refname><refpurpose>Defined by this library if destructor contracts are not being checked by  <computeroutput><link linkend="boost.contract.destructor">boost::contract::destructor</link></computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_DESTRUCTORS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Users can manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of destructor contracts (not recommended).</para><para>This macro is automatically defined by this library, and it is not a configuration macro. This library will generate a compile-time error if programmers try to manually define this macro. Programmers can manually define <computeroutput><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>, and  <computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput> instead (destructors have no preconditions, see also <link linkend="boost_contract.contract_programming_overview"> Contract
Programming Overivew</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</refname><refpurpose>Defined by this library if public function contracts are not being checked by <computeroutput><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_PUBLIC_FUNCTIONS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Users can manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of public function contracts (not recommended).</para><para>This macro is automatically defined by this library, and it is not a configuration macro. This library will generate a compile-time error if programmers try to manually define this macro. Programmers can manually define <computeroutput><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>, and  <computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput> instead. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_FUNCTIONS"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_FUNCTIONS</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_FUNCTIONS</refname><refpurpose>Defined by this library if non-member, private, and protected function contracts are not being checked by <computeroutput><link linkend="boost.contract.function">boost::contract::function</link></computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_FUNCTIONS</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Users can manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable compilation of non-member, private, and protected function contracts (not recommended).</para><para>This macro is automatically defined by this library, and it is not a configuration macro. This library will generate a compile-time error if programmers try to manually define this macro. Programmers can manually define <computeroutput><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput> and  <computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput> instead (private and protected functions do not check class invariants, see also  <link linkend="boost_contract.contract_programming_overview"> Contract Programming Overview</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NO_ALL"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NO_ALL</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NO_ALL</refname><refpurpose>Defined by this library if no contracts (for any operation) are being checked. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.config_hpp">boost/contract/core/config.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NO_ALL</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Users can manually program <computeroutput>#ifdef</computeroutput> statements in their code using this macro to completely disable inclusion of this library headers, etc. (not recommended).</para><para>This macro is automatically defined by this library, and it is not a configuration macro. This library will generate a compile-time error if programmers try to manually define this macro. Programmers can manually define <computeroutput><link linkend="BOOST_CONTRACT_NO_ENTRY_INVARIANTS">BOOST_CONTRACT_NO_ENTRY_INVARIANTS</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_NO_PRECONDITIONS">BOOST_CONTRACT_NO_PRECONDITIONS</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_NO_EXIT_INVARIANTS">BOOST_CONTRACT_NO_EXIT_INVARIANTS</link></computeroutput>, and  <computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput> instead. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para></refsect1></refentry>
</section>
<section id="header.boost.contract.core.specify_hpp"><title>Header &lt;<ulink url="../..//boost/contract/core/specify.hpp">boost/contract/core/specify.hpp</ulink>&gt;</title><para>Facilities to specify preconditions, old value assignments, and postconditions. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> 
      <phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.specify_nothing"><refmeta><refentrytitle>Class specify_nothing</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::specify_nothing</refname><refpurpose>Used to prevent setting other contract conditions after postconditions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.specify_hpp">boost/contract/core/specify.hpp</link>&gt;

</phrase>
<phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.specify_nothingconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id464342-bb"><phrase role="special">~</phrase><phrase role="identifier">specify_nothing</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This class has no member function so it is used to prevent specifying contract functors. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para><refsect2><title><anchor id="boost.contract.specify_nothingconstruct-copy-destruct"/><computeroutput>specify_nothing</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id464342-bb"/><phrase role="special">~</phrase><phrase role="identifier">specify_nothing</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Destruct this object. <para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). </para></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.specify_old_postcondition"><refmeta><refentrytitle>Class template specify_old_postcondition</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::specify_old_postcondition</refname><refpurpose>Allow to specify old value assignments and postconditions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.specify_hpp">boost/contract/core/specify.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> 
<phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.specify_old_postconditionconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id464524-bb"><phrase role="special">~</phrase><phrase role="identifier">specify_old_postcondition</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id464402-bb">public member functions</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <link linkend="id464405-bb"><phrase role="identifier">old</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <link linkend="id464458-bb"><phrase role="identifier">postcondition</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Allow to program functors this library will call to assign old values before body execution and to check postconditions. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase></literallayout></para><para><para>Return type of the contracted function if that is either a virtual or an overriding public function, otherwise this is always <computeroutput>void</computeroutput>. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.specify_old_postconditionconstruct-copy-destruct"/><computeroutput>specify_old_postcondition</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id464524-bb"/><phrase role="special">~</phrase><phrase role="identifier">specify_old_postcondition</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Destruct this object. <para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). </para></listitem></orderedlist></refsect2><refsect2><title><anchor id="id464402-bb"/><computeroutput>specify_old_postcondition</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <anchor id="id464405-bb"/><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Allow to specify old value assignments to execute just before the function body. <para>In most cases, it should be sufficient to initialize old value pointers as soon as they are declared so it should not be necessary to use this function (see <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to assign old values <computeroutput>f()</computeroutput>. This functor is called just before the function body is executed, but after precondition and class invariants are checked (when they are specified). Old value pointers within this functor call are usually assigned using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput></computeroutput>. Any exception thrown by a call to this functor is handled as a postcondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::postcondition_failure</computeroutput></computeroutput> because old values are ultimately used to assert postconditions). This functor must be a nullary functor. This functor should capture old value pointers by references so they can be assigned (all other variables needed to evaluate old value expressions can be captured by (constant) value, or better by (constant) reference to avoid extra copies). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>After old value assignments have been specified, return object that allows to optionally specify postconditions. </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <anchor id="id464458-bb"/><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Allow to specify postconditions. <para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to check postconditions <computeroutput>f()</computeroutput>. Postcondition assertions within this functor call are usually programmed using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput></computeroutput>, but any exception thrown by a call to this functor indicates a postcondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::postcondition_failure</computeroutput></computeroutput>). This functor must be a nullary functor if <computeroutput>VirtualResult</computeroutput> is <computeroutput>void</computeroutput>, otherwise it must be a unary functor taking the return value as a parameter of type <computeroutput>VirtualResult const&amp;</computeroutput> (to avoid extra copies, or <computeroutput>VirtualResult</computeroutput> and also <computeroutput>VirtualResult const</computeroutput> if extra copies of the return value are irrelevant). This functor should capture variables by (constant) references (to access the values they will have at function exit). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>After postconditions have been specified, return object that does not allow to specify any additional contract. </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.specify_postcondition_only"><refmeta><refentrytitle>Class template specify_postcondition_only</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::specify_postcondition_only</refname><refpurpose>Allow to specify postconditions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.specify_hpp">boost/contract/core/specify.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> 
<phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.specify_postcondition_onlyconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id464653-bb"><phrase role="special">~</phrase><phrase role="identifier">specify_postcondition_only</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id464583-bb">public member functions</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <link linkend="id464587-bb"><phrase role="identifier">postcondition</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Allow to program functors this library will call to check postconditions. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase></literallayout></para><para><para>Return type of the contracted function if that is either a virtual or an overriding public function, otherwise this is always <computeroutput>void</computeroutput>. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.specify_postcondition_onlyconstruct-copy-destruct"/><computeroutput>specify_postcondition_only</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id464653-bb"/><phrase role="special">~</phrase><phrase role="identifier">specify_postcondition_only</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Destruct this object. <para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). </para></listitem></orderedlist></refsect2><refsect2><title><anchor id="id464583-bb"/><computeroutput>specify_postcondition_only</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <anchor id="id464587-bb"/><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Allow to specify postconditions. <para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to check postconditions <computeroutput>f()</computeroutput>. Postcondition assertions within this functor call are usually programmed using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput></computeroutput>, but any exception thrown by a call to this functor indicates a postcondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::postcondition_failure</computeroutput></computeroutput>). This functor must be a nullary functor if <computeroutput>VirtualResult</computeroutput> is <computeroutput>void</computeroutput>, otherwise it must be a unary functor taking the return value as a parameter of type <computeroutput>VirtualResult const&amp;</computeroutput> (to avoid extra copies, or <computeroutput>VirtualResult</computeroutput> and also <computeroutput>VirtualResult const</computeroutput> if extra copies of the return value are irrelevant). This functor should capture variables by (constant) references (to access the values they will have at function exit). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>After postconditions have been specified, return object that does not allow to specify any additional contract. </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.specify_precondit_id464674"><refmeta><refentrytitle>Class template specify_precondition_old_postcondition</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::specify_precondition_old_postcondition</refname><refpurpose>Allow to specify preconditions, old value assignments, and postconditions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.specify_hpp">boost/contract/core/specify.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase><phrase role="special">&gt;</phrase> 
<phrase role="keyword">class</phrase> <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.specify_precondit_id464674construct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id464882-bb"><phrase role="special">~</phrase><phrase role="identifier">specify_precondition_old_postcondition</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id464711-bb">public member functions</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <link linkend="id464715-bb"><phrase role="identifier">precondition</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> 
    <link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <link linkend="id464763-bb"><phrase role="identifier">old</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <link linkend="id464816-bb"><phrase role="identifier">postcondition</phrase></link><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Allow to program functors this library will call to check preconditions, assign old values before body execution, and check postconditions. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> VirtualResult <phrase role="special">=</phrase> <phrase role="keyword">void</phrase></literallayout></para><para><para>Return type of the contracted function if that is either a virtual or an overriding public function, otherwise this is always <computeroutput>void</computeroutput>. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.specify_precondit_id464674construct-copy-destruct"/><computeroutput>specify_precondition_old_postcondition</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id464882-bb"/><phrase role="special">~</phrase><phrase role="identifier">specify_precondition_old_postcondition</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Destruct this object. <para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). </para></listitem></orderedlist></refsect2><refsect2><title><anchor id="id464711-bb"/><computeroutput>specify_precondition_old_postcondition</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <anchor id="id464715-bb"/><phrase role="identifier">precondition</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Allow to specify preconditions. <para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to check preconditions <computeroutput>f()</computeroutput>. Precondition assertions within this functor call are usually programmed using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput></computeroutput>, but any exception thrown by a call to this functor indicates a precondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::precondition_failure</computeroutput></computeroutput>). This functor must be a nullary functor. This functor can capture variables by (constant) value, or better by (constant) reference to avoid extra copies. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>After preconditions have been specified, return object that allows to optionally specify old value assignments and postconditions. </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <anchor id="id464763-bb"/><phrase role="identifier">old</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Allow to specify old value assignments to execute just before the function body. <para>In most cases, it should be sufficient to initialize old value pointers as soon as they are declared so it should not be necessary to use this function (see <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to assign old values <computeroutput>f()</computeroutput>. This functor is called just before the function body is executed, but after precondition and class invariants are checked (when they are specified). Old value pointers within this functor call are usually assigned using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput></computeroutput>. Any exception thrown by a call to this functor is handled as a postcondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::postcondition_failure</computeroutput></computeroutput> because old values are ultimately used to assert postconditions). This functor must be a nullary functor. This functor should capture old value pointers by references so they can be assigned (all other variables needed to evaluate old value expressions can be captured by (constant) value, or better by (constant) reference to avoid extra copies). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>After old value assignments have been specified, return object that allows to optionally specify postconditions. </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> F<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_nothing">specify_nothing</link> <anchor id="id464816-bb"/><phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> f<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Allow to specify postconditions. <para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>Functor called by this library to check postconditions <computeroutput>f()</computeroutput>. Postcondition assertions within this functor call are usually programmed using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_ASSERT">BOOST_CONTRACT_ASSERT</link></computeroutput></computeroutput>, but any exception thrown by a call to this functor indicates a postcondition failure (and will result in this library calling  <computeroutput><computeroutput>boost::contract::postcondition_failure</computeroutput></computeroutput>). This functor must be a nullary functor if <computeroutput>VirtualResult</computeroutput> is <computeroutput>void</computeroutput>, otherwise it must be a unary functor taking the return value as a parameter of type <computeroutput>VirtualResult const&amp;</computeroutput> (to avoid extra copies, or <computeroutput>VirtualResult</computeroutput> and also <computeroutput>VirtualResult const</computeroutput> if extra copies of the return value are irrelevant). This functor should capture variables by (constant) references (to access the values they will have at function exit). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>After postconditions have been specified, return object that does not allow to specify any additional contract. </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry>
</section>
<section id="header.boost.contract.core.virtual_hpp"><title>Header &lt;<ulink url="../..//boost/contract/core/virtual.hpp">boost/contract/core/virtual.hpp</ulink>&gt;</title><para>Facility to declare virtual public functions with contracts. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">class</phrase> <link linkend="boost.contract.virtual_">virtual_</link><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.virtual_"><refmeta><refentrytitle>Class virtual_</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::virtual_</refname><refpurpose>Class to mark declarations of virtual public functions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.core.virtual_hpp">boost/contract/core/virtual.hpp</link>&gt;

</phrase>
<phrase role="keyword">class</phrase> <link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">:</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">noncopyable</phrase> <phrase role="special">{</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Virtual public functions (and therefore overriding public functions) contracted using this library must have an extra parameter at the very end of their parameter list. This parameter must be a pointer to this class and it must have default value <computeroutput>0</computeroutput> (i.e., null). (This extra parameter is often named <computeroutput>v</computeroutput> in this documentation, but any name can be used.)</para><para>This extra parameter does not alter the calling interface of the contracted function because it is always the last parameter and it has a default value (so it is always omitted when users call the contracted function). This extra parameter must be passed to <computeroutput><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput>,  <computeroutput><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput>, and all other operations of this library that require a pointer to <computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput>. A part from that, this class is not intended to be directly used by programmers (and that is why this class does not have any public member and it is not copyable).</para><para><emphasis role="bold">Rationale:</emphasis> This extra parameter is internally used by this library to recognize virtual public functions to implement subcontracting (<computeroutput>virtual</computeroutput> cannot be introspected using template meta-programming techniques in C++). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para></refsect1></refentry>
</section>
<section id="header.boost.contract.destructor_hpp"><title>Header &lt;<ulink url="../..//boost/contract/destructor.hpp">boost/contract/destructor.hpp</ulink>&gt;</title><para>Program contracts for destructors. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link> <link linkend="boost.contract.destructor"><phrase role="identifier">destructor</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.destructor"><refmeta><refentrytitle>Function template destructor</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::destructor</refname><refpurpose>Program contracts for destructors. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.destructor_hpp">boost/contract/destructor.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> <link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link> <phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify postconditions, old value assignments at body, and check class invariants for destructors (destructors cannot not have preconditions, see  <link linkend="boost_contract.contract_programming_overview"> Contract Programming Overview</link>).</para><para>For optimization, this can be omitted for destructors that do not have postconditions when the enclosing class has no invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted destructor. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted destructor (otherwise this library will generate a run-time error, see <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.function_hpp"><title>Header &lt;<ulink url="../..//boost/contract/function.hpp">boost/contract/function.hpp</ulink>&gt;</title><para>Program contracts for non-member, private, and protected functions. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <link linkend="boost.contract.function"><phrase role="identifier">function</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.function"><refmeta><refentrytitle>Function function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::function</refname><refpurpose>Program contracts for non-member, private and protected functions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.function_hpp">boost/contract/function.hpp</link>&gt;

</phrase>
<link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <phrase role="identifier">function</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, and old value assignments at body for non-member, private and protected functions (these functions never check class invariants, see  <link linkend="boost_contract.contract_programming_overview"> Contract Programming Overview</link>).</para><para>For optimization, this can be omitted for functions that do not have preconditions and postconditions. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.guard_hpp"><title>Header &lt;<ulink url="../..//boost/contract/guard.hpp">boost/contract/guard.hpp</ulink>&gt;</title><para>RAII object to check contracts. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">class</phrase> <link linkend="boost.contract.guard">guard</link><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.guard"><refmeta><refentrytitle>Class guard</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::guard</refname><refpurpose>RAII object that checks the contracts. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.guard_hpp">boost/contract/guard.hpp</link>&gt;

</phrase>
<phrase role="keyword">class</phrase> <link linkend="boost.contract.guard">guard</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.guardconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id465185-bb"><phrase role="identifier">guard</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.guard">guard</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">&gt;</phrase> 
    <link linkend="id465202-bb"><phrase role="identifier">guard</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">&gt;</phrase> 
    <link linkend="id465257-bb"><phrase role="identifier">guard</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">&gt;</phrase> 
    <link linkend="id465313-bb"><phrase role="identifier">guard</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <link linkend="id465368-bb"><phrase role="identifier">guard</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.specify_nothing">specify_nothing</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <link linkend="id465410-bb"><phrase role="special">~</phrase><phrase role="identifier">guard</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>In general, this object checks entry invariants, preconditions, and assigns old values when it is constructed. Then it checks exit invariants and postconditions when it is destructed. In addition, this object markes sure that postconditions are checked only if the body does not throw an exception, constructors never check entry invariants, destructors check exit invariants only if their bodies throw an exception, static invariants are always checked at entry and exit, etc. (see also <link linkend="boost_contract.contract_programming_overview">
Contract Programming Overview</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>
</para><refsect2><title><anchor id="boost.contract.guardconstruct-copy-destruct"/><computeroutput>guard</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id465185-bb"/><phrase role="identifier">guard</phrase><phrase role="special">(</phrase><link linkend="boost.contract.guard">guard</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> other<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object copying it from the specified one. <para>This object will check the contract, the copied-from object will not (i.e., contract checking ownership is transfered from the copied object to this object). </para></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">&gt;</phrase> 
  <anchor id="id465202-bb"/><phrase role="identifier">guard</phrase><phrase role="special">(</phrase><link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> contract<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from the specified contract. <para>Check entry invariants (if they apply to the specified contract). This constructor is not <computeroutput>explicit</computeroutput> so initializations can use operator <computeroutput>=</computeroutput> syntax.</para><para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>contract</computeroutput></term><listitem><para>Contract to be checked. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>VirtualResult</computeroutput></term><listitem><para>Return type of the contracted function if that is either a virtual or an overriding public function, otherwise this is always <computeroutput>void</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">&gt;</phrase> 
  <anchor id="id465257-bb"/><phrase role="identifier">guard</phrase><phrase role="special">(</phrase><link linkend="boost.contract.specify_old_postcondition">specify_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> contract<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from the specified contract. <para>Check entry invariants (if they apply to the specified contract) and check preconditions. This constructor is not <computeroutput>explicit</computeroutput> so initializations can use operator <computeroutput>=</computeroutput> syntax.</para><para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>contract</computeroutput></term><listitem><para>Contract to be checked. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>VirtualResult</computeroutput></term><listitem><para>Return type of the contracted function if that is either a virtual or an overriding public function, otherwise this is always <computeroutput>void</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">&gt;</phrase> 
  <anchor id="id465313-bb"/><phrase role="identifier">guard</phrase><phrase role="special">(</phrase><link linkend="boost.contract.specify_postcondition_only">specify_postcondition_only</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> contract<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from the specified contract. <para>Check entry invariants (if they apply to the specified contract) and check preconditions, and assign old values. This constructor is not <computeroutput>explicit</computeroutput> so initializations can use operator <computeroutput>=</computeroutput> syntax.</para><para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>contract</computeroutput></term><listitem><para>Contract to be checked. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>VirtualResult</computeroutput></term><listitem><para>Return type of the contracted function if that is either a virtual or an overriding public function, otherwise this is always <computeroutput>void</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><anchor id="id465368-bb"/><phrase role="identifier">guard</phrase><phrase role="special">(</phrase><link linkend="boost.contract.specify_nothing">specify_nothing</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> contract<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from the specified contract. <para>Check entry invariants (if they apply to the specified contract) and check preconditions, and assign old values (plus the destructor of this object will also check postconditions in this case). This constructor is not <computeroutput>explicit</computeroutput> so initializations can use operator <computeroutput>=</computeroutput> syntax.</para><para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_precondition_failure</computeroutput></computeroutput>, etc.). 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>contract</computeroutput></term><listitem><para>Contract to be checked. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><anchor id="id465410-bb"/><phrase role="special">~</phrase><phrase role="identifier">guard</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Destruct this object. <para>Check exit invariants (if they apply to the contract specified at construction) and postconditions (if the body did not throw and postconditions apply to the contract specified at construction).</para><para><emphasis role="bold">Throws:</emphasis> This can throw (i.e., <computeroutput>noexcept(false)</computeroutput>) in case programmers specify failure handlers that throw exceptions instead of terminating the program (see  <computeroutput><computeroutput>boost::contract::set_postcondition_failure</computeroutput></computeroutput>, etc.). </para></listitem></orderedlist></refsect2></refsect1></refentry>
</section>
<section id="header.boost.contract.old_hpp"><title>Header &lt;<ulink url="../..//boost/contract/old.hpp">boost/contract/old.hpp</ulink>&gt;</title><para>Facilities to support old values. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude">

<link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link>(...)</synopsis><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">class</phrase> <link linkend="boost.contract.old_pointer">old_pointer</link><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <link linkend="boost.contract.old_ptr">old_ptr</link><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <link linkend="boost.contract.old_ptr_noncopyable">old_ptr_noncopyable</link><phrase role="special">;</phrase>
    <phrase role="keyword">class</phrase> <link linkend="boost.contract.old_value">old_value</link><phrase role="special">;</phrase>
    <link linkend="boost.contract.old_value">old_value</link> <link linkend="boost.contract.null_old"><phrase role="identifier">null_old</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <link linkend="boost.contract.old_pointer">old_pointer</link> <link linkend="boost.contract.make_old_id465946"><phrase role="identifier">make_old</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.old_value">old_value</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <link linkend="boost.contract.old_pointer">old_pointer</link> <link linkend="boost.contract.make_old_id466761"><phrase role="identifier">make_old</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase><phrase role="special">,</phrase> <link linkend="boost.contract.old_value">old_value</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">bool</phrase> <link linkend="boost.contract.copy_old_id466837"><phrase role="identifier">copy_old</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">bool</phrase> <link linkend="boost.contract.copy_old_id466872"><phrase role="identifier">copy_old</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.old_pointer"><refmeta><refentrytitle>Class old_pointer</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::old_pointer</refname><refpurpose>Convert old value copies to old value pointers. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<phrase role="keyword">class</phrase> <link linkend="boost.contract.old_pointer">old_pointer</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>

  <phrase role="comment">// <link linkend="id465473-bb">public member functions</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> <link linkend="id465477-bb"><phrase role="keyword">operator</phrase> <phrase role="identifier">old_ptr_noncopyable</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> <link linkend="id465499-bb"><phrase role="keyword">operator</phrase> <phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This class is often used only implicitly by this library and it does not explicitly appear in user code (that is why this class does not have public constructors, etc.). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para><refsect2><title><anchor id="id465473-bb"/><computeroutput>old_pointer</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> <anchor id="id465477-bb"/><phrase role="keyword">operator</phrase> <phrase role="identifier">old_ptr_noncopyable</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Convert this object to an old value pointer (the old value type might or not be copy constructible). <para>For example, this is implicitly called when assigning or initializing old value pointers. 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>T</computeroutput></term><listitem><para>Type of the pointed old value. The old value pointer will always be null if this type is not copy constructible (but this library will not generate a compile-time error). </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> <anchor id="id465499-bb"/><phrase role="keyword">operator</phrase> <phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Convert this object to an old value pointer (the old value type must be copy constructible). <para>For example, this is implicitly called when assigning or initializing old value pointers. 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>T</computeroutput></term><listitem><para>Type of the pointed old value. This type must be copy constructible, otherwise this library will generate a compile-time error if the old value pointer is dereferenced. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.old_ptr"><refmeta><refentrytitle>Class template old_ptr</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::old_ptr</refname><refpurpose>Old value pointer (that requires the pointed old value type to be copy constructible). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> 
<phrase role="keyword">class</phrase> <link linkend="boost.contract.old_ptr">old_ptr</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// types</phrase>
  <phrase role="keyword">typedef</phrase> <phrase role="identifier">T</phrase> <anchor id="boost.contract.old_ptr.element_type"/><phrase role="identifier">element_type</phrase><phrase role="special">;</phrase>  <phrase role="comment">// Pointed old value type. </phrase>

  <phrase role="comment">// <link linkend="boost.contract.old_ptrconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id465647-bb"><phrase role="identifier">old_ptr</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id465574-bb">public member functions</link></phrase>
  <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <link linkend="id465578-bb"><phrase role="keyword">operator</phrase><phrase role="special">*</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="keyword">const</phrase> <link linkend="id465603-bb"><phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">explicit</phrase> <link linkend="id465628-bb"><phrase role="keyword">operator</phrase> <phrase role="keyword">bool</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is set to point to an actual old value via either  <computeroutput><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput> or <computeroutput><link linkend="boost.contract.make_old_id465946">boost::contract::make_old</link></computeroutput> (that is why this class does not have public non-default constructors). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> T</literallayout></para><para><para>Type of the pointed old value. This type must be copy constructible, otherwise this pointer will always be null and this library will generate a compile-time error if this pointer is dereferenced. </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.old_ptrconstruct-copy-destruct"/><computeroutput>old_ptr</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id465647-bb"/><phrase role="identifier">old_ptr</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object as a null old value pointer. </listitem></orderedlist></refsect2><refsect2><title><anchor id="id465574-bb"/><computeroutput>old_ptr</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <anchor id="id465578-bb"/><phrase role="keyword">operator</phrase><phrase role="special">*</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Dereference this old value pointer. <para>This will generate a run-time error if this pointer is null and a compile-time error if the pointed type <computeroutput>T</computeroutput> is not copy constructible. 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>The old value (contract assertions should not change the state of the program so this member function is <computeroutput>const</computeroutput> and it returns the old value as a constant reference). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="keyword">const</phrase> <anchor id="id465603-bb"/><phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Structure-dereference this old value pointer. <para>This will generate a compile-time error if the pointed type <computeroutput>T</computeroutput> is not copy constructible. 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>The old value (contract assertions should not change the state of the program so this member function is <computeroutput>const</computeroutput> and it returns the old value as a constant pointer to a constant object). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">explicit</phrase> <anchor id="id465628-bb"/><phrase role="keyword">operator</phrase> <phrase role="keyword">bool</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Check if this old value pointer is null or not (safe-bool operator). <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>True if this pointer is not null, false otherwise. </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.old_ptr_noncopyable"><refmeta><refentrytitle>Class template old_ptr_noncopyable</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::old_ptr_noncopyable</refname><refpurpose>Old value pointer (that does not require the pointed old value type to be copy constructible). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> 
<phrase role="keyword">class</phrase> <link linkend="boost.contract.old_ptr_noncopyable">old_ptr_noncopyable</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// types</phrase>
  <phrase role="keyword">typedef</phrase> <phrase role="identifier">T</phrase> <anchor id="boost.contract.old_ptr_noncopyable.element_type"/><phrase role="identifier">element_type</phrase><phrase role="special">;</phrase>  <phrase role="comment">// Pointed old value type. </phrase>

  <phrase role="comment">// <link linkend="boost.contract.old_ptr_noncopyableconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <link linkend="id465776-bb"><phrase role="identifier">old_ptr_noncopyable</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <link linkend="id465781-bb"><phrase role="identifier">old_ptr_noncopyable</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.old_ptr">old_ptr</link><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>

  <phrase role="comment">// <link linkend="id465705-bb">public member functions</link></phrase>
  <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <link linkend="id465709-bb"><phrase role="keyword">operator</phrase><phrase role="special">*</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="keyword">const</phrase> <link linkend="id465733-bb"><phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">explicit</phrase> <link linkend="id465757-bb"><phrase role="keyword">operator</phrase> <phrase role="keyword">bool</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is set to point to an actual old value via either  <computeroutput><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput> or <computeroutput><link linkend="boost.contract.make_old_id465946">boost::contract::make_old</link></computeroutput>. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><refsect2><title>Template Parameters</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">typename</phrase> T</literallayout></para><para><para>Type of pointed old value. If this type is not copy constructible, this pointer will always be null (but this library will not generate compile-time errors when this pointer is dereferenced). </para></para></listitem></orderedlist></refsect2><refsect2><title><anchor id="boost.contract.old_ptr_noncopyableconstruct-copy-destruct"/><computeroutput>old_ptr_noncopyable</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><anchor id="id465776-bb"/><phrase role="identifier">old_ptr_noncopyable</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object as a null old value pointer. </listitem><listitem><para><literallayout class="monospaced"><anchor id="id465781-bb"/><phrase role="identifier">old_ptr_noncopyable</phrase><phrase role="special">(</phrase><link linkend="boost.contract.old_ptr">old_ptr</link><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> other<phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from an old value pointer of copyable-only types. <para>This constructor is implicitly called by this library when assigning an object of this type using <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_OLDOF">BOOST_CONTRACT_OLDOF</link></computeroutput></computeroutput>. 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>other</computeroutput></term><listitem><para>Copyable-only old value pointer. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2><refsect2><title><anchor id="id465705-bb"/><computeroutput>old_ptr_noncopyable</computeroutput> public member functions</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <anchor id="id465709-bb"/><phrase role="keyword">operator</phrase><phrase role="special">*</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Dereference this old value pointer. <para>This will generate a run-time error if this pointer is null (but no compile-time error if the pointed type <computeroutput>T</computeroutput> is not copy constructible). 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>The old value (contract assertions should not change the state of the program so this member function is <computeroutput>const</computeroutput> and it returns the old vale as a constant reference). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="keyword">const</phrase> <anchor id="id465733-bb"/><phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Structure-dereference this old value pointer. <para>(This will not generate a compile-time error if the pointed type <computeroutput>T</computeroutput> is not copy constructible.) 
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>The old value (contract assertions should not change the state of the program so this member function is <computeroutput>const</computeroutput> and it returns the old value as a constant pointer to a constant object). </para></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">explicit</phrase> <anchor id="id465757-bb"/><phrase role="keyword">operator</phrase> <phrase role="keyword">bool</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></literallayout></para>Check if this old value pointer is null or not (safe-bool operator). <para>
</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>True if this pointer is not null, false otherwise. </para></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.old_value"><refmeta><refentrytitle>Class old_value</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::old_value</refname><refpurpose>Convert user expressions in old values. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<phrase role="keyword">class</phrase> <link linkend="boost.contract.old_value">old_value</link> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="comment">// <link linkend="boost.contract.old_valueconstruct-copy-destruct">construct/copy/destruct</link></phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> 
    <link linkend="id465842-bb"><phrase role="identifier">old_value</phrase></link><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">,</phrase> 
              <phrase role="keyword">typename</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">enable_if</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase><phrase role="special">::</phrase><phrase role="identifier">type</phrase> <phrase role="special">*</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> 
    <link linkend="id465881-bb"><phrase role="identifier">old_value</phrase></link><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="special">,</phrase> 
              <phrase role="keyword">typename</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">disable_if</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase><phrase role="special">::</phrase><phrase role="identifier">type</phrase> <phrase role="special">*</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This class is often only implicitly used by this library and it does not explicitly appear in user code.</para><para>On older compilers that cannot correctly deduce the <computeroutput>boost::is_copy_constructible</computeroutput> trait, programmers can manually specialize that trait to make sure that only old value types that are copy constructible are actually copied (see the <computeroutput>boost::is_copy_constructible</computeroutput> documentation). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>
</para><refsect2><title><anchor id="boost.contract.old_valueconstruct-copy-destruct"/><computeroutput>old_value</computeroutput> 
        public
       construct/copy/destruct</title><orderedlist><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> 
  <anchor id="id465842-bb"/><phrase role="identifier">old_value</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> old<phrase role="special">,</phrase> 
            <phrase role="keyword">typename</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">enable_if</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase><phrase role="special">::</phrase><phrase role="identifier">type</phrase> <phrase role="special">*</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from the specified old value when the old value type is copy constructible. <para>The specified old value is copied (one time only) and the related old value pointer will be set to not null (no copy is made instead if postconditions are not being checked, see <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput></computeroutput>). 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>old</computeroutput></term><listitem><para>Old value to be copied. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>T</computeroutput></term><listitem><para>Old value type. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem><listitem><para><literallayout class="monospaced"><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> T<phrase role="special">&gt;</phrase> 
  <anchor id="id465881-bb"/><phrase role="identifier">old_value</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> old<phrase role="special">,</phrase> 
            <phrase role="keyword">typename</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">disable_if</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">is_copy_constructible</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase><phrase role="special">::</phrase><phrase role="identifier">type</phrase> <phrase role="special">*</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></literallayout></para>Construct this object from the specified old value when the old value type is not copy constructible. <para>The specified old value cannot be copied in this case so it is not copied and the related old value pointer will always be null. 

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>old</computeroutput></term><listitem><para>Old value (that will not be copied in this case). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>T</computeroutput></term><listitem><para>Old value type. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></listitem></orderedlist></refsect2></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.null_old"><refmeta><refentrytitle>Function null_old</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::null_old</refname><refpurpose>Make a null old value copy. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<link linkend="boost.contract.old_value">old_value</link> <phrase role="identifier">null_old</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>The related old value pointer will always be null. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>Null old value copy. </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.make_old_id465946"><refmeta><refentrytitle>Function make_old</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::make_old</refname><refpurpose>Make an old value pointer (not to be used for for virtual and overriding public functions). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<link linkend="boost.contract.old_pointer">old_pointer</link> <phrase role="identifier">make_old</phrase><phrase role="special">(</phrase><link linkend="boost.contract.old_value">old_value</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> old<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>The related old value pointer will not be null if the specified old value was actually copied. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>old</computeroutput></term><listitem><para>Old value (usually implicitly constructed from the user old value expression to be copied). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>Old value pointer (usually implicitly converted to either  <computeroutput><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput> or  <computeroutput><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput> in user code). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.make_old_id466761"><refmeta><refentrytitle>Function make_old</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::make_old</refname><refpurpose>Make an old value pointer (to be used for virtual and overriding public functions). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<link linkend="boost.contract.old_pointer">old_pointer</link> <phrase role="identifier">make_old</phrase><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase> v<phrase role="special">,</phrase> <link linkend="boost.contract.old_value">old_value</link> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> old<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>The related old value pointer will not be null if the specified old value was actually copied. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>old</computeroutput></term><listitem><para>Old value (usually implicitly constructed from the user old value expression to be copied). </para></listitem></varlistentry><varlistentry><term><computeroutput>v</computeroutput></term><listitem><para>The contracted virtual and overriding function extra trailing parameter of type <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> and with default value <computeroutput>0</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>Old value pointer (usually implicitly converted to either  <computeroutput><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput> or  <computeroutput><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput> in user code). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.copy_old_id466837"><refmeta><refentrytitle>Function copy_old</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::copy_old</refname><refpurpose>Check if old values need to be copied (not to be used for virtual and overriding public functions). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<phrase role="keyword">bool</phrase> <phrase role="identifier">copy_old</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>For example, this function always returns false when postconditions are not being checked (see <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput></computeroutput>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Returns:</term><listitem><para>True if old values are being copied, false otherwise. </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.copy_old_id466872"><refmeta><refentrytitle>Function copy_old</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::copy_old</refname><refpurpose>Check if old values need to be copied (to be used for virtual and overriding public functions). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>
<phrase role="keyword">bool</phrase> <phrase role="identifier">copy_old</phrase><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase> v<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>For example, this function always returns false when postconditions are not being checked (see <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_NO_POSTCONDITIONS">BOOST_CONTRACT_NO_POSTCONDITIONS</link></computeroutput></computeroutput>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.advanced_topics"> Advanced Topics</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>v</computeroutput></term><listitem><para>The contracted virtual and overriding function extra trailing parameter of type <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> and with default value <computeroutput>0</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>True if old values are being copied, false otherwise. </para></listitem></varlistentry></variablelist></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_OLDOF"><refmeta><refentrytitle>Macro BOOST_CONTRACT_OLDOF</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_OLDOF</refname><refpurpose>Macro typically used to copy an old value expression and assign it to an old value pointer. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.old_hpp">boost/contract/old.hpp</link>&gt;

</phrase>BOOST_CONTRACT_OLDOF(...)</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>The expression expanded by this macro should be assigned to an old value pointer of type <computeroutput><link linkend="boost.contract.old_ptr">boost::contract::old_ptr</link></computeroutput> or  <computeroutput><link linkend="boost.contract.old_ptr_noncopyable">boost::contract::old_ptr_noncopyable</link></computeroutput>.</para><para>This is a variadic macro. On compilers that do not support variadic macros, programmers can manually copy old value expressions without using this macro (see <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
              list-presentation="table"
            ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                      list-presentation="table"
                    ?><varlistentry><term><computeroutput>...</computeroutput></term><listitem><para>This macro usually takes a single parameter as the old value expression to be copied. However, for virtual and overriding public functions where the extra  <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> function parameter must be used, this macro takes two parameters: The first parameter is the pointer to <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput> and the second parameter is the old value expression to be copied. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.override_hpp"><title>Header &lt;<ulink url="../..//boost/contract/override.hpp">boost/contract/override.hpp</ulink>&gt;</title><para>Facilities to specify contracts for overriding public functions (to support subcontracting). </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude">

<link linkend="BOOST_CONTRACT_NAMED_OVERRIDE">BOOST_CONTRACT_NAMED_OVERRIDE</link>(override_name, function_name)
<link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link>(function_name)
<link linkend="BOOST_CONTRACT_OVERRIDES">BOOST_CONTRACT_OVERRIDES</link>(...)</synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_NAMED_OVERRIDE"><refmeta><refentrytitle>Macro BOOST_CONTRACT_NAMED_OVERRIDE</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_NAMED_OVERRIDE</refname><refpurpose>Declare an override type with an arbitrary name. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.override_hpp">boost/contract/override.hpp</link>&gt;

</phrase>BOOST_CONTRACT_NAMED_OVERRIDE(override_name, function_name)</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Declare the override type to be passed as an explicit template parameter to  <computeroutput><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput> for overriding public functions. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
              list-presentation="table"
            ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                      list-presentation="table"
                    ?><varlistentry><term><computeroutput>function_name</computeroutput></term><listitem><para>Name of the overriding public function. This macro is called just once even if the function name is overloaded and the same override type can be used for all functions in the same overload set (see  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>override_name</computeroutput></term><listitem><para>Name of override type to declare. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_OVERRIDE"><refmeta><refentrytitle>Macro BOOST_CONTRACT_OVERRIDE</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_OVERRIDE</refname><refpurpose>Declare an override type naming it <computeroutput>override_<emphasis>function_name</emphasis></computeroutput>. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.override_hpp">boost/contract/override.hpp</link>&gt;

</phrase>BOOST_CONTRACT_OVERRIDE(function_name)</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>Declare the override type to be passed as an explicit template parameter to  <computeroutput><link linkend="boost.contract.public_function_id467153">boost::contract::public_function</link></computeroutput> for overriding public functions. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
              list-presentation="table"
            ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                      list-presentation="table"
                    ?><varlistentry><term><computeroutput>function_name</computeroutput></term><listitem><para>Name of the overriding public function. This macro is called just once even if the function name is overloaded and the same override type can be used for all functions in the same overload set (see  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></refsect1></refentry>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="BOOST_CONTRACT_OVERRIDES"><refmeta><refentrytitle>Macro BOOST_CONTRACT_OVERRIDES</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>BOOST_CONTRACT_OVERRIDES</refname><refpurpose>Declare multiple override types at once naming them <computeroutput>override_...</computeroutput> (for convenience). </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.override_hpp">boost/contract/override.hpp</link>&gt;

</phrase>BOOST_CONTRACT_OVERRIDES(...)</synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is a variadic macro. On compilers that do not support variadic macros, the override types can be programmed one-by-one calling  <computeroutput><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput> for each function name. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>

</para><variablelist spacing="compact"><?dbhtml 
              list-presentation="table"
            ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                      list-presentation="table"
                    ?><varlistentry><term><computeroutput>...</computeroutput></term><listitem><para>A comma separated list of one or more names of overriding public functions. </para></listitem></varlistentry></variablelist></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
<section id="header.boost.contract.public_function_hpp"><title>Header &lt;<ulink url="../..//boost/contract/public_function.hpp">boost/contract/public_function.hpp</ulink>&gt;</title><para>Program contracts for public member functions. </para><para>Overloads are provided to handle static, virtual void, virtual non-void, overriding void, and override non-void public functions. </para><synopsis xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">contract</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <link linkend="boost.contract.public_function_id467153"><phrase role="identifier">public_function</phrase></link><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <link linkend="boost.contract.public_function_id467211"><phrase role="identifier">public_function</phrase></link><phrase role="special">(</phrase><phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> 
      <link linkend="boost.contract.public_function_id467286"><phrase role="identifier">public_function</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase><phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.public_function_id467388"><phrase role="identifier">public_function</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase><phrase role="special">,</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&amp;</phrase><phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Override<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> F<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Class<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase><phrase role="special">...</phrase> Args<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> 
      <link linkend="boost.contract.public_function_id467519"><phrase role="identifier">public_function</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase><phrase role="special">,</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">,</phrase> <phrase role="identifier">Args</phrase> <phrase role="special">&amp;</phrase><phrase role="special">...</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Override<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> F<phrase role="special">,</phrase> 
             <phrase role="keyword">typename</phrase> Class<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase><phrase role="special">...</phrase> Args<phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> 
      <link linkend="boost.contract.public_function_id467674"><phrase role="identifier">public_function</phrase></link><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase><phrase role="special">,</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&amp;</phrase><phrase role="special">,</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase><phrase role="special">,</phrase> <phrase role="identifier">Args</phrase> <phrase role="special">&amp;</phrase><phrase role="special">...</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">}</phrase></synopsis>
<refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.public_function_id467153"><refmeta><refentrytitle>Function template public_function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::public_function</refname><refpurpose>Program contracts for static public functions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.public_function_hpp">boost/contract/public_function.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, old value assignments at body, and check static class invariants for static public functions.</para><para>For optimization, this can be omitted for static public functions that do not have preconditions and postconditions when the enclosing class has no static invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Class</computeroutput></term><listitem><para>The class of the contracted member function. This template parameter must be explicitly specified for static public functions (because they have no object <computeroutput>this</computeroutput> so there is no function argument from which this type template parameter can be automatically deduced). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.public_function_id467211"><refmeta><refentrytitle>Function template public_function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::public_function</refname><refpurpose>Program contracts for non-static, non-virtual, and not overriding public functions. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.public_function_hpp">boost/contract/public_function.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> <phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, old value assignments at body, and check class invariants for public functions that are not static, not virtual, and do not override.</para><para>For optimization, this can be omitted for public functions that do not have preconditions and postconditions when the enclosing class has no (non-static) invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted function. This object can be <computeroutput>const</computeroutput> and <computeroutput>volatile</computeroutput> depending on the cv-qualifier for the contracted function (volatile public functions will check volatile class invariants, see also  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.public_function_id467286"><refmeta><refentrytitle>Function template public_function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::public_function</refname><refpurpose>Program contracts for virtual, not overriding public functions returning void. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.public_function_hpp">boost/contract/public_function.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> 
  <phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase> v<phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, old value assignments at body, and check class invariants for public functions that are virtual, do not override, and return <computeroutput>void</computeroutput>.</para><para>For optimization, this can be omitted for public functions that do not have preconditions and postconditions when the enclosing class has no (non-static) invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted function. This object can be <computeroutput>const</computeroutput> and <computeroutput>volatile</computeroutput> depending on the cv-qualifier for the contracted function (volatile public functions will check volatile class invariants, see also  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>v</computeroutput></term><listitem><para>The contracted virtual function extra trailing parameter of type  <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> and with default value <computeroutput>0</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see  <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.public_function_id467388"><refmeta><refentrytitle>Function template public_function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::public_function</refname><refpurpose>Program contracts for virtual, not overriding public functions returning non-void. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.public_function_hpp">boost/contract/public_function.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Class<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> 
  <phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase> v<phrase role="special">,</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&amp;</phrase> r<phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, old value assignments at body, and check class invariants for public functions that are virtual, do not override, and do not return <computeroutput>void</computeroutput>.</para><para>For optimization, this can be omitted for public functions that do not have preconditions and postconditions when the enclosing class has no (non-static) invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>


</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted function. This object can be <computeroutput>const</computeroutput> and <computeroutput>volatile</computeroutput> depending on the cv-qualifier for the contracted function (volatile public functions will check volatile class invariants, see also  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>r</computeroutput></term><listitem><para>A reference to the contracted virtual function return value (this can be a local variable within the contracted function scope, but it must be set by programmers at each function <computeroutput>return</computeroutput> statement). The type of this parameter must be the same as (or compatible with) the contracted function return type (this library might not be able to raise a compile-time error if that is not the case (because this function does not take a pointer to the contracted function or similar), but in general such a type mismatch will cause a run-time error or undefined behaviour). Alternatively, <computeroutput>boost::optional&lt;<emphasis>return_type</emphasis>&gt;</computeroutput> can be used here (see  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>v</computeroutput></term><listitem><para>The contracted virtual function extra trailing parameter of type  <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> and with default value <computeroutput>0</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see  <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.public_function_id467519"><refmeta><refentrytitle>Function template public_function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::public_function</refname><refpurpose>Program contracts for overriding public functions (virtual or not) returning void. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.public_function_hpp">boost/contract/public_function.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Override<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> F<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> Class<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase><phrase role="special">...</phrase> Args<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link> 
  <phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase> v<phrase role="special">,</phrase> <phrase role="identifier">F</phrase> f<phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">,</phrase> <phrase role="identifier">Args</phrase> <phrase role="special">&amp;</phrase><phrase role="special">...</phrase> args<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, old value assignments at body, and check class invariants for overriding public functions (virtual or not) that return <computeroutput>void</computeroutput>.</para><para>For optimization, this can be omitted for public functions that do not have preconditions and postconditions when the enclosing class has no (non-static) invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>



</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>args</computeroutput></term><listitem><para>The contracted function arguments (by reference and in the oder they appear in the contracted function declaration). On compilers that do not support variadic templates, this library internally implements this function using preprocessor meta-programming (in this case, the maximum number of supported arguments <computeroutput>args</computeroutput> is defined by  <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_MAX_ARGS">BOOST_CONTRACT_MAX_ARGS</link></computeroutput></computeroutput>). </para></listitem></varlistentry><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>A pointer to the contracted function. </para></listitem></varlistentry><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted function. This object can be <computeroutput>const</computeroutput> and <computeroutput>volatile</computeroutput> depending on the cv-qualifier for the contracted function (volatile public functions will check volatile class invariants, see also  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>v</computeroutput></term><listitem><para>The contracted virtual function extra trailing parameter of type  <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> and with default value <computeroutput>0</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Override</computeroutput></term><listitem><para>The type <computeroutput>override_</computeroutput>... declared using the  <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput></computeroutput> (or similar) macro using the contracted function name. This template parameter must be explicitly specified (because there is no function arguments from which this type template parameter can be automatically deduced). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see  <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry><refentry xmlns:xi="http://www.w3.org/2001/XInclude" id="boost.contract.public_function_id467674"><refmeta><refentrytitle>Function template public_function</refentrytitle><manvolnum>3</manvolnum></refmeta><refnamediv><refname>boost::contract::public_function</refname><refpurpose>Program contracts for overriding public functions (virtual or not) returning non-void. </refpurpose></refnamediv><refsynopsisdiv><synopsis><phrase role="comment">// In header: &lt;<link linkend="header.boost.contract.public_function_hpp">boost/contract/public_function.hpp</link>&gt;

</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> Override<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> VirtualResult<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> F<phrase role="special">,</phrase> 
         <phrase role="keyword">typename</phrase> Class<phrase role="special">,</phrase> <phrase role="keyword">typename</phrase><phrase role="special">...</phrase> Args<phrase role="special">&gt;</phrase> 
  <link linkend="boost.contract.specify_precondit_id464674">specify_precondition_old_postcondition</link><phrase role="special">&lt;</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&gt;</phrase> 
  <phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><link linkend="boost.contract.virtual_">virtual_</link> <phrase role="special">*</phrase> v<phrase role="special">,</phrase> <phrase role="identifier">VirtualResult</phrase> <phrase role="special">&amp;</phrase> r<phrase role="special">,</phrase> <phrase role="identifier">F</phrase> f<phrase role="special">,</phrase> <phrase role="identifier">Class</phrase> <phrase role="special">*</phrase> obj<phrase role="special">,</phrase> 
                  <phrase role="identifier">Args</phrase> <phrase role="special">&amp;</phrase><phrase role="special">...</phrase> args<phrase role="special">)</phrase><phrase role="special">;</phrase></synopsis></refsynopsisdiv><refsect1><title>Description</title><para>This is used to specify preconditions, postconditions, old value assignments at body, and check class invariants for overriding public functions (virtual or not) that do not return <computeroutput>void</computeroutput>.</para><para>For optimization, this can be omitted for public functions that do not have preconditions and postconditions when the enclosing class has no (non-static) invariants. <para><emphasis role="bold">See Also:</emphasis><para> <link linkend="boost_contract.tutorial"> Tutorial</link> </para></para>



</para><variablelist spacing="compact"><?dbhtml 
          list-presentation="table"
        ?><varlistentry><term>Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>args</computeroutput></term><listitem><para>The contracted function arguments (by reference and in the oder they appear in the contracted function declaration). On compilers that do not support variadic templates, this library internally implements this function using preprocessor meta-programming (in this case, the maximum number of supported arguments <computeroutput>args</computeroutput> is defined by  <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_MAX_ARGS">BOOST_CONTRACT_MAX_ARGS</link></computeroutput></computeroutput>). </para></listitem></varlistentry><varlistentry><term><computeroutput>f</computeroutput></term><listitem><para>A pointer to the contracted function. </para></listitem></varlistentry><varlistentry><term><computeroutput>obj</computeroutput></term><listitem><para>The object <computeroutput>this</computeroutput> from the scope of the contracted function. This object can be <computeroutput>const</computeroutput> and <computeroutput>volatile</computeroutput> depending on the cv-qualifier for the contracted function (volatile public functions will check volatile class invariants, see also  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>r</computeroutput></term><listitem><para>A reference to the contracted virtual function return value (this can be a local variable within the contracted function scope, but it must be set by programmers at each function <computeroutput>return</computeroutput> statement). The type of this parameter must be the same as (or compatible with) the contracted function return type as specified by <computeroutput>F</computeroutput> (this library will generate a compile-time error otherwise) Alternatively, <computeroutput>boost::optional&lt;<emphasis>return_type</emphasis>&gt;</computeroutput> can be used here (see  <link linkend="boost_contract.advanced_topics"> Advanced Topics</link>). </para></listitem></varlistentry><varlistentry><term><computeroutput>v</computeroutput></term><listitem><para>The contracted virtual function extra trailing parameter of type  <computeroutput><computeroutput><link linkend="boost.contract.virtual_">boost::contract::virtual_</link></computeroutput></computeroutput><computeroutput>*</computeroutput> and with default value <computeroutput>0</computeroutput>. </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Template Parameters:</term><listitem><variablelist spacing="compact"><?dbhtml 
                  list-presentation="table"
                ?><varlistentry><term><computeroutput>Override</computeroutput></term><listitem><para>The type <computeroutput>override_</computeroutput>... declared using the  <computeroutput><computeroutput><link linkend="BOOST_CONTRACT_OVERRIDE">BOOST_CONTRACT_OVERRIDE</link></computeroutput></computeroutput> (or similar) macro using the contracted function name. This template parameter must be explicitly specified (because there is no function arguments from which this type template parameter can be automatically deduced). </para></listitem></varlistentry></variablelist></listitem></varlistentry><varlistentry><term>Returns:</term><listitem><para>The result of this function must be assigned to a variable of type  <computeroutput><link linkend="boost.contract.guard">boost::contract::guard</link></computeroutput> declared locally just before the body of the contracted function (otherwise this library will generate a run-time error, see  <computeroutput><link linkend="BOOST_CONTRACT_ON_MISSING_GUARD">BOOST_CONTRACT_ON_MISSING_GUARD</link></computeroutput>). </para></listitem></varlistentry></variablelist></refsect1></refentry>
</section>
</section>
  <section id="boost_contract.examples">
    <title><link linkend="boost_contract.examples">Examples</link></title>
    <para>
      This section lists examples taken from different Contract Programming sources
      and re-implemented using this library.
    </para>
    <para>
      Some of these examples might be from old sources, containing old or obsolete
      code practices, not optimized for execution speed, and they be more relevant
      in the context programming languages other than C++. Nevertheless, programmers
      are encouraged to review these examples to see a few diverse usages of this
      library that might be relevant for the contracts they need to write in their
      code.
    </para>
    <para>
      Sources:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <link linkend="N1962_anchor">[N1962]</link>: Examples from the proposal
          to add Contract Programming to C++11 (unfortunately, this proposal was
          never accepted into the standard).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="Meyer97_anchor">[Meyer97]</link>: Examples using the Eiffel
          programming language and reprogrammed using this library for C++.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="Mitchell02_anchor">[Mitchell02]</link>: Additional examples
          using the Eiffel programming language and reprogrammed using this library
          for C++.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="Cline90_anchor">[Cline90]</link>: Examples from a very early
          proposal called Annotated C++ (A++) to add Contract Programming to C++
          (A++ was never implemented or proposed for addition to the standard).
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      A few notable examples:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          <link linkend="N1962_vector_anchor">[N1962] Vector</link>: Complete contracts
          for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase></computeroutput> and a comparison with <link linkend="N1962_anchor">[N1962]</link>
          syntax.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="N1962_square_root_anchor">[N1962] Square Root</link>: Comparison
          with D syntax.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="Mitchell02_counter_anchor">[Mitchell02] Counter</link>:
          Subcontracting.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="Meyer97_stack4_anchor">[Meyer97] Stack4</link>: Comparison
          with Eiffel syntax.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <link linkend="Cline90_vector_anchor">[Cline90] Vector</link>: Comparison
          with A++ syntax.
        </simpara>
      </listitem>
    </itemizedlist>
    <anchor id="N1962_vector_anchor"/>
    <bridgehead renderas="sect3" id="boost_contract.examples.h0">
      <phrase id="boost_contract.examples._n1962__vector__stl_vector_contracts_and_comparison_with_c___contract_proposal_syntax"/><link linkend="boost_contract.examples._n1962__vector__stl_vector_contracts_and_comparison_with_c___contract_proposal_syntax">[N1962]
      Vector: STL Vector contracts and comparison with C++ contract proposal syntax</link>
    </bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <para>
                This Library
              </para>
            </entry>
            <entry>
              <para>
                Contract [N1962] and Static-If [N3613] Proposals (neither part of
                C++)
              </para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">bind</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">/</phrase><phrase role="identifier">cxx11</phrase><phrase role="special">/</phrase><phrase role="identifier">all_of</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">type_traits</phrase><phrase role="special">/</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">functional</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iterator</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">memory</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Could be programmed at call site with C++14 generic lambdas.</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">all_of_equal_to</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">result_type</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">result_type</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// STL vector requires T copyable but not equality comparable.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">allocator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">())</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()));</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">rbegin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">rend</phrase><phrase role="special">())</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()));</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">allocator_type</phrase> <phrase role="identifier">allocator_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">pointer</phrase> <phrase role="identifier">pointer</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_pointer</phrase> <phrase role="identifier">const_pointer</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">reference</phrase> <phrase role="identifier">reference</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_reference</phrase> <phrase role="identifier">const_reference</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value_type</phrase> <phrase role="identifier">value_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">iterator</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">const_iterator</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">size_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">difference_type</phrase> <phrase role="identifier">difference_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">reverse_iterator</phrase>
            <phrase role="identifier">reverse_iterator</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_reverse_iterator</phrase>
            <phrase role="identifier">const_reverse_iterator</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">alloc</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">all_of_equal_to</phrase><phrase role="special">(),</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">T</phrase><phrase role="special">())</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">all_of_equal_to</phrase><phrase role="special">(),</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
            <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">all_of_equal_to</phrase><phrase role="special">(),</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">alloc</phrase> <phrase role="special">==</phrase> <phrase role="identifier">get_allocator</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase>
                        <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
            <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">,</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase>
                        <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()));</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* implicit */</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="identifier">result</phrase><phrase role="special">),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase> <phrase role="special">!=</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="identifier">vect_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">vector</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">reserve</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">reserve</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">size_type</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">size_type</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">const_iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">reverse_iterator</phrase> <phrase role="identifier">rbegin</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">rend</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rbegin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_reverse_iterator</phrase> <phrase role="identifier">rbegin</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">const_reverse_iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">rend</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rbegin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">reverse_iterator</phrase> <phrase role="identifier">rend</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rend</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_reverse_iterator</phrase> <phrase role="identifier">rend</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rend</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">all_of_equal_to</phrase><phrase role="special">(),</phrase> <phrase role="identifier">begin</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase><phrase role="special">,</phrase>
                                    <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
                        <phrase role="special">)</phrase>
                    <phrase role="special">);</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">size_type</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">size_type</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">size_type</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">size_type</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">Allocator</phrase> <phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">get_allocator</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">reference</phrase> <phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// No precondition because throws out_of_range for invalid index.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_reference</phrase> <phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// No precondition because throws out_of_range for invalid index.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">reference</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_reference</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">reference</phrase> <phrase role="identifier">front</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">front</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_reference</phrase> <phrase role="identifier">front</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">front</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">reference</phrase> <phrase role="identifier">back</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">const_reference</phrase> <phrase role="identifier">back</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_capacity</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_capacity</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;(),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">back</phrase><phrase role="special">()),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">pop_back</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">pop_back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="comment">// Precondition: [begin(), end()) does not contain [first, last).</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase>
                        <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">all_of_equal_to</phrase><phrase role="special">(),</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">iterator</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;(),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="identifier">result</phrase><phrase role="special">),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                    <phrase role="comment">//  if(capacity() &gt; oldof capacity())</phrase>
                    <phrase role="comment">//      [begin(), end()) is invalid</phrase>
                    <phrase role="comment">//  else</phrase>
                    <phrase role="comment">//      [where, end()) is invalid</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_capacity</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">iterator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_where</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">+</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_capacity</phrase><phrase role="special">);</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_capacity</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">all_of_equal_to</phrase><phrase role="special">(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">prior</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_where</phrase><phrase role="special">),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">prior</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_where</phrase><phrase role="special">)</phrase> <phrase role="special">+</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase>
                            <phrase role="special">)</phrase>
                        <phrase role="special">)</phrase>
                    <phrase role="special">);</phrase>
                    <phrase role="comment">// [where, end()) is invalid</phrase>
                <phrase role="special">}</phrase>
                <phrase role="comment">// else [begin(), end()) is invalid</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_capacity</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;</phrase>
                        <phrase role="identifier">max_size</phrase><phrase role="special">());</phrase>
                <phrase role="comment">// [first, last) not contained in [begin(), end())</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase>
                        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">));</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_capacity</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">iterator</phrase> <phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">end</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">());</phrase>
                <phrase role="comment">// [where, end()) is invalid</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">iterator</phrase> <phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">iterator</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">iterator</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">size_type</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_size</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_size</phrase> <phrase role="special">-</phrase>
                        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">));</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">());</phrase>
                <phrase role="comment">// [first, last) is invalid</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">clear</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase><phrase role="identifier">vector</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_me</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_other</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase>
                            <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_other</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">check_if</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase>
                            <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase>
                        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(),</phrase>
                                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">),</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">cref</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_me</phrase><phrase role="special">))</phrase>
                    <phrase role="special">)</phrase>
                <phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">swap</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">friend</phrase> <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">left</phrase><phrase role="special">,</phrase> <phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">right</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">left</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="comment">// char type has operator==.</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">v</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="char">'\0'</phrase><phrase role="special">));</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">cv</phrase> <phrase role="special">=</phrase> <phrase role="identifier">v</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">cv</phrase> <phrase role="special">==</phrase> <phrase role="identifier">v</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">w</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">w</phrase> <phrase role="special">==</phrase> <phrase role="identifier">v</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">typename</phrase> <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(*</phrase><phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="char">'\0'</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">typename</phrase> <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">ci</phrase> <phrase role="special">=</phrase> <phrase role="identifier">cv</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(*</phrase><phrase role="identifier">ci</phrase> <phrase role="special">==</phrase> <phrase role="char">'\0'</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">i</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase> <phrase role="char">'a'</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">[</phrase><phrase role="number">0</phrase><phrase role="special">]</phrase> <phrase role="special">==</phrase> <phrase role="char">'a'</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">[</phrase><phrase role="number">1</phrase><phrase role="special">]</phrase> <phrase role="special">==</phrase> <phrase role="char">'a'</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="char">'b'</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">back</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="char">'b'</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">struct</phrase> <phrase role="identifier">x</phrase> <phrase role="special">{};</phrase> <phrase role="comment">// x type doest not have operator==.</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">x</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">y</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">x</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">cy</phrase> <phrase role="special">=</phrase> <phrase role="identifier">y</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">x</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">z</phrase><phrase role="special">(</phrase><phrase role="identifier">y</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">typename</phrase> <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">x</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">j</phrase> <phrase role="special">=</phrase> <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">j</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">());</phrase>
    <phrase role="keyword">typename</phrase> <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">x</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">cj</phrase> <phrase role="special">=</phrase> <phrase role="identifier">cy</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">cj</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">cy</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">());</phrase>

    <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">j</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">());</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
              </para>
            </entry>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">// Extra spaces, newlines, etc. for visual alignment with this library code.</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">/</phrase><phrase role="identifier">cxx11</phrase><phrase role="special">/</phrase><phrase role="identifier">all_of</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">type_traits</phrase><phrase role="special">/</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iterator</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">memory</phrase><phrase role="special">&gt;</phrase>














<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">allocator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">{</phrase>


    <phrase role="identifier">invariant</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">())</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">rbegin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">rend</phrase><phrase role="special">())</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
        <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">allocator_type</phrase> <phrase role="identifier">allocator_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">pointer</phrase> <phrase role="identifier">pointer</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_pointer</phrase> <phrase role="identifier">const_pointer</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">reference</phrase> <phrase role="identifier">reference</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_reference</phrase> <phrase role="identifier">const_reference</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value_type</phrase> <phrase role="identifier">value_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">iterator</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">const_iterator</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">size_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">difference_type</phrase> <phrase role="identifier">difference_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">reverse_iterator</phrase>
            <phrase role="identifier">reverse_iterator</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_reverse_iterator</phrase>
            <phrase role="identifier">const_reverse_iterator</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">vector</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">()</phrase>
    <phrase role="special">{}</phrase>


    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
            <phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">alloc</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>


    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">T</phrase><phrase role="special">());</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>




    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>





    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
            <phrase role="special">}</phrase>
            <phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>






    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>



    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
            <phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">,</phrase> <phrase role="identifier">alloc</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>




    <phrase role="comment">/* implicit */</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="special">*</phrase><phrase role="keyword">this</phrase> <phrase role="special">==</phrase> <phrase role="identifier">other</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
        <phrase role="special">:</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>





    <phrase role="identifier">vector</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="special">*</phrase><phrase role="keyword">this</phrase> <phrase role="special">==</phrase> <phrase role="identifier">other</phrase><phrase role="special">;</phrase>
                <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase> <phrase role="special">!=</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="identifier">vect_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>












    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">vector</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>



    <phrase role="keyword">void</phrase> <phrase role="identifier">reserve</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">count</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">reserve</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">size_type</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">const_iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>


    <phrase role="identifier">const_iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>


    <phrase role="identifier">reverse_iterator</phrase> <phrase role="identifier">rbegin</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">rend</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rbegin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">const_reverse_iterator</phrase> <phrase role="identifier">rbegin</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">rend</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rbegin</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">reverse_iterator</phrase> <phrase role="identifier">rend</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rend</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>


    <phrase role="identifier">const_reverse_iterator</phrase> <phrase role="identifier">rend</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">rend</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>


    <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">())</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">(),</phrase>
                            <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>







    <phrase role="identifier">size_type</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">result</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">size_type</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>




    <phrase role="identifier">Alloctor</phrase> <phrase role="identifier">get_allocator</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">get_allocator</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>


    <phrase role="identifier">reference</phrase> <phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// No precondition because throws out_of_range for invalid index.</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>


    <phrase role="identifier">const_reference</phrase> <phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// No precondition because throws out_of_range for invalid index.</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>


    <phrase role="identifier">reference</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">const_reference</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">reference</phrase> <phrase role="identifier">front</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="special">!</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">front</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">const_reference</phrase> <phrase role="identifier">front</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="special">!</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">front</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">reference</phrase> <phrase role="identifier">back</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">const_reference</phrase> <phrase role="identifier">back</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>



    <phrase role="keyword">void</phrase> <phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
            <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">back</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>










    <phrase role="keyword">void</phrase> <phrase role="identifier">pop_back</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="special">!</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">pop_back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>





    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">InputIter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">InputIter</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase>
        <phrase role="comment">// Precondition: [begin(), end()) does not contain [first, last).</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>




    <phrase role="keyword">void</phrase> <phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">vallue</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">count</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">assign</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>






    <phrase role="identifier">iterator</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="special">*</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
            <phrase role="comment">//  if(capacity() &gt; oldof capacity())</phrase>
            <phrase role="comment">//      [begin(), end()) is invalid</phrase>
            <phrase role="comment">//  else</phrase>
            <phrase role="comment">//      [where, end()) is invalid</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>









    <phrase role="keyword">void</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">size_type</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
            <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">::</phrase><phrase role="identifier">all_of_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">prior</phrase><phrase role="special">(</phrase><phrase role="identifier">oldof</phrase> <phrase role="identifier">where</phrase><phrase role="special">),</phrase>
                            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">prior</phrase><phrase role="special">(</phrase><phrase role="identifier">oldof</phrase> <phrase role="identifier">where</phrase><phrase role="special">)</phrase> <phrase role="special">+</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
                <phrase role="special">}</phrase>
                <phrase role="comment">// [where, end()) is invalid</phrase>
            <phrase role="special">}</phrase>
            <phrase role="comment">// else [begin(), end()) is invalid</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>














    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">InputIter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">max_size</phrase><phrase role="special">();</phrase>
            <phrase role="comment">// [first, last) is not contained in [begin(), end())</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">,</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>









    <phrase role="identifier">iterator</phrase> <phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">where</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="special">!</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
            <phrase role="identifier">where</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">end</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldod</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">();</phrase>
            <phrase role="comment">// [where, end()) is invalid</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">where</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>






    <phrase role="identifier">iterator</phrase> <phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">iterator</phrase> <phrase role="identifier">last</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">precondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">lasst</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">postcondition</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">distance</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">end</phrase><phrase role="special">();</phrase>
            <phrase role="comment">// [first, last) is invalid</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>







    <phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">()</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">clear</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>



    <phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase><phrase role="identifier">vector</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">postcondition</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">static</phrase> <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">has_equal_to</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="special">*</phrase><phrase role="keyword">this</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="identifier">other</phrase><phrase role="special">;</phrase>
                <phrase role="identifier">other</phrase> <phrase role="special">==</phrase> <phrase role="identifier">oldof</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">swap</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
















    <phrase role="keyword">friend</phrase> <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">left</phrase><phrase role="special">,</phrase> <phrase role="identifier">vector</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">right</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">left</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>










































<phrase role="comment">// End.</phrase>
</programlisting>
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect3" id="boost_contract.examples.h1">
      <phrase id="boost_contract.examples._n1962__circle__subcontracting"/><link linkend="boost_contract.examples._n1962__circle__subcontracting">[N1962] Circle:
      Subcontracting</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">shape</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">shape</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">compute_area</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">unsigned</phrase> <phrase role="identifier">shape</phrase><phrase role="special">::</phrase><phrase role="identifier">compute_area</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">circle</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">shape</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">compute_area</phrase><phrase role="special">);</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">pi</phrase> <phrase role="special">=</phrase> <phrase role="number">3</phrase><phrase role="special">;</phrase> <phrase role="comment">// Truncated to int from 3.14...</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">circle</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">a_radius</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">radius_</phrase><phrase role="special">(</phrase><phrase role="identifier">a_radius</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">radius</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">a_radius</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">compute_area</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
            <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">unsigned</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_compute_area</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">circle</phrase><phrase role="special">::</phrase><phrase role="identifier">compute_area</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">pi</phrase> <phrase role="special">*</phrase> <phrase role="identifier">radius</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="identifier">radius</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">pi</phrase> <phrase role="special">*</phrase> <phrase role="identifier">radius</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="identifier">radius</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">radius</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">radius_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">unsigned</phrase> <phrase role="identifier">radius_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">circle</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase><phrase role="number">2</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">radius</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">compute_area</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">12</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h2">
      <phrase id="boost_contract.examples._n1962__factorial__recursion_and_assertion_computational_complexity"/><link linkend="boost_contract.examples._n1962__factorial__recursion_and_assertion_computational_complexity">[N1962]
      Factorial: Recursion and assertion computational complexity</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Assertion complexity classified relative their function body complexity.</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_LESS_THAN_BODY</phrase>        <phrase role="number">0</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_SAME_AS_BODY</phrase>          <phrase role="number">1</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_GREATHER_THAN_BODY</phrase>    <phrase role="number">2</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase>          <phrase role="identifier">O_SAME_AS_BODY</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">factorial</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">n</phrase> <phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative natural number.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">12</phrase><phrase role="special">);</phrase> <phrase role="comment">// Max function input.</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">2</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Select assertion.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">}</phrase> <phrase role="keyword">else</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Following assertion introduce significant run-time overhead</phrase>
                <phrase role="comment">// (same as the function body) so assertion can be selectively</phrase>
                <phrase role="comment">// disabled by setting COMPLEXITY_MAX.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">O_SAME_AS_BODY</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                    <phrase role="comment">// Assertions automatically disabled in other assertions.</phrase>
                    <phrase role="comment">// Therefore, this postcondition can recursively call the</phrase>
                    <phrase role="comment">// function without causing infinite recursion.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">*</phrase> <phrase role="identifier">factorial</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">));</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">}</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">2</phrase> <phrase role="special">?</phrase> <phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n</phrase> <phrase role="special">*</phrase> <phrase role="identifier">factorial</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">factorial</phrase><phrase role="special">(</phrase><phrase role="number">4</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">24</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h3">
      <phrase id="boost_contract.examples._n1962__equal__operators"/><link linkend="boost_contract.examples._n1962__equal__operators">[N1962]
      Equal: Operators</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Forward declaration because == and != contracts use one another's function.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">left</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">right</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">left</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">right</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">!(</phrase><phrase role="identifier">left</phrase> <phrase role="special">==</phrase> <phrase role="identifier">right</phrase><phrase role="special">));</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">left</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">left</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">right</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">!(</phrase><phrase role="identifier">left</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">right</phrase><phrase role="special">));</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">left</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase> <phrase role="special">==</phrase> <phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">number</phrase> <phrase role="special">{</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase> <phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">number</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">n</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase> <phrase role="special">=</phrase> <phrase role="number">123</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">assert</phrase><phrase role="special">((</phrase><phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">true</phrase><phrase role="special">);</phrase>   <phrase role="comment">// Explicitly call operator==.</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">((</phrase><phrase role="identifier">n</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="keyword">false</phrase><phrase role="special">);</phrase>  <phrase role="comment">// Explicitly call operator!=.</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h4">
      <phrase id="boost_contract.examples._n1962__sum__array_parameter"/><link linkend="boost_contract.examples._n1962__sum__array_parameter">[N1962]
      Sum: Array parameter</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">sum</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase><phrase role="special">*</phrase> <phrase role="identifier">array</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">%</phrase> <phrase role="number">4</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">result</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">array</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">];</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">a</phrase><phrase role="special">[</phrase><phrase role="number">4</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="special">{</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase> <phrase role="number">3</phrase><phrase role="special">,</phrase> <phrase role="number">4</phrase><phrase role="special">};</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">sum</phrase><phrase role="special">(</phrase><phrase role="number">4</phrase><phrase role="special">,</phrase> <phrase role="identifier">a</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <anchor id="N1962_square_root_anchor"/>
    <bridgehead renderas="sect3" id="boost_contract.examples.h5">
      <phrase id="boost_contract.examples._n1962__square_root__default_parameters_and_comparison_with_d_syntax"/><link linkend="boost_contract.examples._n1962__square_root__default_parameters_and_comparison_with_d_syntax">[N1962]
      Square Root: Default parameters and comparison with D syntax</link>
    </bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <para>
                This Library
              </para>
            </entry>
            <entry>
              <para>
                The D Programming Language
              </para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cmath</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">double</phrase> <phrase role="identifier">mysqrt</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">precision</phrase> <phrase role="special">=</phrase> <phrase role="number">1e-6</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0.0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">fabs</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">*</phrase> <phrase role="identifier">result</phrase> <phrase role="special">-</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">precision</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">sqrt</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">double</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">precision</phrase> <phrase role="special">=</phrase> <phrase role="number">1e-6</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">fabs</phrase><phrase role="special">(</phrase><phrase role="identifier">mysqrt</phrase><phrase role="special">(</phrase><phrase role="number">4.0</phrase><phrase role="special">,</phrase> <phrase role="identifier">precision</phrase><phrase role="special">)</phrase> <phrase role="special">-</phrase> <phrase role="number">2.0</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">precision</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
              </para>
            </entry>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">// Extra spaces, newlines, etc. for visual alignment with this library code.</phrase>



<phrase role="identifier">real</phrase> <phrase role="identifier">mysqrt</phrase><phrase role="special">(</phrase><phrase role="identifier">real</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
    <phrase role="identifier">in</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0.0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
    <phrase role="identifier">out</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">.</phrase><phrase role="identifier">math</phrase><phrase role="special">.</phrase><phrase role="identifier">fabs</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">*</phrase> <phrase role="identifier">result</phrase> <phrase role="special">-</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">1e-6</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="identifier">body</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">std</phrase><phrase role="special">.</phrase><phrase role="identifier">math</phrase><phrase role="special">.</phrase><phrase role="identifier">sqrt</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>








<phrase role="comment">// End.</phrase>
</programlisting>
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <anchor id="Meyer97_stack4_anchor"/>
    <bridgehead renderas="sect3" id="boost_contract.examples.h6">
      <phrase id="boost_contract.examples._meyer97__stack4__comparison_with_eiffel_syntax"/><link linkend="boost_contract.examples._meyer97__stack4__comparison_with_eiffel_syntax">[Meyer97]
      Stack4: Comparison with Eiffel syntax</link>
    </bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <para>
                This Library
              </para>
            </entry>
            <entry>
              <para>
                The Eiffel Programming Language
              </para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">// File: stack4.hpp</phrase>
<phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">STACK4_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">STACK4_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Dispenser with LIFO access policy and fixed max capacity.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">stack4</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">stack4</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count non-negative.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase> <phrase role="comment">// Count bounded.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase> <phrase role="comment">// Empty if no item.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Initialization */</phrase>

    <phrase role="comment">// Allocate static from a maximum of n items.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">stack4</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">stack4</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative capacity.</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">n</phrase><phrase role="special">);</phrase> <phrase role="comment">// Capacity set.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">capacity_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">count_</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">array_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">n</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Deep copy via constructor.</phrase>
    <phrase role="comment">/* implicit */</phrase> <phrase role="identifier">stack4</phrase><phrase role="special">(</phrase><phrase role="identifier">stack4</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
                <phrase role="comment">// All items equal to other's items one by one.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">capacity_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">count_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">count_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">array_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity_</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">count_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">array_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">array_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Deep copy via assignment.</phrase>
    <phrase role="identifier">stack4</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">stack4</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
                <phrase role="comment">// All items euqal to other's items one by one.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">array_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">capacity_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">count_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">count_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">array_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity_</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">count_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">array_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">array_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy this stack.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">stack4</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">array_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Access */</phrase>

    <phrase role="comment">// Max number of stack items.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Number of stack items.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">count_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Top item.</phrase>
    <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not empty (count &gt; 0).</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">array_</phrase><phrase role="special">[</phrase><phrase role="identifier">count_</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Status Report */</phrase>

    <phrase role="comment">// Is stack empty?</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Empty definition.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">count_</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Is stack full?</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">full</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase> <phrase role="comment">// Full definition.</phrase>
                        <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">count_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Item Change */</phrase>

    <phrase role="comment">// Add x on top.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not full.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not empty.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase> <phrase role="comment">// Added to top.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// One more.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">array_</phrase><phrase role="special">[</phrase><phrase role="identifier">count_</phrase><phrase role="special">++]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Remove top item.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">remove</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not empty (count &gt; 0).</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not full.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// One less.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="special">--</phrase><phrase role="identifier">count_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">array_</phrase><phrase role="special">;</phrase> <phrase role="comment">// Internally using C-style array.</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
              </para>
            </entry>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">--</phrase> <phrase role="identifier">Extra</phrase> <phrase role="identifier">spaces</phrase><phrase role="special">,</phrase> <phrase role="identifier">newlines</phrase><phrase role="special">,</phrase> <phrase role="identifier">etc</phrase><phrase role="special">.</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">visual</phrase> <phrase role="identifier">alignment</phrase> <phrase role="identifier">with</phrase> <phrase role="keyword">this</phrase> <phrase role="identifier">library</phrase> <phrase role="identifier">code</phrase><phrase role="special">.</phrase>





<phrase role="identifier">indexing</phrase>
    <phrase role="identifier">destription</phrase><phrase role="special">:</phrase> <phrase role="string">"Dispenser with LIFO access policy and a fixed max capacity."</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">interface</phrase> <phrase role="identifier">STACK4</phrase><phrase role="special">[</phrase><phrase role="identifier">G</phrase><phrase role="special">]</phrase> <phrase role="identifier">creation</phrase> <phrase role="identifier">make</phrase> <phrase role="special">--</phrase> <phrase role="identifier">Interface</phrase> <phrase role="identifier">only</phrase> <phrase role="special">(</phrase><phrase role="identifier">no</phrase> <phrase role="identifier">implementation</phrase><phrase role="special">).</phrase>







<phrase role="identifier">invariant</phrase>
    <phrase role="identifier">count_non_negative</phrase><phrase role="special">:</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase>
    <phrase role="identifier">count_bounded</phrase><phrase role="special">:</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase>
    <phrase role="identifier">empty_if_no_elements</phrase><phrase role="special">:</phrase> <phrase role="identifier">empty</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>



<phrase role="identifier">feature</phrase> <phrase role="special">--</phrase> <phrase role="identifier">Initialization</phrase><phrase role="special">.</phrase>

    <phrase role="special">--</phrase> <phrase role="identifier">Allocate</phrase> <phrase role="identifier">stack</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">maximum</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">n</phrase> <phrase role="identifier">elements</phrase><phrase role="special">.</phrase>
    <phrase role="identifier">make</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">:</phrase> <phrase role="identifier">INTEGER</phrase><phrase role="special">)</phrase> <phrase role="identifier">is</phrase>
        <phrase role="identifier">require</phrase>
            <phrase role="identifier">non_negative_capacity</phrase><phrase role="special">:</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase>
        <phrase role="identifier">ensure</phrase>
            <phrase role="identifier">capacity_set</phrase><phrase role="special">:</phrase> <phrase role="identifier">capacity</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n</phrase>
        <phrase role="identifier">end</phrase>



















































<phrase role="identifier">feature</phrase> <phrase role="special">--</phrase> <phrase role="identifier">Access</phrase><phrase role="special">.</phrase>

    <phrase role="special">--</phrase> <phrase role="identifier">Max</phrase> <phrase role="identifier">number</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">stack</phrase> <phrase role="identifier">elements</phrase><phrase role="special">.</phrase>
    <phrase role="identifier">capacity</phrase><phrase role="special">:</phrase> <phrase role="identifier">INTEGER</phrase>





    <phrase role="special">--</phrase> <phrase role="identifier">Number</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">stack</phrase> <phrase role="identifier">elements</phrase><phrase role="special">.</phrase>
    <phrase role="identifier">count</phrase><phrase role="special">:</phrase> <phrase role="identifier">INTEGER</phrase>





    <phrase role="special">--</phrase> <phrase role="identifier">Top</phrase> <phrase role="identifier">element</phrase>
    <phrase role="identifier">item</phrase><phrase role="special">:</phrase> <phrase role="identifier">G</phrase> <phrase role="identifier">is</phrase>
        <phrase role="identifier">require</phrase>
            <phrase role="identifier">not_empty</phrase><phrase role="special">:</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">empty</phrase> <phrase role="special">--</phrase> <phrase role="identifier">i</phrase><phrase role="special">.</phrase><phrase role="identifier">e</phrase><phrase role="special">.,</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase>
        <phrase role="identifier">end</phrase>






<phrase role="identifier">feature</phrase> <phrase role="special">--</phrase> <phrase role="identifier">Status</phrase> <phrase role="identifier">report</phrase><phrase role="special">.</phrase>

    <phrase role="special">--</phrase> <phrase role="identifier">Is</phrase> <phrase role="identifier">stack</phrase> <phrase role="identifier">empty</phrase><phrase role="special">?</phrase>
    <phrase role="identifier">empty</phrase><phrase role="special">:</phrase> <phrase role="identifier">BOOLEAN</phrase> <phrase role="identifier">is</phrase>
        <phrase role="identifier">ensure</phrase>
            <phrase role="identifier">empty_definition</phrase><phrase role="special">:</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">end</phrase>








    <phrase role="special">--</phrase> <phrase role="identifier">Is</phrase> <phrase role="identifier">stack</phrase> <phrase role="identifier">full</phrase><phrase role="special">?</phrase>
    <phrase role="identifier">full</phrase><phrase role="special">:</phrase> <phrase role="identifier">BOOLEAN</phrase> <phrase role="identifier">is</phrase>
        <phrase role="identifier">ensure</phrase>
            <phrase role="identifier">full_definition</phrase><phrase role="special">:</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">end</phrase>








<phrase role="identifier">feature</phrase> <phrase role="special">--</phrase> <phrase role="identifier">Element</phrase> <phrase role="identifier">change</phrase><phrase role="special">.</phrase>

    <phrase role="special">--</phrase> <phrase role="identifier">Add</phrase> <phrase role="identifier">x</phrase> <phrase role="identifier">on</phrase> <phrase role="identifier">top</phrase><phrase role="special">.</phrase>
    <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">:</phrase> <phrase role="identifier">G</phrase><phrase role="special">)</phrase> <phrase role="identifier">is</phrase>
        <phrase role="identifier">require</phrase>
            <phrase role="identifier">not_full</phrase><phrase role="special">:</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">full</phrase>
        <phrase role="identifier">ensure</phrase>
            <phrase role="identifier">not_empty</phrase><phrase role="special">:</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">empty</phrase>
            <phrase role="identifier">added_to_top</phrase><phrase role="special">:</phrase> <phrase role="identifier">item</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase>
            <phrase role="identifier">one_more_item</phrase><phrase role="special">:</phrase> <phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">old</phrase> <phrase role="identifier">count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase>
        <phrase role="identifier">end</phrase>








    <phrase role="special">--</phrase> <phrase role="identifier">Remove</phrase> <phrase role="identifier">top</phrase> <phrase role="identifier">element</phrase><phrase role="special">.</phrase>
    <phrase role="identifier">remove</phrase> <phrase role="identifier">is</phrase>
        <phrase role="identifier">require</phrase>
            <phrase role="identifier">not_empty</phrase><phrase role="special">:</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">empty</phrase> <phrase role="special">--</phrase> <phrase role="identifier">i</phrase><phrase role="special">.</phrase><phrase role="identifier">e</phrase><phrase role="special">.,</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase>
        <phrase role="identifier">ensure</phrase>
            <phrase role="identifier">not_full</phrase><phrase role="special">:</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">full</phrase>
            <phrase role="identifier">one_fewer_item</phrase><phrase role="special">:</phrase> <phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">old</phrase> <phrase role="identifier">count</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase>

        <phrase role="identifier">end</phrase>











<phrase role="identifier">end</phrase> <phrase role="special">--</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">interface</phrase> <phrase role="identifier">STACK4</phrase>

<phrase role="special">--</phrase> <phrase role="identifier">End</phrase><phrase role="special">.</phrase>
</programlisting>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="string">"stack4.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">stack4</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">s</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">remove</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
              </para>
            </entry>
            <entry>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect3" id="boost_contract.examples.h7">
      <phrase id="boost_contract.examples._meyer97__stack3__error_codes_instead_of_preconditions"/><link linkend="boost_contract.examples._meyer97__stack3__error_codes_instead_of_preconditions">[Meyer97]
      Stack3: Error codes instead of preconditions</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">// File: stack3.cpp</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">"stack4.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">optional</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Dispenser LIFO with max capacity using error codes.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">stack3</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">error</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count non-negative.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase> <phrase role="comment">// Count bounded.</phrase>
            <phrase role="comment">// Empty if no item.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">enum</phrase> <phrase role="identifier">error_code</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">no_error</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">overflow_error</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">underflow_error</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">size_error</phrase>
    <phrase role="special">};</phrase>

    <phrase role="comment">/* Initialization */</phrase>

    <phrase role="comment">// Create stack for max of n items, if n &lt; 0 set error (no preconditions).</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">stack3</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">n</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">default_value</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">())</phrase> <phrase role="special">:</phrase>
            <phrase role="identifier">stack_</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">),</phrase> <phrase role="identifier">error_</phrase><phrase role="special">(</phrase><phrase role="identifier">no_error</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Error if impossible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">((</phrase><phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">error</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">size_error</phrase><phrase role="special">));</phrase>
                <phrase role="comment">// No error if possible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">((</phrase><phrase role="identifier">n</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="special">!</phrase><phrase role="identifier">error</phrase><phrase role="special">());</phrase>
                <phrase role="comment">// Created if no error.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">error</phrase><phrase role="special">())</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">n</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="identifier">stack_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">stack4</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">n</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">else</phrase> <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">size_error</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Access */</phrase>

    <phrase role="comment">// Max number of stack items.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Number of stack items.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Top item if present, otherwise none and set error (no preconditions).</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Error if impossible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">error</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">underflow_error</phrase><phrase role="special">));</phrase>
                <phrase role="comment">// No error if possible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">!</phrase><phrase role="identifier">error</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">no_error</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;(</phrase><phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">item</phrase><phrase role="special">());</phrase>
        <phrase role="special">}</phrase> <phrase role="keyword">else</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">underflow_error</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Status Report */</phrase>

    <phrase role="comment">// Error indicator set by various operations.</phrase>
    <phrase role="identifier">error_code</phrase> <phrase role="identifier">error</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">error_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">full</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Item Change */</phrase>

    <phrase role="comment">// Add x to top if capacity allows, otherwise set error (no preconditions).</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_full</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Error if impossible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_full</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">error</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">overflow_error</phrase><phrase role="special">));</phrase>
                <phrase role="comment">// No error if possible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!*</phrase><phrase role="identifier">old_full</phrase> <phrase role="special">==</phrase> <phrase role="special">!</phrase><phrase role="identifier">error</phrase><phrase role="special">());</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">error</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase> <phrase role="comment">// If no error...</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// ...not empty.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase> <phrase role="comment">// ...added to top.</phrase>
                    <phrase role="comment">// ...one more.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">full</phrase><phrase role="special">())</phrase> <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">overflow_error</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">else</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">no_error</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Remove top item if possible, otherwise set error (no preconditions).</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">remove</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_empty</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Error if impossible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_empty</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">error</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase>
                        <phrase role="identifier">underflow_error</phrase><phrase role="special">));</phrase>
                <phrase role="comment">// No error if possible.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!*</phrase><phrase role="identifier">old_empty</phrase> <phrase role="special">==</phrase> <phrase role="special">!</phrase><phrase role="identifier">error</phrase><phrase role="special">());</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">error</phrase><phrase role="special">())</phrase> <phrase role="special">{</phrase> <phrase role="comment">// If no error...</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase> <phrase role="comment">// ...not full.</phrase>
                    <phrase role="comment">// ...one less.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">())</phrase> <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">underflow_error</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">else</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">stack_</phrase><phrase role="special">.</phrase><phrase role="identifier">remove</phrase><phrase role="special">();</phrase>
            <phrase role="identifier">error_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">no_error</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">stack4</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">stack_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">mutable</phrase> <phrase role="identifier">error_code</phrase> <phrase role="identifier">error_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">stack3</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">s</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(*</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">remove</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h8">
      <phrase id="boost_contract.examples._mitchell02__name_list__relaxing_subcontracts"/><link linkend="boost_contract.examples._mitchell02__name_list__relaxing_subcontracts">[Mitchell02]
      Name List: Relaxing subcontracts</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// List of names.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">name_list</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative count.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create an empty list.</phrase>
    <phrase role="identifier">name_list</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Empty list.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy list.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">name_list</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Basic Queries */</phrase>

    <phrase role="comment">// Number of names in list.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">names_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Is name in list?</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// If empty, has not.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">result</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">names_</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">()</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">names_</phrase><phrase role="special">.</phrase><phrase role="identifier">cbegin</phrase><phrase role="special">(),</phrase>
                <phrase role="identifier">names_</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">(),</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Add name to list, if name not already in list.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_has_name</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">));</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">));</phrase> <phrase role="comment">// Not already in list.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(!*</phrase><phrase role="identifier">old_has_name</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="comment">// If-guard allows to relax subcontracts.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">));</phrase> <phrase role="comment">// Name in list.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Inc.</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">names_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">names_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">relaxed_name_list</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">name_list</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// Subcontracting.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">put</phrase><phrase role="special">);</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/*  Commands */</phrase>

    <phrase role="comment">// Add name to list, or do nothing if name already in list (relaxed).</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">bool</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_has_name</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">));</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_put</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">relaxed_name_list</phrase><phrase role="special">::</phrase><phrase role="identifier">put</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Relax inherited preconditions.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">));</phrase> <phrase role="comment">// Already in list.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase> <phrase role="comment">// Inherited post. not checked given if-guard.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(*</phrase><phrase role="identifier">old_has_name</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                    <phrase role="comment">// Count unchanged if name already in list.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase><phrase role="special">);</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(!</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">))</phrase> <phrase role="identifier">name_list</phrase><phrase role="special">::</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">);</phrase> <phrase role="comment">// Else, do nothing.</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">js</phrase> <phrase role="special">=</phrase> <phrase role="string">"John Smith"</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">relaxed_name_list</phrase> <phrase role="identifier">rl</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">rl</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">rl</phrase><phrase role="special">.</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">));</phrase>
    <phrase role="identifier">rl</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">);</phrase> <phrase role="comment">// OK, relaxed contracts allow calling this again (do nothing).</phrase>

    <phrase role="identifier">name_list</phrase> <phrase role="identifier">nl</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">nl</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">nl</phrase><phrase role="special">.</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">));</phrase>
    <phrase role="comment">// nl.put(js); // Error, contracts do not allow calling this again.</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h9">
      <phrase id="boost_contract.examples._mitchell02__dictionary__key_value_map"/><link linkend="boost_contract.examples._mitchell02__dictionary__key_value_map">[Mitchell02]
      Dictionary: Key-value map</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">utility</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">map</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">K</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">dictionary</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative count.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create empty dictionary.</phrase>
    <phrase role="identifier">dictionary</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Empty.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy dictionary.</phrase>
    <phrase role="special">~</phrase><phrase role="identifier">dictionary</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Basic Queries */</phrase>

    <phrase role="comment">// Number of key entries.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Has entry for key?</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">K</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Empty has no key.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">result</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Value for a given key.</phrase>
    <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value_for</phrase><phrase role="special">(</phrase><phrase role="identifier">K</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">));</phrase> <phrase role="comment">// Has key.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="comment">// Find != end because of precondition (no defensive programming).</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">)-&gt;</phrase><phrase role="identifier">second</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Add value of a given key.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">K</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">));</phrase> <phrase role="comment">// Has not key already.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count inc.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">));</phrase> <phrase role="comment">// Has key.</phrase>
                <phrase role="comment">// Value set for key.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">value_for</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_pair</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Remove value for given key.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">remove</phrase><phrase role="special">(</phrase><phrase role="identifier">K</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">));</phrase> <phrase role="comment">// Has key.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count dec.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">));</phrase> <phrase role="comment">// Has not key.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">key</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">map</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">K</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">items_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">js</phrase> <phrase role="special">=</phrase> <phrase role="string">"John Smith"</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">dictionary</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">ages</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">ages</phrase><phrase role="special">.</phrase><phrase role="identifier">has</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">));</phrase>

    <phrase role="identifier">ages</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">,</phrase> <phrase role="number">23</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">ages</phrase><phrase role="special">.</phrase><phrase role="identifier">value_for</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">23</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">ages</phrase><phrase role="special">.</phrase><phrase role="identifier">remove</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">ages</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h10">
      <phrase id="boost_contract.examples._mitchell02__courier__subcontracting_and_static_class_invariants"/><link linkend="boost_contract.examples._mitchell02__courier__subcontracting_and_static_class_invariants">[Mitchell02]
      Courier: Subcontracting and static class invariants</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">package</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">weight_kg</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">location</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">accepted_hour</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">delivered_hour</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">package</phrase><phrase role="special">(</phrase>
        <phrase role="keyword">double</phrase> <phrase role="identifier">_weight_kg</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">_location</phrase> <phrase role="special">=</phrase> <phrase role="string">""</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">double</phrase> <phrase role="identifier">_accepted_hour</phrase> <phrase role="special">=</phrase> <phrase role="number">0.0</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">double</phrase> <phrase role="identifier">_delivered_hour</phrase> <phrase role="special">=</phrase> <phrase role="number">0.0</phrase>
    <phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">weight_kg</phrase><phrase role="special">(</phrase><phrase role="identifier">_weight_kg</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">location</phrase><phrase role="special">(</phrase><phrase role="identifier">_location</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">accepted_hour</phrase><phrase role="special">(</phrase><phrase role="identifier">_accepted_hour</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">delivered_hour</phrase><phrase role="special">(</phrase><phrase role="identifier">_delivered_hour</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Courier for package delivery.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">courier</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">courier</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Positive min. insurance.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">min_insurance_usd</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0.0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Above min. insurance.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">insurance_cover_usd</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">min_insurance_usd</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">min_insurance_usd</phrase><phrase role="special">;</phrase>

    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create courier with specified insurance value.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">courier</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase> <phrase role="identifier">_insurance_cover_usd</phrase> <phrase role="special">=</phrase> <phrase role="identifier">min_insurance_usd</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">courier</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="comment">// Positive insurance.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">_insurance_cover_usd</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0.0</phrase><phrase role="special">);</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">insurance_cover_usd_</phrase><phrase role="special">(</phrase><phrase role="identifier">_insurance_cover_usd</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy courier.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">courier</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Queries */</phrase>

    <phrase role="comment">// Return insurance cover.</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">insurance_cover_usd</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">insurance_cover_usd_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Deliver package to destination.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">deliver</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">package</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">package_delivery</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">destination</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase>
    <phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Within max weight of this delivery.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">weight_kg</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">5.0</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Within max delivery type.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase><phrase role="special">(</phrase><phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">delivered_hour</phrase> <phrase role="special">-</phrase>
                        <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">accepted_hour</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">3.0</phrase><phrase role="special">);</phrase>
                <phrase role="comment">// Delivered at destination.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">location</phrase> <phrase role="special">==</phrase> <phrase role="identifier">destination</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">location</phrase> <phrase role="special">=</phrase> <phrase role="identifier">destination</phrase><phrase role="special">;</phrase>
        <phrase role="comment">// Delivery takes 2.5 hours.</phrase>
        <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">delivered_hour</phrase> <phrase role="special">=</phrase> <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">accepted_hour</phrase> <phrase role="special">+</phrase> <phrase role="number">2.5</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">insurance_cover_usd_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">double</phrase> <phrase role="identifier">courier</phrase><phrase role="special">::</phrase><phrase role="identifier">min_insurance_usd</phrase> <phrase role="special">=</phrase> <phrase role="number">10.0e+6</phrase><phrase role="special">;</phrase>

<phrase role="comment">// Different courier for package delivery.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">different_courier</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase> <phrase role="special">\</phrase>
            <phrase role="identifier">different_courier</phrase><phrase role="special">&gt;,</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">courier</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// Subcontracting.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDE</phrase><phrase role="special">(</phrase><phrase role="identifier">deliver</phrase><phrase role="special">)</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">static_invariant</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase> <phrase role="comment">// Better insurance amount.</phrase>
                <phrase role="identifier">different_insurance_usd</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">courier</phrase><phrase role="special">::</phrase><phrase role="identifier">min_insurance_usd</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Above different insurance value.</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">insurance_cover_usd</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="identifier">different_insurance_usd</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">different_insurance_usd</phrase><phrase role="special">;</phrase>

    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create courier with specified insurance value.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">different_courier</phrase><phrase role="special">(</phrase>
            <phrase role="keyword">double</phrase> <phrase role="identifier">insurance_cover_usd</phrase> <phrase role="special">=</phrase> <phrase role="identifier">different_insurance_usd</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">different_courier</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="comment">// Positive insurance value.</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">insurance_cover_usd</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0.0</phrase><phrase role="special">);</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">courier</phrase><phrase role="special">(</phrase><phrase role="identifier">insurance_cover_usd</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy courier.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">different_courier</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">deliver</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">package</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">package_delivery</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">destination</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase>
    <phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_deliver</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">different_courier</phrase><phrase role="special">::</phrase><phrase role="identifier">deliver</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">package_delivery</phrase><phrase role="special">,</phrase> <phrase role="identifier">destination</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Package can weight more (weaker precondition).</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">weight_kg</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">8.0</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Faster delivery (stronger postcondition).</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase><phrase role="special">(</phrase><phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">delivered_hour</phrase> <phrase role="special">-</phrase>
                        <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">accepted_hour</phrase><phrase role="special">)</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">2.0</phrase><phrase role="special">);</phrase>
                <phrase role="comment">// Inherited "delivery at destination" postcondition.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">location</phrase> <phrase role="special">=</phrase> <phrase role="identifier">destination</phrase><phrase role="special">;</phrase>
        <phrase role="comment">// Delivery takes 0.5 hours.</phrase>
        <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">delivered_hour</phrase> <phrase role="special">=</phrase> <phrase role="identifier">package_delivery</phrase><phrase role="special">.</phrase><phrase role="identifier">accepted_hour</phrase> <phrase role="special">+</phrase> <phrase role="number">0.5</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">double</phrase> <phrase role="identifier">different_courier</phrase><phrase role="special">::</phrase><phrase role="identifier">different_insurance_usd</phrase> <phrase role="special">=</phrase> <phrase role="number">20.0e+6</phrase><phrase role="special">;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">package</phrase> <phrase role="identifier">cups</phrase><phrase role="special">(</phrase><phrase role="number">3.6</phrase><phrase role="special">,</phrase> <phrase role="string">"store"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">courier</phrase> <phrase role="identifier">c</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">deliver</phrase><phrase role="special">(</phrase><phrase role="identifier">cups</phrase><phrase role="special">,</phrase> <phrase role="string">"home"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">cups</phrase><phrase role="special">.</phrase><phrase role="identifier">location</phrase> <phrase role="special">==</phrase> <phrase role="string">"home"</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">package</phrase> <phrase role="identifier">desk</phrase><phrase role="special">(</phrase><phrase role="number">7.2</phrase><phrase role="special">,</phrase> <phrase role="string">"store"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">different_courier</phrase> <phrase role="identifier">dc</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">dc</phrase><phrase role="special">.</phrase><phrase role="identifier">deliver</phrase><phrase role="special">(</phrase><phrase role="identifier">desk</phrase><phrase role="special">,</phrase> <phrase role="string">"office"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">desk</phrase><phrase role="special">.</phrase><phrase role="identifier">location</phrase> <phrase role="special">==</phrase> <phrase role="string">"office"</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h11">
      <phrase id="boost_contract.examples._mitchell02__stack__stack_like_container"/><link linkend="boost_contract.examples._mitchell02__stack__stack_like_container">[Mitchell02]
      Stack: Stack-like container</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">optional</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">stack</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative count.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create empty stack.</phrase>
    <phrase role="identifier">stack</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Empty.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy stack.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">stack</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Basic Queries */</phrase>

    <phrase role="comment">// Number of items.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Item at index in [1, count()] (as in Eiffel).</phrase>
    <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">item_at</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Positive index.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">count</phrase><phrase role="special">());</phrase> <phrase role="comment">// Index within count.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">items_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Derived Queries */</phrase>

    <phrase role="comment">// If no items.</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">is_empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Consistent with count.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Top item.</phrase>
    <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase> <phrase role="comment">// Avoid extra construction of T.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Not empty.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Item on top.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">item_at</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">item_at</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Push item to the top.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">new_item</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count inc.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">new_item</phrase><phrase role="special">);</phrase> <phrase role="comment">// Item set.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">new_item</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Pop top item.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">remove</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Not empty.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count dec.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">pop_back</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">items_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">stack</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">s</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">item</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">remove</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">is_empty</phrase><phrase role="special">());</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h12">
      <phrase id="boost_contract.examples._mitchell02__simple_queue__queue_like_container"/><link linkend="boost_contract.examples._mitchell02__simple_queue__queue_like_container">[Mitchell02]
      Simple Queue: Queue-like container</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">optional</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Disable selected expensive assertion checks and old value copies.</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_1</phrase> <phrase role="number">0</phrase>               <phrase role="comment">// O(1): constant complexity (default).</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_N</phrase> <phrase role="number">1</phrase>               <phrase role="comment">// O(n): linear complexity.</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase> <phrase role="identifier">O_1</phrase>  <phrase role="comment">// Max allowed complexity.</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">simple_queue</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase> <phrase role="special">\</phrase>
            <phrase role="identifier">simple_queue</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative count.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create empty queue.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">simple_queue</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">a_capacity</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">simple_queue</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">a_capacity</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Positive capacity.</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Capacity set.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">a_capacity</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">is_empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// Empty.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">reserve</phrase><phrase role="special">(</phrase><phrase role="identifier">a_capacity</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy queue.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">simple_queue</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Basic Queries */</phrase>

    <phrase role="comment">// Items in queue (in their order).</phrase>
    <phrase role="comment">// (Somewhat exposes implementation but allows to check more contracts.)</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">items</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">items_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Max number of items queue can hold.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Derived Queries */</phrase>

    <phrase role="comment">// Number of items.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Return items count.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">().</phrase><phrase role="identifier">size</phrase><phrase role="special">()));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Item at head.</phrase>
    <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">head</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">is_empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not empty.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Return item on top.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="identifier">items</phrase><phrase role="special">().</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// If queue contains no item.</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">is_empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Consistent with count.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// If queue as no room for another item.</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">is_full</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase> <phrase role="comment">// Consistent with size and capacity.</phrase>
                        <phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">().</phrase><phrase role="identifier">size</phrase><phrase role="special">())));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Remove head itme and shift all other items.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">remove</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Expensive all_equal postcond. and old_items copy might be skipped.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">old_items</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">O_N</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase><phrase role="special">)</phrase> <phrase role="identifier">old_items</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">is_empty</phrase><phrase role="special">());</phrase> <phrase role="comment">// Not empty.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count dec.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">old_items</phrase><phrase role="special">)</phrase> <phrase role="identifier">all_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">(),</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_items</phrase><phrase role="special">,</phrase> <phrase role="comment">/* shifted = */</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">erase</phrase><phrase role="special">(</phrase><phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Add item to tail.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">item</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Expensive all_equal postcond. and old_items copy might be skipped.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">old_items</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">O_N</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase><phrase role="special">)</phrase> <phrase role="identifier">old_items</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase> <phrase role="comment">// Room for add.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count inc.</phrase>
                <phrase role="comment">// Second to last item.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">().</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">item</phrase><phrase role="special">);</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">old_items</phrase><phrase role="special">)</phrase> <phrase role="identifier">all_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">(),</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_items</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">items_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">item</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// Contract helper.</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">all_equal</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">left</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">right</phrase><phrase role="special">,</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="identifier">offset</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Correct offset.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">left</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">offset</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">unsigned</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">offset</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">left</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">i</phrase> <phrase role="special">-</phrase> <phrase role="identifier">offset</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">right</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="identifier">i</phrase><phrase role="special">))</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">items_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">simple_queue</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">q</phrase><phrase role="special">(</phrase><phrase role="number">10</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="number">456</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">head</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">is_empty</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">is_full</phrase><phrase role="special">());</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">items</phrase> <phrase role="special">=</phrase> <phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">items</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">items</phrase><phrase role="special">.</phrase><phrase role="identifier">at</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="number">456</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">remove</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">q</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h13">
      <phrase id="boost_contract.examples._mitchell02__customer_manager__contracts_instead_of_defensive_programming"/><link linkend="boost_contract.examples._mitchell02__customer_manager__contracts_instead_of_defensive_programming">[Mitchell02]
      Customer Manager: Contracts instead of Defensive Programming</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">map</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">utility</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Basic customer information.</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">customer_info</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">customer_manager</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">typedef</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">identifier</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">identifier</phrase> <phrase role="identifier">id</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">customer_info</phrase><phrase role="special">(</phrase><phrase role="identifier">identifier</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">_id</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
            <phrase role="identifier">id</phrase><phrase role="special">(</phrase><phrase role="identifier">_id</phrase><phrase role="special">),</phrase> <phrase role="identifier">name_</phrase><phrase role="special">(),</phrase> <phrase role="identifier">address_</phrase><phrase role="special">(),</phrase> <phrase role="identifier">birthday_</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">name_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">address_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">birthday_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Manage customers.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">customer_manager</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="comment">// Non-negative count.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="identifier">customer_manager</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">customer_manager</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Basic Queries */</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">customers_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">id_active</phrase><phrase role="special">(</phrase><phrase role="identifier">customer_info</phrase><phrase role="special">::</phrase><phrase role="identifier">identifier</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">customers_</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">customers_</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Derived Queries */</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name_for</phrase><phrase role="special">(</phrase><phrase role="identifier">customer_info</phrase><phrase role="special">::</phrase><phrase role="identifier">identifier</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">id_active</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase> <phrase role="comment">// Active.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="comment">// Find != end because of preconditions (no defensive programming).</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">customers_</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">)-&gt;</phrase><phrase role="identifier">second</phrase><phrase role="special">.</phrase><phrase role="identifier">name_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">add</phrase><phrase role="special">(</phrase><phrase role="identifier">customer_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">info</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_count</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Not already active.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">id_active</phrase><phrase role="special">(</phrase><phrase role="identifier">info</phrase><phrase role="special">.</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_count</phrase> <phrase role="special">+</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Count inc.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">id_active</phrase><phrase role="special">(</phrase><phrase role="identifier">info</phrase><phrase role="special">.</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase> <phrase role="comment">// Activated.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">customers_</phrase><phrase role="special">.</phrase><phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">make_pair</phrase><phrase role="special">(</phrase><phrase role="identifier">info</phrase><phrase role="special">.</phrase><phrase role="identifier">id</phrase><phrase role="special">,</phrase> <phrase role="identifier">customer</phrase><phrase role="special">(</phrase><phrase role="identifier">info</phrase><phrase role="special">)));</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">set_name</phrase><phrase role="special">(</phrase><phrase role="identifier">customer_info</phrase><phrase role="special">::</phrase><phrase role="identifier">identifier</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">id</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">id_active</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase> <phrase role="comment">// Already active.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">name_for</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase> <phrase role="comment">// Name set.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="comment">// Find != end because of precondition (no defensive programming).</phrase>
        <phrase role="identifier">customers_</phrase><phrase role="special">.</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">id</phrase><phrase role="special">)-&gt;</phrase><phrase role="identifier">second</phrase><phrase role="special">.</phrase><phrase role="identifier">name_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">name</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">agent</phrase> <phrase role="special">{};</phrase> <phrase role="comment">// Customer agent.</phrase>

    <phrase role="keyword">struct</phrase> <phrase role="identifier">customer</phrase> <phrase role="special">:</phrase> <phrase role="identifier">customer_info</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">agent</phrase> <phrase role="identifier">managing_agent</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">last_contact</phrase><phrase role="special">;</phrase>

        <phrase role="keyword">explicit</phrase> <phrase role="identifier">customer</phrase><phrase role="special">(</phrase><phrase role="identifier">customer_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">info</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">customer_info</phrase><phrase role="special">(</phrase><phrase role="identifier">info</phrase><phrase role="special">),</phrase>
                <phrase role="identifier">managing_agent</phrase><phrase role="special">(),</phrase> <phrase role="identifier">last_contact</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>
    <phrase role="special">};</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">map</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">customer_info</phrase><phrase role="special">::</phrase><phrase role="identifier">identifier</phrase><phrase role="special">,</phrase> <phrase role="identifier">customer</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">customers_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">customer_manager</phrase> <phrase role="identifier">m</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">customer_info</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">js</phrase><phrase role="special">(</phrase><phrase role="string">"john_smith_123"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">m</phrase><phrase role="special">.</phrase><phrase role="identifier">add</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">m</phrase><phrase role="special">.</phrase><phrase role="identifier">set_name</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">.</phrase><phrase role="identifier">id</phrase><phrase role="special">,</phrase> <phrase role="string">"John Smith"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">m</phrase><phrase role="special">.</phrase><phrase role="identifier">name_for</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">.</phrase><phrase role="identifier">id</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="string">"John Smith"</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">m</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">m</phrase><phrase role="special">.</phrase><phrase role="identifier">id_active</phrase><phrase role="special">(</phrase><phrase role="identifier">js</phrase><phrase role="special">.</phrase><phrase role="identifier">id</phrase><phrase role="special">));</phrase>
    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h14">
      <phrase id="boost_contract.examples._mitchell02__observer__pure_virtual_functions"/><link linkend="boost_contract.examples._mitchell02__observer__pure_virtual_functions">[Mitchell02]
      Observer: Pure virtual functions</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">OBSERVER_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">OBSERVER_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Observer.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">observer</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">subject</phrase><phrase role="special">;</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// No inv and no bases so contracts optional if no pre, post, and override.</phrase>

    <phrase role="comment">/* Creation */</phrase>

    <phrase role="identifier">observer</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">observer</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// If up-to-date with related subject.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

    <phrase role="comment">// Update this observer.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">bool</phrase> <phrase role="identifier">observer</phrase><phrase role="special">::</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">observer</phrase><phrase role="special">::</phrase><phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">());</phrase> <phrase role="comment">// Up-to-date.</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
    </para>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">SUBJECT_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">SUBJECT_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">"observer.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">algorithm</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Following used to selectively disable checking of more complex assertions.</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_1</phrase>             <phrase role="number">0</phrase> <phrase role="comment">// O(1): constant complexity.</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">O_N</phrase>             <phrase role="number">1</phrase> <phrase role="comment">// O(n): linear complexity.</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase>  <phrase role="identifier">O_N</phrase>

<phrase role="comment">// Subject for observer design pattern.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">subject</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">O_N</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">all_observers_valid</phrase><phrase role="special">(</phrase><phrase role="identifier">observers</phrase><phrase role="special">()));</phrase> <phrase role="comment">// Valid.</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Construct subject with no observer.</phrase>
    <phrase role="identifier">subject</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariant.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy subject.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">subject</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariant.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Queries */</phrase>

    <phrase role="comment">// If given object is attached.</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">attached</phrase><phrase role="special">(</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">ob</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">);</phrase> <phrase role="comment">// Not null.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">cbegin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">(),</phrase> <phrase role="identifier">ob</phrase><phrase role="special">)</phrase> <phrase role="special">!=</phrase>
                <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Attach given object as an observer.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">attach</phrase><phrase role="special">(</phrase><phrase role="identifier">observer</phrase><phrase role="special">*</phrase> <phrase role="identifier">ob</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">old_observers</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">observers</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">);</phrase> <phrase role="comment">// Not null.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">attached</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">));</phrase> <phrase role="comment">// Not already attached.</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">attached</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">));</phrase> <phrase role="comment">// Attached.</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">O_N</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                    <phrase role="comment">// Others not changed (frame rule).</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">other_observers_unchanged</phrase><phrase role="special">(</phrase>
                            <phrase role="special">*</phrase><phrase role="identifier">old_observers</phrase><phrase role="special">,</phrase> <phrase role="identifier">observers</phrase><phrase role="special">(),</phrase> <phrase role="identifier">ob</phrase><phrase role="special">));</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// Contracts could have been omitted for protected/private with no pre/post.</phrase>

    <phrase role="comment">/* Queries */</phrase>

    <phrase role="comment">// All observers attached to this subject.</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="identifier">observers</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="identifier">obs</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase><phrase role="special">*&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">cbegin</phrase><phrase role="special">();</phrase>
                <phrase role="identifier">i</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">();</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">obs</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(*</phrase><phrase role="identifier">i</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">obs</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Update all attached observers.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">notify</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Protected members use `function` (no inv and no subcontracting).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">O_N</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">COMPLEXITY_MAX</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
                    <phrase role="comment">// All updated.</phrase>
                    <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">all_observers_updated</phrase><phrase role="special">(</phrase><phrase role="identifier">observers</phrase><phrase role="special">()));</phrase>
                <phrase role="special">}</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase><phrase role="special">*&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
                <phrase role="identifier">i</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">observers_</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">();</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="comment">// Class invariants ensure no null pointers in observers but class</phrase>
            <phrase role="comment">// invariants not checked for non-public functions so assert here.</phrase>
            <phrase role="identifier">assert</phrase><phrase role="special">(*</phrase><phrase role="identifier">i</phrase><phrase role="special">);</phrase> <phrase role="comment">// Pointer not null (defensive programming).</phrase>
            <phrase role="special">(*</phrase><phrase role="identifier">i</phrase><phrase role="special">)-&gt;</phrase><phrase role="identifier">update</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Contract Helpers */</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">all_observers_valid</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">obs</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">obs</phrase><phrase role="special">.</phrase><phrase role="identifier">cbegin</phrase><phrase role="special">();</phrase>
                <phrase role="identifier">i</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">obs</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">();</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(!*</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">other_observers_unchanged</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old_obs</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">new_obs</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">ob</phrase>
    <phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Private members use `function` (no inv and no subcontracting).</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">);</phrase> <phrase role="comment">// Not null.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="identifier">remaining</phrase> <phrase role="special">=</phrase> <phrase role="identifier">new_obs</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">remove</phrase><phrase role="special">(</phrase><phrase role="identifier">remaining</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">remaining</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">(),</phrase> <phrase role="identifier">ob</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">remaining_it</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">remaining</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">old_it</phrase> <phrase role="special">=</phrase> <phrase role="identifier">old_obs</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">();</phrase>
        <phrase role="keyword">while</phrase><phrase role="special">(</phrase><phrase role="identifier">remaining</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">()</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">remaining_it</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">old_obs</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">()</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">old_it</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(*</phrase><phrase role="identifier">remaining_it</phrase> <phrase role="special">!=</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_it</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
            <phrase role="special">++</phrase><phrase role="identifier">remaining_it</phrase><phrase role="special">;</phrase>
            <phrase role="special">++</phrase><phrase role="identifier">old_it</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">all_observers_updated</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">obs</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="identifier">obs</phrase><phrase role="special">.</phrase><phrase role="identifier">cbegin</phrase><phrase role="special">();</phrase>
                <phrase role="identifier">i</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">obs</phrase><phrase role="special">.</phrase><phrase role="identifier">cend</phrase><phrase role="special">();</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(!*</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
            <phrase role="keyword">if</phrase><phrase role="special">(!(*</phrase><phrase role="identifier">i</phrase><phrase role="special">)-&gt;</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">())</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>
        <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">observer</phrase><phrase role="special">*&gt;</phrase> <phrase role="identifier">observers_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
    </para>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="string">"observer/observer.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">"observer/subject.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">test_state</phrase><phrase role="special">;</phrase> <phrase role="comment">// For testing only.</phrase>

<phrase role="comment">// Implement an actual subject.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">concrete_subject</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">subject</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// Subcontracting.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">state</phrase><phrase role="special">;</phrase> <phrase role="comment">// Some state being observed.</phrase>

    <phrase role="identifier">concrete_subject</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">state_</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">concrete_subject</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">set_state</phrase><phrase role="special">(</phrase><phrase role="identifier">state</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">new_state</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">state_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">new_state</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">state_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">test_state</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">notify</phrase><phrase role="special">();</phrase> <phrase role="comment">// Notify all observers.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">state</phrase> <phrase role="identifier">get_state</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">state_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">state</phrase> <phrase role="identifier">state_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Implement an actual observer.</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">concrete_observer</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">observer</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase> <phrase role="comment">// Subcontracting.</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">,</phrase> <phrase role="identifier">update</phrase><phrase role="special">)</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// Create concrete observer.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">concrete_observer</phrase><phrase role="special">(</phrase><phrase role="identifier">concrete_subject</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">subj</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
            <phrase role="identifier">subject_</phrase><phrase role="special">(</phrase><phrase role="identifier">subj</phrase><phrase role="special">),</phrase> <phrase role="identifier">observed_state_</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">concrete_observer</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Implement base virtual functions.</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_up_to_date_with_subject</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">concrete_observer</phrase><phrase role="special">::</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="comment">// For simplicity, assume always up-to-date.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_update</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">concrete_observer</phrase><phrase role="special">::</phrase><phrase role="identifier">update</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">observed_state_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">subject_</phrase><phrase role="special">.</phrase><phrase role="identifier">get_state</phrase><phrase role="special">();</phrase>
        <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">observed_state_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">test_state</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">concrete_subject</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">subject_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">concrete_subject</phrase><phrase role="special">::</phrase><phrase role="identifier">state</phrase> <phrase role="identifier">observed_state_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">concrete_subject</phrase> <phrase role="identifier">subj</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">concrete_observer</phrase> <phrase role="identifier">ob</phrase><phrase role="special">(</phrase><phrase role="identifier">subj</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">subj</phrase><phrase role="special">.</phrase><phrase role="identifier">attach</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">ob</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">subj</phrase><phrase role="special">.</phrase><phrase role="identifier">set_state</phrase><phrase role="special">(</phrase><phrase role="identifier">test_state</phrase> <phrase role="special">=</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">subj</phrase><phrase role="special">.</phrase><phrase role="identifier">set_state</phrase><phrase role="special">(</phrase><phrase role="identifier">test_state</phrase> <phrase role="special">=</phrase> <phrase role="number">456</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <anchor id="Mitchell02_counter_anchor"/>
    <bridgehead renderas="sect3" id="boost_contract.examples.h15">
      <phrase id="boost_contract.examples._mitchell02__counter__subcontracting"/><link linkend="boost_contract.examples._mitchell02__counter__subcontracting">[Mitchell02]
      Counter: Subcontracting</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">PUSH_BUTTON_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">PUSH_BUTTON_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">push_button</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// No inv and no bases so contracts optional if no pre, post, and override.</phrase>

    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create an enabled button.</phrase>
    <phrase role="identifier">push_button</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">enabled_</phrase><phrase role="special">(</phrase><phrase role="keyword">true</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">enabled</phrase><phrase role="special">());</phrase> <phrase role="comment">// Enabled.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy button.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">push_button</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Queries */</phrase>

    <phrase role="comment">// If button is enabled.</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">enabled</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">enabled_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Enable button.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">enable</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">enabled</phrase><phrase role="special">());</phrase> <phrase role="comment">// Enabled.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">enabled_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Disable button.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">disable</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">enabled</phrase><phrase role="special">());</phrase> <phrase role="comment">// Disabled.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">enabled_</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Invoke externally when button clicked.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">on_bn_clicked</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="identifier">enabled_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">push_button</phrase><phrase role="special">::</phrase><phrase role="identifier">on_bn_clicked</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">enabled</phrase><phrase role="special">());</phrase> <phrase role="comment">// Enabled.</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
    </para>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">DECREMENT_BUTTON_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">DECREMENT_BUTTON_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">"push_button.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">"counter.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">"../observer/observer.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">noncopyable</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">decrement_button</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">push_button</phrase><phrase role="special">,</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">observer</phrase><phrase role="special">,</phrase> <phrase role="special">\</phrase>
            <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><phrase role="identifier">on_bn_clicked</phrase><phrase role="special">,</phrase> <phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">,</phrase> <phrase role="identifier">update</phrase><phrase role="special">);</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">decrement_button</phrase><phrase role="special">(</phrase><phrase role="identifier">counter</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a_counter</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">counter_</phrase><phrase role="special">(</phrase><phrase role="identifier">a_counter</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Enable iff positive value.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">enabled</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">a_counter</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
        <phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">attach</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy button.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">decrement_button</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">on_bn_clicked</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_value</phrase> <phrase role="special">=</phrase>
                <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_on_bn_clicked</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">decrement_button</phrase><phrase role="special">::</phrase><phrase role="identifier">on_bn_clicked</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Counter decremented.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_value</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
        <phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">decrement</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_up_to_date_with_subject</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">decrement_button</phrase><phrase role="special">::</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="comment">// For simplicity, assume always up-to-date.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_update</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">decrement_button</phrase><phrase role="special">::</phrase><phrase role="identifier">update</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="comment">// Enabled iff positive value.</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">enabled</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">if</phrase><phrase role="special">(</phrase><phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="identifier">disable</phrase><phrase role="special">();</phrase>
        <phrase role="keyword">else</phrase> <phrase role="identifier">enable</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">counter</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">counter_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
    </para>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">COUNTER_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">COUNTER_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="string">"../observer/subject.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">counter</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">subject</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Construct counter with specified value.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">counter</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">a_value</phrase> <phrase role="special">=</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">value_</phrase><phrase role="special">(</phrase><phrase role="identifier">a_value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">a_value</phrase><phrase role="special">);</phrase> <phrase role="comment">// Value set.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy counter.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">counter</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Queries */</phrase>

    <phrase role="comment">// Current counter value.</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">value_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="comment">// Decrement counter value.</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">decrement</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_value</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">());</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_value</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase> <phrase role="comment">// Decrement.</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="special">--</phrase><phrase role="identifier">value_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">notify</phrase><phrase role="special">();</phrase> <phrase role="comment">// Notify all attached observers.</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">value_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
    </para>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="string">"counter/counter.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">"counter/decrement_button.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">"observer/observer.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">test_counter</phrase><phrase role="special">;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">view_of_counter</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">observer</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">,</phrase> <phrase role="identifier">update</phrase><phrase role="special">)</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">/* Creation */</phrase>

    <phrase role="comment">// Create view associated with given counter.</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">view_of_counter</phrase><phrase role="special">(</phrase><phrase role="identifier">counter</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a_counter</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">counter_</phrase><phrase role="special">(</phrase><phrase role="identifier">a_counter</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">attach</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">test_counter</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Destroy view.</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">view_of_counter</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">/* Commands */</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">override_up_to_date_with_subject</phrase>
        <phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">view_of_counter</phrase><phrase role="special">::</phrase><phrase role="identifier">up_to_date_with_subject</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="comment">// For simplicity, assume always up-to-date.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_update</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">view_of_counter</phrase><phrase role="special">::</phrase><phrase role="identifier">update</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">counter_</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">test_counter</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">counter</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">counter_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">counter</phrase> <phrase role="identifier">cnt</phrase><phrase role="special">(</phrase><phrase role="identifier">test_counter</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">view_of_counter</phrase> <phrase role="identifier">view</phrase><phrase role="special">(</phrase><phrase role="identifier">cnt</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">decrement_button</phrase> <phrase role="identifier">dec</phrase><phrase role="special">(</phrase><phrase role="identifier">cnt</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">dec</phrase><phrase role="special">.</phrase><phrase role="identifier">enabled</phrase><phrase role="special">());</phrase>

    <phrase role="identifier">test_counter</phrase><phrase role="special">--;</phrase>
    <phrase role="identifier">dec</phrase><phrase role="special">.</phrase><phrase role="identifier">on_bn_clicked</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(!</phrase><phrase role="identifier">dec</phrase><phrase role="special">.</phrase><phrase role="identifier">enabled</phrase><phrase role="special">());</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <anchor id="Cline90_vector_anchor"/>
    <bridgehead renderas="sect3" id="boost_contract.examples.h16">
      <phrase id="boost_contract.examples._cline90__vector__comparison_with_a___proposed_syntax"/><link linkend="boost_contract.examples._cline90__vector__comparison_with_a___proposed_syntax">[Cline90]
      Vector: Comparison with A++ proposed syntax</link>
    </bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <para>
                This Library
              </para>
            </entry>
            <entry>
              <para>
                A++ Proposal (not part of C++)
              </para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#ifndef</phrase> <phrase role="identifier">VECTOR_HPP_</phrase>
<phrase role="preprocessor">#define</phrase> <phrase role="identifier">VECTOR_HPP_</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// NOTE: Incomplete contract assertions, addressing only `size`.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">data_</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">count</phrase><phrase role="special">]),</phrase>
        <phrase role="identifier">size_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">vector</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase> <phrase role="comment">// Non-negative result already checked by invariant.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">slice</phrase> <phrase role="special">=</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">count</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">slice</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">data_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">slice</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">size_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="preprocessor">#endif</phrase> <phrase role="comment">// #include guard</phrase>
</programlisting>
              </para>
            </entry>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="comment">// Extra spaces, newlines, etc. for visual alignment with this library code.</phrase>





<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector</phrase> <phrase role="special">{</phrase>







<phrase role="identifier">legal</phrase><phrase role="special">:</phrase> <phrase role="comment">// Class invariants (legal).</phrase>
    <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>


<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">data_</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">count</phrase><phrase role="special">]),</phrase>
        <phrase role="identifier">size_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>










    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">vector</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>




    <phrase role="keyword">int</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>




    <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">slice</phrase> <phrase role="special">=</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">count</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">slice</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">];</phrase>
        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">data_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">slice</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">size_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>



    <phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase> <phrase role="special">}</phrase>

















    <phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">index</phrase><phrase role="special">];</phrase> <phrase role="special">}</phrase>




<phrase role="identifier">axioms</phrase><phrase role="special">:</phrase> <phrase role="comment">// Preconditions (require) and postconditions (promise) for each func.</phrase>
    <phrase role="special">[</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase> <phrase role="identifier">require</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">promise</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">]</phrase> <phrase role="identifier">vector</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">);</phrase>
    <phrase role="special">[</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase><phrase role="special">;</phrase> <phrase role="identifier">require</phrase> <phrase role="identifier">count</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">promise</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">]</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">);</phrase>
    <phrase role="special">[</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">;</phrase> <phrase role="identifier">require</phrase> <phrase role="identifier">index</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">()]</phrase> <phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)[</phrase><phrase role="identifier">x</phrase><phrase role="special">];</phrase>       <phrase role="comment">// Op[].</phrase>
    <phrase role="special">[</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">index</phrase><phrase role="special">;</phrase> <phrase role="identifier">require</phrase> <phrase role="identifier">index</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">index</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">size</phrase><phrase role="special">()]</phrase> <phrase role="special">(*</phrase><phrase role="keyword">this</phrase><phrase role="special">)[</phrase><phrase role="identifier">x</phrase><phrase role="special">]</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase> <phrase role="comment">// Op[].</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// End.</phrase>
</programlisting>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="string">"vector.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">v</phrase> <phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">v</phrase><phrase role="special">[</phrase><phrase role="number">0</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="number">123</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="number">2</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">[</phrase><phrase role="number">0</phrase><phrase role="special">]</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
              </para>
            </entry>
            <entry>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect3" id="boost_contract.examples.h17">
      <phrase id="boost_contract.examples._cline90__stack__stack_like_container"/><link linkend="boost_contract.examples._cline90__stack__stack_like_container">[Cline90]
      Stack: Stack-like container</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// NOTE: Incomplete contract assertions, addressing only `empty` and `full`.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">stack</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">stack</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">stack</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">data_</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">T</phrase><phrase role="special">[</phrase><phrase role="identifier">capacity</phrase><phrase role="special">]),</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">),</phrase> <phrase role="identifier">size_</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">full</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">capacity</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">for</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">stack</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">delete</phrase><phrase role="special">[]</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">size_</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">full</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">size_</phrase> <phrase role="special">==</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">push</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">data_</phrase><phrase role="special">[</phrase><phrase role="identifier">size_</phrase><phrase role="special">++]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">T</phrase> <phrase role="identifier">pop</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">data_</phrase><phrase role="special">[--</phrase><phrase role="identifier">size_</phrase><phrase role="special">];</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">data_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">capacity_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">size_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">stack</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">s</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">push</phrase><phrase role="special">(</phrase><phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">pop</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h18">
      <phrase id="boost_contract.examples._cline90__vector_stack__subcontracting"/><link linkend="boost_contract.examples._cline90__vector_stack__subcontracting">[Cline90]
      Vector-Stack: Subcontracting</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="string">"vector.hpp"</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">optional</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// NOTE: Incomplete contract assertions, addressing `empty` and `full` only.</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">abstract_stack</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">abstract_stack</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="comment">// Postcondition: empty() (but it cannot be checked here to avoid</phrase>
            <phrase role="comment">// calling pure virtual function length() during construction).</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">abstract_stack</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">full</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">()));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">));</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">length</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">item</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">pop</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">length</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">capacity</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">item</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">push</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">pop</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">old_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">old_item</phrase> <phrase role="special">=</phrase> <phrase role="identifier">BOOST_CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">item</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(!</phrase><phrase role="identifier">full</phrase><phrase role="special">());</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(*</phrase><phrase role="identifier">result</phrase> <phrase role="special">==</phrase> <phrase role="special">*</phrase><phrase role="identifier">old_item</phrase><phrase role="special">);</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">clear</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">empty</phrase><phrase role="special">());</phrase>
        <phrase role="special">})</phrase>
    <phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vstack</phrase>
    <phrase role="preprocessor">#define</phrase> <phrase role="identifier">BASES</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase> <phrase role="special">\</phrase>
            <phrase role="identifier">vstack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;,</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">abstract_stack</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">BASES</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="identifier">BOOST_CONTRACT_BASE_TYPES</phrase><phrase role="special">(</phrase><phrase role="identifier">BASES</phrase><phrase role="special">)</phrase> <phrase role="identifier">base_types</phrase><phrase role="special">;</phrase>
    <phrase role="preprocessor">#undef</phrase> <phrase role="identifier">BASES</phrase>
    <phrase role="identifier">BOOST_CONTRACT_OVERRIDES</phrase><phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">,</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">,</phrase> <phrase role="identifier">item</phrase><phrase role="special">,</phrase> <phrase role="identifier">push</phrase><phrase role="special">,</phrase> <phrase role="identifier">pop</phrase><phrase role="special">,</phrase> <phrase role="identifier">clear</phrase><phrase role="special">)</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">vstack</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">count</phrase> <phrase role="special">=</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor_precondition</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">&gt;([&amp;]</phrase> <phrase role="special">{</phrase>
            <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
        <phrase role="special">}),</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">(</phrase><phrase role="identifier">count</phrase><phrase role="special">),</phrase> <phrase role="comment">// OK, executed after precondition so count &gt;= 0.</phrase>
        <phrase role="identifier">len_</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">count</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">vstack</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="comment">// Inherited from abstract_stack.</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">length</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_length</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">::</phrase><phrase role="identifier">length</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">len_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">capacity</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_capacity</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">::</phrase><phrase role="identifier">capacity</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">.</phrase><phrase role="identifier">size</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">item</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="keyword">const</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_item</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">::</phrase><phrase role="identifier">item</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">[</phrase><phrase role="identifier">len_</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">]);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">push</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
            <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_push</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">::</phrase><phrase role="identifier">push</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">vect_</phrase><phrase role="special">[</phrase><phrase role="identifier">len_</phrase><phrase role="special">++]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">pop</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">optional</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_pop</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">::</phrase><phrase role="identifier">pop</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">*(</phrase><phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">[--</phrase><phrase role="identifier">len_</phrase><phrase role="special">]);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">virtual_</phrase><phrase role="special">*</phrase> <phrase role="identifier">v</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="comment">/* override */</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">&lt;</phrase>
                <phrase role="identifier">override_clear</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">v</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">vstack</phrase><phrase role="special">::</phrase><phrase role="identifier">clear</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">len_</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">vect_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">len_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">vstack</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">s</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">capacity</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">push</phrase><phrase role="special">(</phrase><phrase role="number">123</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">length</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">pop</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">123</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <bridgehead renderas="sect3" id="boost_contract.examples.h19">
      <phrase id="boost_contract.examples._cline90__calendar__a_very_simple_calendar"/><link linkend="boost_contract.examples._cline90__calendar__a_very_simple_calendar">[Cline90]
      Calendar: A very simple calendar</link>
    </bridgehead>
    <para>
<programlisting xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">contract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cassert</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">calendar</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">access</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">invariant</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">12</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">date</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">date</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">days_in</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase><phrase role="special">()));</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">calendar</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">month_</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">date_</phrase><phrase role="special">(</phrase><phrase role="number">31</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">constructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">date</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">31</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">calendar</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">destructor</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">month_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">date</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase>
        <phrase role="comment">// Check invariants.</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">date_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">reset</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">new_month</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">public_function</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">new_month</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">new_month</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">12</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">new_month</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="identifier">month_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">new_month</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">days_in</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">month</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">guard</phrase> <phrase role="identifier">c</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">function</phrase><phrase role="special">()</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">precondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">month</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">12</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">([&amp;]</phrase> <phrase role="special">{</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
                <phrase role="identifier">BOOST_CONTRACT_ASSERT</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase> <phrase role="special">&lt;=</phrase> <phrase role="number">31</phrase><phrase role="special">);</phrase>
            <phrase role="special">})</phrase>
        <phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="number">31</phrase><phrase role="special">;</phrase> <phrase role="comment">// For simplicity, assume all months have 31 days.</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">month_</phrase><phrase role="special">,</phrase> <phrase role="identifier">date_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase>
    <phrase role="identifier">calendar</phrase> <phrase role="identifier">cal</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">cal</phrase><phrase role="special">.</phrase><phrase role="identifier">date</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">31</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">cal</phrase><phrase role="special">.</phrase><phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">cal</phrase><phrase role="special">.</phrase><phrase role="identifier">reset</phrase><phrase role="special">(</phrase><phrase role="number">8</phrase><phrase role="special">);</phrase> <phrase role="comment">// Set month </phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">cal</phrase><phrase role="special">.</phrase><phrase role="identifier">month</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">8</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_contract.release_notes">
    <title><link linkend="boost_contract.release_notes">Release Notes</link></title>
    <para>
      This section contains notes on the current and on all previous library releases
      (in chronological order).
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h0">
      <phrase id="boost_contract.release_notes.release_0_4_1"/><link linkend="boost_contract.release_notes.release_0_4_1">Release
      0.4.1</link>
    </bridgehead>
    <para>
      August 20, 2012
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Using non-fix-spaced font in Full Table of Contents section.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added a couple of notes to the documentation.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Changed <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">CONTRACT_MEMBER_BODY</phrase><phrase role="special">(</phrase><phrase role="identifier">class_type</phrase><phrase role="special">,</phrase> <phrase role="identifier">function_name</phrase><phrase role="special">)</phrase></computeroutput> to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">class_type</phrase><phrase role="special">::</phrase><phrase role="identifier">CONTRACT_MEMBER_BODY</phrase><phrase role="special">(</phrase><phrase role="identifier">function_name</phrase><phrase role="special">)</phrase></computeroutput> so the macro can also be used to declare
          derived classes avoiding using the library syntax even when the base class
          has contracts.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_4_1">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_4_1/doc/html/index.html">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h1">
      <phrase id="boost_contract.release_notes.release_0_4_0"/><link linkend="boost_contract.release_notes.release_0_4_0">Release
      0.4.0</link>
    </bridgehead>
    <para>
      June 4, 2012
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Simplified syntax by reducing extra parenthesis to the bare necessary minimum
          (using some of the preprocessor parsing techniques originally introduced
          by Boost.LocalFunction).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Postcondition old values only copy the old-of expression (e.g., copy just
          vector size instead of entire vector). This improves performance and introduces
          the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">ConstantCopyConstructible</phrase></computeroutput>
          requirement just for the old value expression type (e.g., a vector might
          not be copyable while its size always is because it is an integral type).
          Removed the <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">copyable</phrase></computeroutput> tag.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Body defined outside the macros (so compiler-errors for definitions retain
          their usual meaning).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">CONTRACT_CLASS</phrase></computeroutput> macro
          and removed the need to duplicate declaration elements (do not repeat function
          declaration, do not repeat class name in function declaration, etc).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Using <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">_TPL</phrase></computeroutput> macros so to
          reduce compile-time (instead of internally making all templates contract
          functions so to use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">typename</phrase></computeroutput>
          freely).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Overloading no longer requires unique parameter names.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added C++11-like virtual specifiers.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added constant assertions plus constant-expressions for select assertion
          if-conditions and for loop variants.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added named and deduced parameters.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added concept checking.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Removed the interface to use the library without the macro (programmers
          were required to write too much boiler-plate code for the non-macro interface
          to be actually usable, plus supporting both the macro and non-macro interfaces
          limited what the macros could do).
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_4_0">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_4_0/doc/html/index.html">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h2">
      <phrase id="boost_contract.release_notes.release_0_3_490"/><link linkend="boost_contract.release_notes.release_0_3_490">Release
      0.3.490</link>
    </bridgehead>
    <para>
      March 7, 2010
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Added support and examples for <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">volatile</phrase></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">auto</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">explicit</phrase></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">export</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">extern</phrase></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">friend</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">inline</phrase></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">struct</phrase></computeroutput>, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">throw</phrase></computeroutput> (for exception specifications).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Documented that <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">union</phrase></computeroutput> cannot
          be contracted.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_3_490">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_3_490/doc/html/index.html">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h3">
      <phrase id="boost_contract.release_notes.release_0_3_469"/><link linkend="boost_contract.release_notes.release_0_3_469">Release
      0.3.469</link>
    </bridgehead>
    <para>
      February 21, 2010
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Removed use of <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">self</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">variable</phrase><phrase role="special">.</phrase><phrase role="identifier">now</phrase></computeroutput>, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">variable</phrase><phrase role="special">.</phrase><phrase role="identifier">old</phrase></computeroutput>
          in writing contracts. Object <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="keyword">this</phrase></computeroutput>
          and variables are now accessed as usual in member functions. <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">CONTRACT_OLDOF</phrase><phrase role="special">(</phrase><phrase role="identifier">variable</phrase><phrase role="special">)</phrase></computeroutput>
          is used to access old values in postconditions.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">precondition</phrase><phrase role="special">)</phrase></computeroutput>, <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">)</phrase></computeroutput>,
          and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">body</phrase><phrase role="special">)</phrase></computeroutput> to specify contracts within the function
          signature sequence. If no preconditions then <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">precondition</phrase><phrase role="special">)</phrase>
          <phrase role="special">({...})</phrase></computeroutput> is simply omitted from the
          sequence (same for postconditions, body is mandatory instead). For non-void
          functions, users can name the result argument with <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">)</phrase>
          <phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">-</phrase><phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="special">({...})</phrase></computeroutput>.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Changed contract class template to use same syntax as Boost.Function (i.e.,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">F</phrase></computeroutput> function type).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added support for free functions and static member functions.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added support for subcontracting with multiple inheritance.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added static class invariants which are always checked (also at constructors
          entry, destructor exit, and by static member functions).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added block invariants and Eiffel-like loop variants.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added handlers to customize action on contract failure (default to <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">terminate</phrase><phrase role="special">()</phrase></computeroutput>).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Removed feature for automatic contract documentation using Doxygen (this
          is not compatible with added <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">precondition</phrase><phrase role="special">)</phrase></computeroutput>,
          <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">postcondition</phrase><phrase role="special">)</phrase></computeroutput>, and <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">(</phrase><phrase role="identifier">body</phrase><phrase role="special">)</phrase></computeroutput>
          because Doxygen preprocessor is not capable to handle Boost.Preprocessor
          sequences).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Rewritten entire documentation (now using Boost.QuickBook instead of Doxygen).
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_3_469">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_3_469/doc/html/index.html">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h4">
      <phrase id="boost_contract.release_notes.release_0_2_190"/><link linkend="boost_contract.release_notes.release_0_2_190">Release
      0.2.190</link>
    </bridgehead>
    <para>
      November 21, 2009
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Compiled using both GCC (Linux and Cygwin) and MSVC (Windows XP).
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Required to use void to specify empty function argument list. This is to
          comply with C++03 standard that does not allow to pass empty macro parameters
          so it does not support empty preprocessor sequences <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="special">()</phrase></computeroutput>.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_2_190">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_2_190/doc/html/index.html">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h5">
      <phrase id="boost_contract.release_notes.release_0_1_126"/><link linkend="boost_contract.release_notes.release_0_1_126">Release
      0.1.126</link>
    </bridgehead>
    <para>
      June 17, 2009
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Completed first documentation draft.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_1_126">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_1_126/doc/html/index.html">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h6">
      <phrase id="boost_contract.release_notes.release_0_1_55"/><link linkend="boost_contract.release_notes.release_0_1_55">Release
      0.1.55</link>
    </bridgehead>
    <para>
      April 19, 2009
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          Reorganized files to cleanup root directory.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Added installation program.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_1_55">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_1_55/doc/DBC_Documentation.txt">documentation</ulink>.
    </para>
    <bridgehead renderas="sect3" id="boost_contract.release_notes.h7">
      <phrase id="boost_contract.release_notes.release_0_1_50"/><link linkend="boost_contract.release_notes.release_0_1_50">Release
      0.1.50</link>
    </bridgehead>
    <para>
      April 19, 2009
    </para>
    <para>
      Notes:
    </para>
    <orderedlist inheritnum="ignore" continuation="restarts">
      <listitem>
        <simpara>
          First public release.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      Release <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_1_50">files</ulink>
      and <ulink url="http://contractpp.svn.sourceforge.net/viewvc/contractpp/releases/contractpp_0_1_50/README.txt">documentation</ulink>.
    </para>
  </section>
  <section id="boost_contract.bibliography">
    <title><link linkend="boost_contract.bibliography">Bibliography</link></title>
    <para>
      This section lists all references consulted while designing and developing
      this library.
    </para>
    <para>
      <anchor id="Bright04_anchor"/>[Bright04] W. Bright. <ulink url="http://www.digitalmars.com/d/2.0/dbc.html"><emphasis>Contract
      Programming for the D Programming Language</emphasis></ulink>. 2004.
    </para>
    <para>
      <anchor id="Bright04b_anchor"/>[Bright04b] W. Bright. <ulink url="http://www.digitalmars.com/ctg/contract.html"><emphasis>Contract
      Programming for the Digital Mars C++ Compiler</emphasis></ulink>. 2004.
    </para>
    <para>
      <anchor id="C2_anchor"/>[C2] Aechmea. <ulink url="http://www.programmersheaven.com/app/news/DisplayNews.aspx?NewsID=3843"><emphasis>C^2
      Contract Programming add-on for C++</emphasis></ulink>. 2005.
    </para>
    <para>
      <anchor id="Chrome02_anchor"/>[Chrome02] RemObjects. <ulink url="http://blogs.remobjects.com/blogs/mh/2008/05/01/p216"><emphasis>Chrome:
      Contract Programming for Object Pascal in .NET</emphasis></ulink>. 2002.
    </para>
    <para>
      <anchor id="Clarke06_anchor"/>[Clarke06] L. A. Clarke and D. S. Rosenblum.
      <ulink url="http://discovery.ucl.ac.uk/4991/1/4991.pdf"><emphasis>A Historical
      Perspective on Runtime Assertion Checking in Software Development</emphasis></ulink>.
      Newsletter ACM SIGSOFT Software Engineering Notes, 2006.
    </para>
    <para>
      <anchor id="Cline90_anchor"/>[Cline90] M. Cline and D. Lea. <emphasis>The Behaviour
      of C++ Classes</emphasis> and <ulink url="http://surface.syr.edu/cgi/viewcontent.cgi?article=1116&amp;context=eecs"><emphasis>Using
      Annotated C++</emphasis></ulink>. Proc. of the Symposium on Object Oriented
      Programming Emphasizing Practical Applications, Maris College, 1990.
    </para>
    <para>
      <anchor id="Ellis90_anchor"/>[Ellis90] M. A. Ellis and B. Stroustrup. <emphasis>The
      Annotated C++ Reference Manual</emphasis>. ANSI Base Document, Addison Wesley,
      1990.
    </para>
    <para>
      <anchor id="Gautron92_anchor"/>[Gautron92] P. Gautron. <emphasis>An Assertion
      Mechanism Based on Exceptions</emphasis>. Fourth C++ Technical Conference,
      1992.
    </para>
    <para>
      <anchor id="Hoare73_anchor"/>[Hoare73] C. A. R. Hoare. <emphasis>Hints on Programming
      Language Design</emphasis>. Stanford University Artificial Intelligence memo
      AIM-224/STAN-CS-73-403, pages 193-216, 1973.
    </para>
    <para>
      <anchor id="CodeContracts_anchor"/>[CodeContracts] Microsoft Research. <ulink url="http://research.microsoft.com/en-us/projects/contracts/"><emphasis>Code
      Contracts: Design-By-Contract Programming for All .NET Programming Languages</emphasis></ulink>.
      2012.
    </para>
    <para>
      <anchor id="iContract_anchor"/>[iContract] O. Enseling. <ulink url="http://www.javaworld.com/javaworld/jw-02-2001/jw-0216-cooltools.html"><emphasis>iContract:
      Contract Programming for Java</emphasis></ulink>. 2001.
    </para>
    <para>
      <anchor id="Jcontract_anchor"/>[Jcontract] Parasoft. <ulink url="http://www.parasoft.com/jsp/products/article.jsp?label=product_info_Jcontract"><emphasis>Jcontract:
      Contract Programming for Java</emphasis></ulink>.
    </para>
    <para>
      <anchor id="Lindrud04_anchor"/>[Lindrud04] J. Lindrud. <ulink url="http://www.codeproject.com/Articles/8293/Design-by-Contract-in-C"><emphasis>Design
      by Contract in C++</emphasis></ulink>. 2004.
    </para>
    <para>
      <anchor id="Maley99_anchor"/>[Maley99] D. Maley and I. Spence. <ulink url="http://www.computer.org/portal/web/csdl/doi/10.1109/TOOLS.1999.779000"><emphasis>Emulating
      Design by Contract in C++</emphasis></ulink>. Proceedings of TOOLS, IEEE Computer
      Society, 1999.
    </para>
    <para>
      <anchor id="Meyer97_anchor"/>[Meyer97] B. Meyer. <emphasis>Object Oriented
      Software Construction</emphasis>. Prentice-Hall, 2nd edition, 1997.
    </para>
    <para>
      <anchor id="Mitchell02_anchor"/>[Mitchell02] R. Mitchell and J. McKim. <emphasis>Design
      by Contract, by Example</emphasis>. Addison-Wesley, 2002.
    </para>
    <para>
      <anchor id="N1613_anchor"/>[N1613] T. Ottosen. <ulink url="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2004/n1613.pdf"><emphasis>Proposal
      to add Design by Contract to C++</emphasis></ulink>. The C++ Standards Committee,
      N1613, 2004.
    </para>
    <para>
      <anchor id="N1653_anchor"/>[N1653] C. Nelson. <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm"><emphasis>Working
      draft changes for C99 preprocessor synchronization</emphasis></ulink>. C++
      Standards Committee, N1653, 2004.
    </para>
    <para>
      <anchor id="N1669_anchor"/>[N1669] T. Ottosen. <ulink url="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2004/n1669.html"><emphasis>Proposal
      to add Contract Programming to C++ (revision 1)</emphasis></ulink>. The C++
      Standards Committee, N1669, 2004.
    </para>
    <para>
      <anchor id="N1773_anchor"/>[N1773] D. Abrahams, L. Crowl, T. Ottosen, and J.
      Widman. <ulink url="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1773.html"><emphasis>Proposal
      to add Contract Programming to C++ (revision 2)</emphasis></ulink>. The C++
      Standards Committee, N1773, 2005.
    </para>
    <para>
      <anchor id="N1866_anchor"/>[N1866] L. Crowl and T. Ottosen. <ulink url="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1866.html"><emphasis>Proposal
      to add Contract Programming to C++ (revision 3)</emphasis></ulink>. The C++
      Standards Committee, N1866, 2005.
    </para>
    <para>
      <anchor id="N1895_anchor"/>[N1895] H. Sutter and F. Glassborow. <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1895.pdf"><emphasis>Delegating
      Constructors (revision 2)</emphasis></ulink>. C++ Standards Committee, N1895,
      2005.
    </para>
    <para>
      <anchor id="N1962_anchor"/>[N1962] L. Crowl and T. Ottosen. <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1962.html"><emphasis>Proposal
      to add Contract Programming to C++ (revision 4)</emphasis></ulink>. The C++
      Standards Committee, N1962, 2006.
    </para>
    <para>
      <anchor id="N2081_anchor"/>[N2081] D. Gregor, B. Stroustrup. <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2081.pdf"><emphasis>Concepts
      (revision 1)</emphasis></ulink>. The C++ Standards Committee, N2081, 2006.
    </para>
    <para>
      <anchor id="N2914_anchor"/>[N2914] P. Becker. <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf"><emphasis>Working
      Draft, Standard for Programming Language C++</emphasis></ulink>. The C++ Standards
      Committee, N2914, 2009.
    </para>
    <para>
      <anchor id="N2906_anchor"/>[N2906] B. Stroustrup. <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2906.pdf"><emphasis>Simplifying
      the sue of concepts</emphasis></ulink>. The C++ Standards Committee, N2906,
      2009.
    </para>
    <para>
      <anchor id="Rosenblum95_anchor"/>[Rosenblum95] D. S. Rosenblum. <ulink url="http://www.cs.toronto.edu/~chechik/courses06/csc410/rosenblum_assert95.pdf"><emphasis>A
      practical Approach to Programming With Assertions</emphasis></ulink>. IEEE
      Transactions on Software Engineering, 1995.
    </para>
    <para>
      <anchor id="SPARKAda_anchor"/>[SPARKAda] Praxis. <ulink url="http://www.praxis-his.com/sparkada/language.asp"><emphasis>SPARKAda
      (Ada-like Language with Contract Programming)</emphasis></ulink>.
    </para>
    <para>
      <anchor id="SpecSharp_anchor"/>[SpecSharp] Microsoft. <ulink url="http:://research.microsoft.com/en-us/projects/specsharp/"><emphasis>Spec#
      (C# Extension)</emphasis></ulink>.
    </para>
    <para>
      <anchor id="Stroustrup94_anchor"/>[Stroustrup94] B. Stroustrup. <emphasis>The
      Design and Evolution of C++</emphasis>. Addison Wesley, 1994.
    </para>
    <para>
      <anchor id="Stroustrup13_anchor"/>[Stroustrup13] B. Stroustrup. <emphasis>The
      C++ Programming Language</emphasis>. Addison Wesley, 4th Edition, 2013.
    </para>
    <para>
      <anchor id="Tandin04_anchor"/>[Tandin04] A. Tandin. <ulink url="http://www.codeproject.com/KB/macros/DbC_and_Doxygen.aspx"><emphasis>Design
      by Contract macros for C++ and link to Doxygen</emphasis></ulink>. 2004.
    </para>
    <para>
      <anchor id="Wilson06_anchor"/>[Wilson06] M. Wilson. <ulink url="http://www.artima.com/cppsource/deepspace.html"><emphasis>Contract
      Programming 101 - The Nuclear Reactor and the Deep Space Probe</emphasis></ulink>.
      The C++ Source, 2006.
    </para>
  </section>
  <section id="boost_contract.acknowledgments">
    <title><link linkend="boost_contract.acknowledgments">Acknowledgments</link></title>
    <para>
      This section aims to recognize the contributions of <emphasis>all</emphasis>
      the different people that participated directly or indirectly to the design
      and development of this library.
    </para>
    <para>
      Sincere thanks to my parents for their support with my education and my studies
      in computer science.
    </para>
    <para>
      Many thanks to Bertrand Meyer for his pioneering and thorough work on Contract
      Programming in <link linkend="Meyer97_anchor">[Meyer97]</link>.
    </para>
    <para>
      Many thanks to Thorsten Ottosen for his work with <link linkend="N1962_anchor">[N1962]</link>
      (and previous revisions) and for clarifying the <link linkend="N1962_anchor">[N1962]</link>
      requirements directly with the library authors when needed.
    </para>
    <para>
      Many thanks to Andrzej Krzemienski for reviewing earlier versions of this library
      providing valuable insights, for exchanging ideas on implementing assertion
      requirements, and for suggesting to support named parameters.
    </para>
    <para>
      Many thanks to Vicente J. Botet Escriba for reviewing earlier versions of this
      library providing valuable insights and for suggesting to use <computeroutput xmlns:xi="http://www.w3.org/2001/XInclude"><phrase role="identifier">contract</phrase><phrase role="special">::</phrase><phrase role="identifier">copy</phrase></computeroutput>.
    </para>
    <para>
      Thanks to Steven Watanabe for providing valuable insights on C++ and for hinting
      to use template meta-programming introspection to detect if a base class has
      a given member function (technique which turned out to be essential to fully
      automate subcontracting).
    </para>
    <para>
      Thanks to Dave Abrahams for providing valuable comments on the library syntax
      and especially on the syntax to support named parameters.
    </para>
    <para>
      Thanks to David Maley for having shared source code form his inspiring work
      in <link linkend="Maley99_anchor">[Maley99]</link> on emulating Contract Programming
      in C++.
    </para>
    <para>
      Finally, many thanks to the entire __Boost__ community and <ulink url="http://lists.boost.org">mailing
      list</ulink> for providing valuable comments about this library and great insights
      on the C++ programming language.
    </para>
  </section>
</chapter>
